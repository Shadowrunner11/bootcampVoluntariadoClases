{"mappings":"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","sources":["node_modules/mermaid/src/diagrams/flowchart/flowDiagram-v2.ts","node_modules/mermaid/src/diagrams/flowchart/flowRenderer-v2.js","node_modules/mermaid/src/diagrams/flowchart/styles.ts","node_modules/mermaid/src/diagrams/class/svgDraw.js","node_modules/lodash-es/_getPrototype.js","node_modules/lodash-es/isPlainObject.js"],"sourcesContent":["// @ts-ignore: TODO Fix ts errors\nimport flowParser from './parser/flow';\nimport flowDb from './flowDb';\nimport flowRendererV2 from './flowRenderer-v2';\nimport flowStyles from './styles';\nimport { MermaidConfig } from '../../config.type';\nimport { setConfig } from '../../config';\n\nexport const diagram = {\n  parser: flowParser,\n  db: flowDb,\n  renderer: flowRendererV2,\n  styles: flowStyles,\n  init: (cnf: MermaidConfig) => {\n    if (!cnf.flowchart) {\n      cnf.flowchart = {};\n    }\n    cnf.flowchart.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    // flowchart-v2 uses dagre-wrapper, which doesn't have access to flowchart cnf\n    setConfig({ flowchart: { arrowMarkerAbsolute: cnf.arrowMarkerAbsolute } });\n    flowRendererV2.setConf(cnf.flowchart);\n    flowDb.clear();\n    flowDb.setGen('gen-2');\n  },\n};\n","import * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { select, curveLinear, selectAll } from 'd3';\n\nimport flowDb from './flowDb';\nimport { getConfig } from '../../config';\nimport utils from '../../utils';\n\nimport { render } from '../../dagre-wrapper/index.js';\nimport { addHtmlLabel } from 'dagre-d3-es/src/dagre-js/label/add-html-label.js';\nimport { log } from '../../logger';\nimport common, { evaluate } from '../common/common';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\n\nconst conf = {};\nexport const setConf = function (cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    conf[key] = cnf[key];\n  }\n};\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param vert Object containing the vertices.\n * @param g The graph that is to be drawn.\n * @param svgId\n * @param root\n * @param doc\n * @param diagObj\n */\nexport const addVertices = function (vert, g, svgId, root, doc, diagObj) {\n  const svg = root.select(`[id=\"${svgId}\"]`);\n  const keys = Object.keys(vert);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  keys.forEach(function (id) {\n    const vertex = vert[id];\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     * @type {string}\n     */\n    let classStr = 'default';\n    if (vertex.classes.length > 0) {\n      classStr = vertex.classes.join(' ');\n    }\n    classStr = classStr + ' flowchart-label';\n    const styles = getStylesFromArray(vertex.styles);\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    let vertexText = vertex.text !== undefined ? vertex.text : vertex.id;\n\n    // We create a SVG label, either by delegating to addHtmlLabel or manually\n    let vertexNode;\n    log.info('vertex', vertex, vertex.labelType);\n    if (vertex.labelType === 'markdown') {\n      log.info('vertex', vertex, vertex.labelType);\n    } else {\n      if (evaluate(getConfig().flowchart.htmlLabels)) {\n        // TODO: addHtmlLabel accepts a labelStyle. Do we possibly have that?\n        const node = {\n          label: vertexText.replace(\n            /fa[blrs]?:fa-[\\w-]+/g,\n            (s) => `<i class='${s.replace(':', ' ')}'></i>`\n          ),\n        };\n        vertexNode = addHtmlLabel(svg, node).node();\n        vertexNode.parentNode.removeChild(vertexNode);\n      } else {\n        const svgLabel = doc.createElementNS('http://www.w3.org/2000/svg', 'text');\n        svgLabel.setAttribute('style', styles.labelStyle.replace('color:', 'fill:'));\n\n        const rows = vertexText.split(common.lineBreakRegex);\n\n        for (const row of rows) {\n          const tspan = doc.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n          tspan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');\n          tspan.setAttribute('dy', '1em');\n          tspan.setAttribute('x', '1');\n          tspan.textContent = row;\n          svgLabel.appendChild(tspan);\n        }\n        vertexNode = svgLabel;\n      }\n    }\n\n    let radious = 0;\n    let _shape = '';\n    // Set the shape based parameters\n    switch (vertex.type) {\n      case 'round':\n        radious = 5;\n        _shape = 'rect';\n        break;\n      case 'square':\n        _shape = 'rect';\n        break;\n      case 'diamond':\n        _shape = 'question';\n        break;\n      case 'hexagon':\n        _shape = 'hexagon';\n        break;\n      case 'odd':\n        _shape = 'rect_left_inv_arrow';\n        break;\n      case 'lean_right':\n        _shape = 'lean_right';\n        break;\n      case 'lean_left':\n        _shape = 'lean_left';\n        break;\n      case 'trapezoid':\n        _shape = 'trapezoid';\n        break;\n      case 'inv_trapezoid':\n        _shape = 'inv_trapezoid';\n        break;\n      case 'odd_right':\n        _shape = 'rect_left_inv_arrow';\n        break;\n      case 'circle':\n        _shape = 'circle';\n        break;\n      case 'ellipse':\n        _shape = 'ellipse';\n        break;\n      case 'stadium':\n        _shape = 'stadium';\n        break;\n      case 'subroutine':\n        _shape = 'subroutine';\n        break;\n      case 'cylinder':\n        _shape = 'cylinder';\n        break;\n      case 'group':\n        _shape = 'rect';\n        break;\n      case 'doublecircle':\n        _shape = 'doublecircle';\n        break;\n      default:\n        _shape = 'rect';\n    }\n    // Add the node\n    g.setNode(vertex.id, {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: vertexText,\n      labelType: vertex.labelType,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      link: vertex.link,\n      linkTarget: vertex.linkTarget,\n      tooltip: diagObj.db.getTooltip(vertex.id) || '',\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      haveCallback: vertex.haveCallback,\n      width: vertex.type === 'group' ? 500 : undefined,\n      dir: vertex.dir,\n      type: vertex.type,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding,\n    });\n\n    log.info('setNode', {\n      labelStyle: styles.labelStyle,\n      labelType: vertex.labelType,\n      shape: _shape,\n      labelText: vertexText,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      dir: vertex.dir,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding,\n    });\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param {object} edges The edges to add to the graph\n * @param {object} g The graph object\n * @param diagObj\n */\nexport const addEdges = function (edges, g, diagObj) {\n  log.info('abc78 edges = ', edges);\n  let cnt = 0;\n  let linkIdCnt = {};\n\n  let defaultStyle;\n  let defaultLabelStyle;\n\n  if (edges.defaultStyle !== undefined) {\n    const defaultStyles = getStylesFromArray(edges.defaultStyle);\n    defaultStyle = defaultStyles.style;\n    defaultLabelStyle = defaultStyles.labelStyle;\n  }\n\n  edges.forEach(function (edge) {\n    cnt++;\n\n    // Identify Link\n    var linkIdBase = 'L-' + edge.start + '-' + edge.end;\n    // count the links from+to the same node to give unique id\n    if (linkIdCnt[linkIdBase] === undefined) {\n      linkIdCnt[linkIdBase] = 0;\n      log.info('abc78 new entry', linkIdBase, linkIdCnt[linkIdBase]);\n    } else {\n      linkIdCnt[linkIdBase]++;\n      log.info('abc78 new entry', linkIdBase, linkIdCnt[linkIdBase]);\n    }\n    let linkId = linkIdBase + '-' + linkIdCnt[linkIdBase];\n    log.info('abc78 new link id to be used is', linkIdBase, linkId, linkIdCnt[linkIdBase]);\n    var linkNameStart = 'LS-' + edge.start;\n    var linkNameEnd = 'LE-' + edge.end;\n\n    const edgeData = { style: '', labelStyle: '' };\n    edgeData.minlen = edge.length || 1;\n    //edgeData.id = 'id' + cnt;\n\n    // Set link type for rendering\n    if (edge.type === 'arrow_open') {\n      edgeData.arrowhead = 'none';\n    } else {\n      edgeData.arrowhead = 'normal';\n    }\n\n    // Check of arrow types, placed here in order not to break old rendering\n    edgeData.arrowTypeStart = 'arrow_open';\n    edgeData.arrowTypeEnd = 'arrow_open';\n\n    /* eslint-disable no-fallthrough */\n    switch (edge.type) {\n      case 'double_arrow_cross':\n        edgeData.arrowTypeStart = 'arrow_cross';\n      case 'arrow_cross':\n        edgeData.arrowTypeEnd = 'arrow_cross';\n        break;\n      case 'double_arrow_point':\n        edgeData.arrowTypeStart = 'arrow_point';\n      case 'arrow_point':\n        edgeData.arrowTypeEnd = 'arrow_point';\n        break;\n      case 'double_arrow_circle':\n        edgeData.arrowTypeStart = 'arrow_circle';\n      case 'arrow_circle':\n        edgeData.arrowTypeEnd = 'arrow_circle';\n        break;\n    }\n\n    let style = '';\n    let labelStyle = '';\n\n    switch (edge.stroke) {\n      case 'normal':\n        style = 'fill:none;';\n        if (defaultStyle !== undefined) {\n          style = defaultStyle;\n        }\n        if (defaultLabelStyle !== undefined) {\n          labelStyle = defaultLabelStyle;\n        }\n        edgeData.thickness = 'normal';\n        edgeData.pattern = 'solid';\n        break;\n      case 'dotted':\n        edgeData.thickness = 'normal';\n        edgeData.pattern = 'dotted';\n        edgeData.style = 'fill:none;stroke-width:2px;stroke-dasharray:3;';\n        break;\n      case 'thick':\n        edgeData.thickness = 'thick';\n        edgeData.pattern = 'solid';\n        edgeData.style = 'stroke-width: 3.5px;fill:none;';\n        break;\n      case 'invisible':\n        edgeData.thickness = 'invisible';\n        edgeData.pattern = 'solid';\n        edgeData.style = 'stroke-width: 0;fill:none;';\n        break;\n    }\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      style = styles.style;\n      labelStyle = styles.labelStyle;\n    }\n\n    edgeData.style = edgeData.style += style;\n    edgeData.labelStyle = edgeData.labelStyle += labelStyle;\n\n    if (edge.interpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (edges.defaultInterpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(edges.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n    }\n\n    edgeData.labelType = edge.labelType;\n    edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n    if (edge.style === undefined) {\n      edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none;';\n    }\n\n    edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n\n    edgeData.id = linkId;\n    edgeData.classes = 'flowchart-link ' + linkNameStart + ' ' + linkNameEnd;\n\n    // Add the edge to the graph\n    g.setEdge(edge.start, edge.end, edgeData, cnt);\n  });\n};\n\n/**\n * Returns the all the styles from classDef statements in the graph definition.\n *\n * @param text\n * @param diagObj\n * @returns {object} ClassDef styles\n */\nexport const getClasses = function (text, diagObj) {\n  log.info('Extracting classes');\n  diagObj.db.clear();\n  try {\n    // Parse the graph definition\n    diagObj.parse(text);\n    return diagObj.db.getClasses();\n  } catch (e) {\n    return;\n  }\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param text\n * @param id\n */\n\nexport const draw = function (text, id, _version, diagObj) {\n  log.info('Drawing flowchart');\n  diagObj.db.clear();\n  flowDb.setGen('gen-2');\n  // Parse the graph definition\n  diagObj.parser.parse(text);\n\n  // Fetch the default direction, use TD if none was found\n  let dir = diagObj.db.getDirection();\n  if (dir === undefined) {\n    dir = 'TD';\n  }\n\n  const { securityLevel, flowchart: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n\n  // Handle root and document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n\n  // Create the input mermaid.graph\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: dir,\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 0,\n      marginy: 0,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  let subG;\n  const subGraphs = diagObj.db.getSubGraphs();\n  log.info('Subgraphs - ', subGraphs);\n  for (let i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n    log.info('Subgraph - ', subG);\n    diagObj.db.addVertex(\n      subG.id,\n      { text: subG.title, type: subG.labelType },\n      'group',\n      undefined,\n      subG.classes,\n      subG.dir\n    );\n  }\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const vert = diagObj.db.getVertices();\n\n  const edges = diagObj.db.getEdges();\n\n  log.info('Edges', edges);\n  let i = 0;\n  for (i = subGraphs.length - 1; i >= 0; i--) {\n    // for (let i = 0; i < subGraphs.length; i++) {\n    subG = subGraphs[i];\n\n    selectAll('cluster').append('text');\n\n    for (let j = 0; j < subG.nodes.length; j++) {\n      log.info('Setting up subgraphs', subG.nodes[j], subG.id);\n      g.setParent(subG.nodes[j], subG.id);\n    }\n  }\n  addVertices(vert, g, id, root, doc, diagObj);\n  addEdges(edges, g, diagObj);\n\n  // Add custom shapes\n  // flowChartShapes.addToRenderV2(addShape);\n\n  // Set up an SVG group so that we can translate the final graph.\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  const element = root.select('#' + id + ' g');\n  render(element, g, ['point', 'circle', 'cross'], 'flowchart', id);\n\n  utils.insertTitle(svg, 'flowchartTitleText', conf.titleTopMargin, diagObj.db.getDiagramTitle());\n\n  setupGraphViewbox(g, svg, conf.diagramPadding, conf.useMaxWidth);\n\n  // Index nodes\n  diagObj.db.indexNodes('subGraph' + i);\n\n  // Add label rects for non html labels\n  if (!conf.htmlLabels) {\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n\n  // If node has a link, wrap it in an anchor SVG object.\n  const keys = Object.keys(vert);\n  keys.forEach(function (key) {\n    const vertex = vert[key];\n\n    if (vertex.link) {\n      const node = select('#' + id + ' [id=\"' + key + '\"]');\n      if (node) {\n        const link = doc.createElementNS('http://www.w3.org/2000/svg', 'a');\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'class', vertex.classes.join(' '));\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'href', vertex.link);\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'rel', 'noopener');\n        if (securityLevel === 'sandbox') {\n          link.setAttributeNS('http://www.w3.org/2000/svg', 'target', '_top');\n        } else if (vertex.linkTarget) {\n          link.setAttributeNS('http://www.w3.org/2000/svg', 'target', vertex.linkTarget);\n        }\n\n        const linkNode = node.insert(function () {\n          return link;\n        }, ':first-child');\n\n        const shape = node.select('.label-container');\n        if (shape) {\n          linkNode.append(function () {\n            return shape.node();\n          });\n        }\n\n        const label = node.select('.label');\n        if (label) {\n          linkNode.append(function () {\n            return label.node();\n          });\n        }\n      }\n    }\n  });\n};\n\nexport default {\n  setConf,\n  addVertices,\n  addEdges,\n  getClasses,\n  draw,\n};\n","/** Returns the styles given options */\nexport interface FlowChartStyleOptions {\n  arrowheadColor: string;\n  border2: string;\n  clusterBkg: string;\n  clusterBorder: string;\n  edgeLabelBackground: string;\n  fontFamily: string;\n  lineColor: string;\n  mainBkg: string;\n  nodeBorder: string;\n  nodeTextColor: string;\n  tertiaryColor: string;\n  textColor: string;\n  titleColor: string;\n}\n\nconst getStyles = (options: FlowChartStyleOptions) =>\n  `.label {\n    font-family: ${options.fontFamily};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n  .cluster-label text {\n    fill: ${options.titleColor};\n  }\n  .cluster-label span,p {\n    color: ${options.titleColor};\n  }\n\n  .label text,span,p {\n    fill: ${options.nodeTextColor || options.textColor};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ${options.mainBkg};\n    stroke: ${options.nodeBorder};\n    stroke-width: 1px;\n  }\n  .flowchart-label text {\n    text-anchor: middle;\n  }\n  // .flowchart-label .text-outer-tspan {\n  //   text-anchor: middle;\n  // }\n  // .flowchart-label .text-inner-tspan {\n  //   text-anchor: start;\n  // }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ${options.arrowheadColor};\n  }\n\n  .edgePath .path {\n    stroke: ${options.lineColor};\n    stroke-width: 2.0px;\n  }\n\n  .flowchart-link {\n    stroke: ${options.lineColor};\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ${options.edgeLabelBackground};\n    rect {\n      opacity: 0.5;\n      background-color: ${options.edgeLabelBackground};\n      fill: ${options.edgeLabelBackground};\n    }\n    text-align: center;\n  }\n\n  .cluster rect {\n    fill: ${options.clusterBkg};\n    stroke: ${options.clusterBorder};\n    stroke-width: 1px;\n  }\n\n  .cluster text {\n    fill: ${options.titleColor};\n  }\n\n  .cluster span,p {\n    color: ${options.titleColor};\n  }\n  /* .cluster div {\n    color: ${options.titleColor};\n  } */\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: ${options.fontFamily};\n    font-size: 12px;\n    background: ${options.tertiaryColor};\n    border: 1px solid ${options.border2};\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .flowchartTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n`;\n\nexport default getStyles;\n","import { line, curveBasis } from 'd3';\nimport utils from '../../utils';\nimport { log } from '../../logger';\nimport { parseGenericTypes } from '../common/common';\n\nlet edgeCount = 0;\nexport const drawEdge = function (elem, path, relation, conf, diagObj) {\n  const getRelationType = function (type) {\n    switch (type) {\n      case diagObj.db.relationType.AGGREGATION:\n        return 'aggregation';\n      case diagObj.db.relationType.EXTENSION:\n        return 'extension';\n      case diagObj.db.relationType.COMPOSITION:\n        return 'composition';\n      case diagObj.db.relationType.DEPENDENCY:\n        return 'dependency';\n      case diagObj.db.relationType.LOLLIPOP:\n        return 'lollipop';\n    }\n  };\n\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n\n  // The data for our line\n  const lineData = path.points;\n\n  // This is the accessor function we talked about above\n  const lineFunction = line()\n    .x(function (d) {\n      return d.x;\n    })\n    .y(function (d) {\n      return d.y;\n    })\n    .curve(curveBasis);\n\n  const svgPath = elem\n    .append('path')\n    .attr('d', lineFunction(lineData))\n    .attr('id', 'edge' + edgeCount)\n    .attr('class', 'relation');\n  let url = '';\n  if (conf.arrowMarkerAbsolute) {\n    url =\n      window.location.protocol +\n      '//' +\n      window.location.host +\n      window.location.pathname +\n      window.location.search;\n    url = url.replace(/\\(/g, '\\\\(');\n    url = url.replace(/\\)/g, '\\\\)');\n  }\n\n  if (relation.relation.lineType == 1) {\n    svgPath.attr('class', 'relation dashed-line');\n  }\n  if (relation.relation.lineType == 10) {\n    svgPath.attr('class', 'relation dotted-line');\n  }\n  if (relation.relation.type1 !== 'none') {\n    svgPath.attr(\n      'marker-start',\n      'url(' + url + '#' + getRelationType(relation.relation.type1) + 'Start' + ')'\n    );\n  }\n  if (relation.relation.type2 !== 'none') {\n    svgPath.attr(\n      'marker-end',\n      'url(' + url + '#' + getRelationType(relation.relation.type2) + 'End' + ')'\n    );\n  }\n\n  let x, y;\n  const l = path.points.length;\n  // Calculate Label position\n  let labelPosition = utils.calcLabelPosition(path.points);\n  x = labelPosition.x;\n  y = labelPosition.y;\n\n  let p1_card_x, p1_card_y;\n  let p2_card_x, p2_card_y;\n\n  if (l % 2 !== 0 && l > 1) {\n    let cardinality_1_point = utils.calcCardinalityPosition(\n      relation.relation.type1 !== 'none',\n      path.points,\n      path.points[0]\n    );\n    let cardinality_2_point = utils.calcCardinalityPosition(\n      relation.relation.type2 !== 'none',\n      path.points,\n      path.points[l - 1]\n    );\n\n    log.debug('cardinality_1_point ' + JSON.stringify(cardinality_1_point));\n    log.debug('cardinality_2_point ' + JSON.stringify(cardinality_2_point));\n\n    p1_card_x = cardinality_1_point.x;\n    p1_card_y = cardinality_1_point.y;\n    p2_card_x = cardinality_2_point.x;\n    p2_card_y = cardinality_2_point.y;\n  }\n\n  if (relation.title !== undefined) {\n    const g = elem.append('g').attr('class', 'classLabel');\n    const label = g\n      .append('text')\n      .attr('class', 'label')\n      .attr('x', x)\n      .attr('y', y)\n      .attr('fill', 'red')\n      .attr('text-anchor', 'middle')\n      .text(relation.title);\n\n    window.label = label;\n    const bounds = label.node().getBBox();\n\n    g.insert('rect', ':first-child')\n      .attr('class', 'box')\n      .attr('x', bounds.x - conf.padding / 2)\n      .attr('y', bounds.y - conf.padding / 2)\n      .attr('width', bounds.width + conf.padding)\n      .attr('height', bounds.height + conf.padding);\n  }\n\n  log.info('Rendering relation ' + JSON.stringify(relation));\n  if (relation.relationTitle1 !== undefined && relation.relationTitle1 !== 'none') {\n    const g = elem.append('g').attr('class', 'cardinality');\n    g.append('text')\n      .attr('class', 'type1')\n      .attr('x', p1_card_x)\n      .attr('y', p1_card_y)\n      .attr('fill', 'black')\n      .attr('font-size', '6')\n      .text(relation.relationTitle1);\n  }\n  if (relation.relationTitle2 !== undefined && relation.relationTitle2 !== 'none') {\n    const g = elem.append('g').attr('class', 'cardinality');\n    g.append('text')\n      .attr('class', 'type2')\n      .attr('x', p2_card_x)\n      .attr('y', p2_card_y)\n      .attr('fill', 'black')\n      .attr('font-size', '6')\n      .text(relation.relationTitle2);\n  }\n\n  edgeCount++;\n};\n\n/**\n * Renders a class diagram\n *\n * @param {SVGSVGElement} elem The element to draw it into\n * @param classDef\n * @param conf\n * @param diagObj\n * @todo Add more information in the JSDOC here\n */\nexport const drawClass = function (elem, classDef, conf, diagObj) {\n  log.debug('Rendering class ', classDef, conf);\n\n  const id = classDef.id;\n  const classInfo = {\n    id: id,\n    label: classDef.id,\n    width: 0,\n    height: 0,\n  };\n\n  // add class group\n  const g = elem.append('g').attr('id', diagObj.db.lookUpDomId(id)).attr('class', 'classGroup');\n\n  // add title\n  let title;\n  if (classDef.link) {\n    title = g\n      .append('svg:a')\n      .attr('xlink:href', classDef.link)\n      .attr('target', classDef.linkTarget)\n      .append('text')\n      .attr('y', conf.textHeight + conf.padding)\n      .attr('x', 0);\n  } else {\n    title = g\n      .append('text')\n      .attr('y', conf.textHeight + conf.padding)\n      .attr('x', 0);\n  }\n\n  // add annotations\n  let isFirst = true;\n  classDef.annotations.forEach(function (member) {\n    const titleText2 = title.append('tspan').text('«' + member + '»');\n    if (!isFirst) {\n      titleText2.attr('dy', conf.textHeight);\n    }\n    isFirst = false;\n  });\n\n  let classTitleString = classDef.id;\n\n  if (classDef.type !== undefined && classDef.type !== '') {\n    classTitleString += '<' + classDef.type + '>';\n  }\n\n  const classTitle = title.append('tspan').text(classTitleString).attr('class', 'title');\n\n  // If class has annotations the title needs to have an offset of the text height\n  if (!isFirst) {\n    classTitle.attr('dy', conf.textHeight);\n  }\n\n  const titleHeight = title.node().getBBox().height;\n\n  const membersLine = g\n    .append('line') // text label for the x axis\n    .attr('x1', 0)\n    .attr('y1', conf.padding + titleHeight + conf.dividerMargin / 2)\n    .attr('y2', conf.padding + titleHeight + conf.dividerMargin / 2);\n\n  const members = g\n    .append('text') // text label for the x axis\n    .attr('x', conf.padding)\n    .attr('y', titleHeight + conf.dividerMargin + conf.textHeight)\n    .attr('fill', 'white')\n    .attr('class', 'classText');\n\n  isFirst = true;\n  classDef.members.forEach(function (member) {\n    addTspan(members, member, isFirst, conf);\n    isFirst = false;\n  });\n\n  const membersBox = members.node().getBBox();\n\n  const methodsLine = g\n    .append('line') // text label for the x axis\n    .attr('x1', 0)\n    .attr('y1', conf.padding + titleHeight + conf.dividerMargin + membersBox.height)\n    .attr('y2', conf.padding + titleHeight + conf.dividerMargin + membersBox.height);\n\n  const methods = g\n    .append('text') // text label for the x axis\n    .attr('x', conf.padding)\n    .attr('y', titleHeight + 2 * conf.dividerMargin + membersBox.height + conf.textHeight)\n    .attr('fill', 'white')\n    .attr('class', 'classText');\n\n  isFirst = true;\n\n  classDef.methods.forEach(function (method) {\n    addTspan(methods, method, isFirst, conf);\n    isFirst = false;\n  });\n\n  const classBox = g.node().getBBox();\n  var cssClassStr = ' ';\n\n  if (classDef.cssClasses.length > 0) {\n    cssClassStr = cssClassStr + classDef.cssClasses.join(' ');\n  }\n\n  const rect = g\n    .insert('rect', ':first-child')\n    .attr('x', 0)\n    .attr('y', 0)\n    .attr('width', classBox.width + 2 * conf.padding)\n    .attr('height', classBox.height + conf.padding + 0.5 * conf.dividerMargin)\n    .attr('class', cssClassStr);\n\n  const rectWidth = rect.node().getBBox().width;\n\n  // Center title\n  // We subtract the width of each text element from the class box width and divide it by 2\n  title.node().childNodes.forEach(function (x) {\n    x.setAttribute('x', (rectWidth - x.getBBox().width) / 2);\n  });\n\n  if (classDef.tooltip) {\n    title.insert('title').text(classDef.tooltip);\n  }\n\n  membersLine.attr('x2', rectWidth);\n  methodsLine.attr('x2', rectWidth);\n\n  classInfo.width = rectWidth;\n  classInfo.height = classBox.height + conf.padding + 0.5 * conf.dividerMargin;\n\n  return classInfo;\n};\n\n/**\n * Renders a note diagram\n *\n * @param {SVGSVGElement} elem The element to draw it into\n * @param {{id: string; text: string; class: string;}} note\n * @param conf\n * @param diagObj\n * @todo Add more information in the JSDOC here\n */\nexport const drawNote = function (elem, note, conf, diagObj) {\n  log.debug('Rendering note ', note, conf);\n\n  const id = note.id;\n  const noteInfo = {\n    id: id,\n    text: note.text,\n    width: 0,\n    height: 0,\n  };\n\n  // add class group\n  const g = elem.append('g').attr('id', id).attr('class', 'classGroup');\n\n  // add text\n  let text = g\n    .append('text')\n    .attr('y', conf.textHeight + conf.padding)\n    .attr('x', 0);\n\n  const lines = JSON.parse(`\"${note.text}\"`).split('\\n');\n\n  lines.forEach(function (line) {\n    log.debug(`Adding line: ${line}`);\n    text.append('tspan').text(line).attr('class', 'title').attr('dy', conf.textHeight);\n  });\n\n  const noteBox = g.node().getBBox();\n\n  const rect = g\n    .insert('rect', ':first-child')\n    .attr('x', 0)\n    .attr('y', 0)\n    .attr('width', noteBox.width + 2 * conf.padding)\n    .attr(\n      'height',\n      noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin\n    );\n\n  const rectWidth = rect.node().getBBox().width;\n\n  // Center title\n  // We subtract the width of each text element from the class box width and divide it by 2\n  text.node().childNodes.forEach(function (x) {\n    x.setAttribute('x', (rectWidth - x.getBBox().width) / 2);\n  });\n\n  noteInfo.width = rectWidth;\n  noteInfo.height =\n    noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin;\n\n  return noteInfo;\n};\n\nexport const parseMember = function (text) {\n  const fieldRegEx = /^([#+~-])?(\\w+)(~\\w+~|\\[])?\\s+(\\w+) *([$*])?$/;\n  const methodRegEx = /^([#+|~-])?(\\w+) *\\( *(.*)\\) *([$*])? *(\\w*[[\\]|~]*\\s*\\w*~?)$/;\n\n  let fieldMatch = text.match(fieldRegEx);\n  let methodMatch = text.match(methodRegEx);\n\n  if (fieldMatch && !methodMatch) {\n    return buildFieldDisplay(fieldMatch);\n  } else if (methodMatch) {\n    return buildMethodDisplay(methodMatch);\n  } else {\n    return buildLegacyDisplay(text);\n  }\n};\n\nconst buildFieldDisplay = function (parsedText) {\n  let cssStyle = '';\n  let displayText = '';\n\n  try {\n    let visibility = parsedText[1] ? parsedText[1].trim() : '';\n    let fieldType = parsedText[2] ? parsedText[2].trim() : '';\n    let genericType = parsedText[3] ? parseGenericTypes(parsedText[3].trim()) : '';\n    let fieldName = parsedText[4] ? parsedText[4].trim() : '';\n    let classifier = parsedText[5] ? parsedText[5].trim() : '';\n\n    displayText = visibility + fieldType + genericType + ' ' + fieldName;\n    cssStyle = parseClassifier(classifier);\n  } catch (err) {\n    displayText = parsedText;\n  }\n\n  return {\n    displayText: displayText,\n    cssStyle: cssStyle,\n  };\n};\n\nconst buildMethodDisplay = function (parsedText) {\n  let cssStyle = '';\n  let displayText = '';\n\n  try {\n    let visibility = parsedText[1] ? parsedText[1].trim() : '';\n    let methodName = parsedText[2] ? parsedText[2].trim() : '';\n    let parameters = parsedText[3] ? parseGenericTypes(parsedText[3].trim()) : '';\n    let classifier = parsedText[4] ? parsedText[4].trim() : '';\n    let returnType = parsedText[5] ? ' : ' + parseGenericTypes(parsedText[5]).trim() : '';\n\n    displayText = visibility + methodName + '(' + parameters + ')' + returnType;\n    cssStyle = parseClassifier(classifier);\n  } catch (err) {\n    displayText = parsedText;\n  }\n\n  return {\n    displayText: displayText,\n    cssStyle: cssStyle,\n  };\n};\n\nconst buildLegacyDisplay = function (text) {\n  // if for some reason we don't have any match, use old format to parse text\n  let displayText = '';\n  let cssStyle = '';\n  let returnType = '';\n  let methodStart = text.indexOf('(');\n  let methodEnd = text.indexOf(')');\n\n  if (methodStart > 1 && methodEnd > methodStart && methodEnd <= text.length) {\n    let visibility = '';\n    let methodName = '';\n\n    let firstChar = text.substring(0, 1);\n    if (firstChar.match(/\\w/)) {\n      methodName = text.substring(0, methodStart).trim();\n    } else {\n      if (firstChar.match(/[#+~-]/)) {\n        visibility = firstChar;\n      }\n\n      methodName = text.substring(1, methodStart).trim();\n    }\n\n    const parameters = text.substring(methodStart + 1, methodEnd);\n    const classifier = text.substring(methodEnd + 1, 1);\n    cssStyle = parseClassifier(text.substring(methodEnd + 1, methodEnd + 2));\n\n    displayText = visibility + methodName + '(' + parseGenericTypes(parameters.trim()) + ')';\n\n    if (methodEnd < text.length) {\n      returnType = text.substring(methodEnd + 2).trim();\n      if (returnType !== '') {\n        returnType = ' : ' + parseGenericTypes(returnType);\n        displayText += returnType;\n      }\n    }\n  } else {\n    // finally - if all else fails, just send the text back as written (other than parsing for generic types)\n    displayText = parseGenericTypes(text);\n  }\n\n  return {\n    displayText,\n    cssStyle,\n  };\n};\n/**\n * Adds a <tspan> for a member in a diagram\n *\n * @param {SVGElement} textEl The element to append to\n * @param {string} txt The member\n * @param {boolean} isFirst\n * @param {{ padding: string; textHeight: string }} conf The configuration for the member\n */\nconst addTspan = function (textEl, txt, isFirst, conf) {\n  let member = parseMember(txt);\n\n  const tSpan = textEl.append('tspan').attr('x', conf.padding).text(member.displayText);\n\n  if (member.cssStyle !== '') {\n    tSpan.attr('style', member.cssStyle);\n  }\n\n  if (!isFirst) {\n    tSpan.attr('dy', conf.textHeight);\n  }\n};\n\n/**\n * Gives the styles for a classifier\n *\n * @param {'+' | '-' | '#' | '~' | '*' | '$'} classifier The classifier string\n * @returns {string} Styling for the classifier\n */\nconst parseClassifier = function (classifier) {\n  switch (classifier) {\n    case '*':\n      return 'font-style:italic;';\n    case '$':\n      return 'text-decoration:underline;';\n    default:\n      return '';\n  }\n};\n\nexport default {\n  drawClass,\n  drawEdge,\n  drawNote,\n  parseMember,\n};\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n"],"names":["$ac75047212f6ba5b$export$6118d022d940d562","$5Gmgp","p","db","f","renderer","$dOnoM","styles","a","init","cnf","flowchart","arrowMarkerAbsolute","$jmbVX","h","setConf","clear","setGen","$a0e2185c98e398ea$var$conf","$a0e2185c98e398ea$var$addVertices","vert","g","svgId","root","doc","diagObj","svg","select","Object","keys","forEach","id","vertex","classStr","classes","length","join","$3IUvT","n","vertexNode","vertexText","text","l","info","labelType","k","htmlLabels","node","label","replace","s","$ilMBJ","addHtmlLabel","parentNode","removeChild","svgLabel","createElementNS","setAttribute","labelStyle","rows","split","e","lineBreakRegex","row","tspan","setAttributeNS","textContent","appendChild","radious","_shape","type","setNode","shape","labelText","rx","ry","class","style","link","linkTarget","tooltip","getTooltip","domId","lookUpDomId","haveCallback","width","dir","props","padding","$a0e2185c98e398ea$var$addEdges","edges","defaultStyle","defaultLabelStyle","cnt","linkIdCnt","defaultStyles","edge","linkIdBase","start","end","linkId","linkNameStart","linkNameEnd","edgeData","minlen","arrowhead","arrowTypeStart","arrowTypeEnd","stroke","thickness","pattern","interpolate","curve","o","$2YFJl","curveLinear","defaultInterpolate","arrowheadStyle","labelpos","setEdge","$a0e2185c98e398ea$export$2d1720544b23b823","key","parse","getClasses","_version","parser","getDirection","securityLevel","conf","nodeSpacing","rankSpacing","sandboxElement","nodes","contentDocument","body","document","$4LkSm","Graph","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","subG","subGraphs","getSubGraphs","i","addVertex","title","getVertices","getEdges","selectAll","append","j","setParent","element","$evFAv","r","u","insertTitle","titleTopMargin","getDiagramTitle","diagramPadding","useMaxWidth","indexNodes","labels","querySelectorAll","dim","getBBox","rect","height","insertBefore","firstChild","linkNode","insert","$a0e2185c98e398ea$export$407448d2b89b1813","options","fontFamily","nodeTextColor","textColor","titleColor","mainBkg","nodeBorder","arrowheadColor","lineColor","edgeLabelBackground","clusterBkg","clusterBorder","tertiaryColor","border2","$adefb12e855c4667$var$edgeCount","$adefb12e855c4667$export$ffb5f4729a158638","fieldMatch","match","methodMatch","$adefb12e855c4667$var$buildFieldDisplay","$adefb12e855c4667$var$buildMethodDisplay","$adefb12e855c4667$var$buildLegacyDisplay","parsedText","cssStyle","displayText","visibility","trim","fieldType","genericType","z","fieldName","classifier","$adefb12e855c4667$var$parseClassifier","err","methodName","parameters","returnType","methodStart","indexOf","methodEnd","firstChar","substring","$adefb12e855c4667$var$addTspan","textEl","txt","isFirst","member","tSpan","attr","textHeight","$adefb12e855c4667$export$2408f22a0fab9ae5","elem","classDef","debug","classInfo","annotations","titleText2","classTitleString","classTitle","titleHeight","membersLine","dividerMargin","members","membersBox","methodsLine","methods","method","classBox","cssClassStr","cssClasses","rectWidth","childNodes","x","path","relation","getRelationType","relationType","AGGREGATION","EXTENSION","COMPOSITION","DEPENDENCY","LOLLIPOP","points","filter","Number","isNaN","y","lineData","lineFunction","line","d","curveBasis","svgPath","url","window","location","protocol","host","pathname","search","lineType","type1","type2","p1_card_x","p1_card_y","p2_card_x","p2_card_y","labelPosition","calcLabelPosition","cardinality_1_point","calcCardinalityPosition","cardinality_2_point","JSON","stringify","bounds","relationTitle1","relationTitle2","note","noteInfo","lines","noteBox","$86d5c19d81d423c4$export$2e2bcd8739ae039","parcelRequire","default","getPrototypeOf","$hArsG","$281ac82f5f5844b1$var$funcProto","Function","prototype","$281ac82f5f5844b1$var$objectProto","$281ac82f5f5844b1$var$funcToString","toString","$281ac82f5f5844b1$var$hasOwnProperty","hasOwnProperty","$281ac82f5f5844b1$var$objectCtorString","call","$281ac82f5f5844b1$export$2e2bcd8739ae039","value","$f2iog","proto","$bzIQZ","Ctor","constructor"],"version":3,"file":"flowDiagram-v2-8e52592d.4954f8a3.js.map"}