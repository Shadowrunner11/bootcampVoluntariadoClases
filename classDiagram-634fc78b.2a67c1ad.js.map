{"mappings":"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","sources":["node_modules/mermaid/src/diagrams/class/classRenderer.js","node_modules/mermaid/src/diagrams/class/classDiagram.ts","node_modules/mermaid/src/diagrams/class/svgDraw.js","node_modules/lodash-es/_getPrototype.js","node_modules/lodash-es/isPlainObject.js"],"sourcesContent":["import { select } from 'd3';\nimport { layout as dagreLayout } from 'dagre-d3-es/src/dagre/index.js';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport svgDraw from './svgDraw';\nimport { configureSvgSize } from '../../setupGraphViewbox';\nimport { getConfig } from '../../config';\n\nlet idCache = {};\nconst padding = 20;\n\n/**\n * Gets the ID with the same label as in the cache\n *\n * @param {string} label The label to look for\n * @returns {string} The resulting ID\n */\nconst getGraphId = function (label) {\n  const foundEntry = Object.entries(idCache).find((entry) => entry[1].label === label);\n\n  if (foundEntry) {\n    return foundEntry[0];\n  }\n};\n\n/**\n * Setup arrow head and define the marker. The result is appended to the svg.\n *\n * @param {SVGSVGElement} elem The SVG element to append to\n */\nconst insertMarkers = function (elem) {\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'extensionStart')\n    .attr('class', 'extension')\n    .attr('refX', 0)\n    .attr('refY', 7)\n    .attr('markerWidth', 190)\n    .attr('markerHeight', 240)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 1,7 L18,13 V 1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'extensionEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 1,1 V 13 L18,7 Z'); // this is actual shape for arrowhead\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'compositionStart')\n    .attr('class', 'extension')\n    .attr('refX', 0)\n    .attr('refY', 7)\n    .attr('markerWidth', 190)\n    .attr('markerHeight', 240)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'compositionEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'aggregationStart')\n    .attr('class', 'extension')\n    .attr('refX', 0)\n    .attr('refY', 7)\n    .attr('markerWidth', 190)\n    .attr('markerHeight', 240)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'aggregationEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'dependencyStart')\n    .attr('class', 'extension')\n    .attr('refX', 0)\n    .attr('refY', 7)\n    .attr('markerWidth', 190)\n    .attr('markerHeight', 240)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 5,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'dependencyEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L14,7 L9,1 Z');\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param {string} text\n * @param {string} id\n * @param {any} _version\n * @param diagObj\n */\nexport const draw = function (text, id, _version, diagObj) {\n  const conf = getConfig().class;\n  idCache = {};\n  // diagObj.db.clear();\n  // diagObj.parser.parse(text);\n\n  log.info('Rendering diagram ' + text);\n\n  const securityLevel = getConfig().securityLevel;\n  // Handle root and Document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n\n  // Fetch the default direction, use TD if none was found\n  const diagram = root.select(`[id='${id}']`);\n  insertMarkers(diagram);\n\n  // Layout graph, Create a new directed graph\n  const g = new graphlib.Graph({\n    multigraph: true,\n  });\n\n  // Set an object for the graph label\n  g.setGraph({\n    isMultiGraph: true,\n  });\n\n  // Default to assigning a new object as a label for each new edge.\n  g.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  const classes = diagObj.db.getClasses();\n  const keys = Object.keys(classes);\n\n  for (const key of keys) {\n    const classDef = classes[key];\n    const node = svgDraw.drawClass(diagram, classDef, conf, diagObj);\n    idCache[node.id] = node;\n\n    // Add nodes to the graph. The first argument is the node id. The second is\n    // metadata about the node. In this case we're going to add labels to each of\n    // our nodes.\n    g.setNode(node.id, node);\n\n    log.info('Org height: ' + node.height);\n  }\n\n  const relations = diagObj.db.getRelations();\n  relations.forEach(function (relation) {\n    log.info(\n      'tjoho' + getGraphId(relation.id1) + getGraphId(relation.id2) + JSON.stringify(relation)\n    );\n    g.setEdge(\n      getGraphId(relation.id1),\n      getGraphId(relation.id2),\n      {\n        relation: relation,\n      },\n      relation.title || 'DEFAULT'\n    );\n  });\n\n  const notes = diagObj.db.getNotes();\n  notes.forEach(function (note) {\n    log.debug(`Adding note: ${JSON.stringify(note)}`);\n    const node = svgDraw.drawNote(diagram, note, conf, diagObj);\n    idCache[node.id] = node;\n\n    // Add nodes to the graph. The first argument is the node id. The second is\n    // metadata about the node. In this case we're going to add labels to each of\n    // our nodes.\n    g.setNode(node.id, node);\n    if (note.class && note.class in classes) {\n      g.setEdge(\n        note.id,\n        getGraphId(note.class),\n        {\n          relation: {\n            id1: note.id,\n            id2: note.class,\n            relation: {\n              type1: 'none',\n              type2: 'none',\n              lineType: 10,\n            },\n          },\n        },\n        'DEFAULT'\n      );\n    }\n  });\n\n  dagreLayout(g);\n  g.nodes().forEach(function (v) {\n    if (v !== undefined && g.node(v) !== undefined) {\n      log.debug('Node ' + v + ': ' + JSON.stringify(g.node(v)));\n      root\n        .select('#' + (diagObj.db.lookUpDomId(v) || v))\n        .attr(\n          'transform',\n          'translate(' +\n            (g.node(v).x - g.node(v).width / 2) +\n            ',' +\n            (g.node(v).y - g.node(v).height / 2) +\n            ' )'\n        );\n    }\n  });\n\n  g.edges().forEach(function (e) {\n    if (e !== undefined && g.edge(e) !== undefined) {\n      log.debug('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(g.edge(e)));\n      svgDraw.drawEdge(diagram, g.edge(e), g.edge(e).relation, conf, diagObj);\n    }\n  });\n\n  const svgBounds = diagram.node().getBBox();\n  const width = svgBounds.width + padding * 2;\n  const height = svgBounds.height + padding * 2;\n\n  configureSvgSize(diagram, height, width, conf.useMaxWidth);\n\n  // Ensure the viewBox includes the whole svgBounds area with extra space for padding\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  diagram.attr('viewBox', vBox);\n};\n\nexport default {\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/classDiagram';\nimport db from './classDb';\nimport styles from './styles';\nimport renderer from './classRenderer';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n","import { line, curveBasis } from 'd3';\nimport utils from '../../utils';\nimport { log } from '../../logger';\nimport { parseGenericTypes } from '../common/common';\n\nlet edgeCount = 0;\nexport const drawEdge = function (elem, path, relation, conf, diagObj) {\n  const getRelationType = function (type) {\n    switch (type) {\n      case diagObj.db.relationType.AGGREGATION:\n        return 'aggregation';\n      case diagObj.db.relationType.EXTENSION:\n        return 'extension';\n      case diagObj.db.relationType.COMPOSITION:\n        return 'composition';\n      case diagObj.db.relationType.DEPENDENCY:\n        return 'dependency';\n      case diagObj.db.relationType.LOLLIPOP:\n        return 'lollipop';\n    }\n  };\n\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n\n  // The data for our line\n  const lineData = path.points;\n\n  // This is the accessor function we talked about above\n  const lineFunction = line()\n    .x(function (d) {\n      return d.x;\n    })\n    .y(function (d) {\n      return d.y;\n    })\n    .curve(curveBasis);\n\n  const svgPath = elem\n    .append('path')\n    .attr('d', lineFunction(lineData))\n    .attr('id', 'edge' + edgeCount)\n    .attr('class', 'relation');\n  let url = '';\n  if (conf.arrowMarkerAbsolute) {\n    url =\n      window.location.protocol +\n      '//' +\n      window.location.host +\n      window.location.pathname +\n      window.location.search;\n    url = url.replace(/\\(/g, '\\\\(');\n    url = url.replace(/\\)/g, '\\\\)');\n  }\n\n  if (relation.relation.lineType == 1) {\n    svgPath.attr('class', 'relation dashed-line');\n  }\n  if (relation.relation.lineType == 10) {\n    svgPath.attr('class', 'relation dotted-line');\n  }\n  if (relation.relation.type1 !== 'none') {\n    svgPath.attr(\n      'marker-start',\n      'url(' + url + '#' + getRelationType(relation.relation.type1) + 'Start' + ')'\n    );\n  }\n  if (relation.relation.type2 !== 'none') {\n    svgPath.attr(\n      'marker-end',\n      'url(' + url + '#' + getRelationType(relation.relation.type2) + 'End' + ')'\n    );\n  }\n\n  let x, y;\n  const l = path.points.length;\n  // Calculate Label position\n  let labelPosition = utils.calcLabelPosition(path.points);\n  x = labelPosition.x;\n  y = labelPosition.y;\n\n  let p1_card_x, p1_card_y;\n  let p2_card_x, p2_card_y;\n\n  if (l % 2 !== 0 && l > 1) {\n    let cardinality_1_point = utils.calcCardinalityPosition(\n      relation.relation.type1 !== 'none',\n      path.points,\n      path.points[0]\n    );\n    let cardinality_2_point = utils.calcCardinalityPosition(\n      relation.relation.type2 !== 'none',\n      path.points,\n      path.points[l - 1]\n    );\n\n    log.debug('cardinality_1_point ' + JSON.stringify(cardinality_1_point));\n    log.debug('cardinality_2_point ' + JSON.stringify(cardinality_2_point));\n\n    p1_card_x = cardinality_1_point.x;\n    p1_card_y = cardinality_1_point.y;\n    p2_card_x = cardinality_2_point.x;\n    p2_card_y = cardinality_2_point.y;\n  }\n\n  if (relation.title !== undefined) {\n    const g = elem.append('g').attr('class', 'classLabel');\n    const label = g\n      .append('text')\n      .attr('class', 'label')\n      .attr('x', x)\n      .attr('y', y)\n      .attr('fill', 'red')\n      .attr('text-anchor', 'middle')\n      .text(relation.title);\n\n    window.label = label;\n    const bounds = label.node().getBBox();\n\n    g.insert('rect', ':first-child')\n      .attr('class', 'box')\n      .attr('x', bounds.x - conf.padding / 2)\n      .attr('y', bounds.y - conf.padding / 2)\n      .attr('width', bounds.width + conf.padding)\n      .attr('height', bounds.height + conf.padding);\n  }\n\n  log.info('Rendering relation ' + JSON.stringify(relation));\n  if (relation.relationTitle1 !== undefined && relation.relationTitle1 !== 'none') {\n    const g = elem.append('g').attr('class', 'cardinality');\n    g.append('text')\n      .attr('class', 'type1')\n      .attr('x', p1_card_x)\n      .attr('y', p1_card_y)\n      .attr('fill', 'black')\n      .attr('font-size', '6')\n      .text(relation.relationTitle1);\n  }\n  if (relation.relationTitle2 !== undefined && relation.relationTitle2 !== 'none') {\n    const g = elem.append('g').attr('class', 'cardinality');\n    g.append('text')\n      .attr('class', 'type2')\n      .attr('x', p2_card_x)\n      .attr('y', p2_card_y)\n      .attr('fill', 'black')\n      .attr('font-size', '6')\n      .text(relation.relationTitle2);\n  }\n\n  edgeCount++;\n};\n\n/**\n * Renders a class diagram\n *\n * @param {SVGSVGElement} elem The element to draw it into\n * @param classDef\n * @param conf\n * @param diagObj\n * @todo Add more information in the JSDOC here\n */\nexport const drawClass = function (elem, classDef, conf, diagObj) {\n  log.debug('Rendering class ', classDef, conf);\n\n  const id = classDef.id;\n  const classInfo = {\n    id: id,\n    label: classDef.id,\n    width: 0,\n    height: 0,\n  };\n\n  // add class group\n  const g = elem.append('g').attr('id', diagObj.db.lookUpDomId(id)).attr('class', 'classGroup');\n\n  // add title\n  let title;\n  if (classDef.link) {\n    title = g\n      .append('svg:a')\n      .attr('xlink:href', classDef.link)\n      .attr('target', classDef.linkTarget)\n      .append('text')\n      .attr('y', conf.textHeight + conf.padding)\n      .attr('x', 0);\n  } else {\n    title = g\n      .append('text')\n      .attr('y', conf.textHeight + conf.padding)\n      .attr('x', 0);\n  }\n\n  // add annotations\n  let isFirst = true;\n  classDef.annotations.forEach(function (member) {\n    const titleText2 = title.append('tspan').text('«' + member + '»');\n    if (!isFirst) {\n      titleText2.attr('dy', conf.textHeight);\n    }\n    isFirst = false;\n  });\n\n  let classTitleString = classDef.id;\n\n  if (classDef.type !== undefined && classDef.type !== '') {\n    classTitleString += '<' + classDef.type + '>';\n  }\n\n  const classTitle = title.append('tspan').text(classTitleString).attr('class', 'title');\n\n  // If class has annotations the title needs to have an offset of the text height\n  if (!isFirst) {\n    classTitle.attr('dy', conf.textHeight);\n  }\n\n  const titleHeight = title.node().getBBox().height;\n\n  const membersLine = g\n    .append('line') // text label for the x axis\n    .attr('x1', 0)\n    .attr('y1', conf.padding + titleHeight + conf.dividerMargin / 2)\n    .attr('y2', conf.padding + titleHeight + conf.dividerMargin / 2);\n\n  const members = g\n    .append('text') // text label for the x axis\n    .attr('x', conf.padding)\n    .attr('y', titleHeight + conf.dividerMargin + conf.textHeight)\n    .attr('fill', 'white')\n    .attr('class', 'classText');\n\n  isFirst = true;\n  classDef.members.forEach(function (member) {\n    addTspan(members, member, isFirst, conf);\n    isFirst = false;\n  });\n\n  const membersBox = members.node().getBBox();\n\n  const methodsLine = g\n    .append('line') // text label for the x axis\n    .attr('x1', 0)\n    .attr('y1', conf.padding + titleHeight + conf.dividerMargin + membersBox.height)\n    .attr('y2', conf.padding + titleHeight + conf.dividerMargin + membersBox.height);\n\n  const methods = g\n    .append('text') // text label for the x axis\n    .attr('x', conf.padding)\n    .attr('y', titleHeight + 2 * conf.dividerMargin + membersBox.height + conf.textHeight)\n    .attr('fill', 'white')\n    .attr('class', 'classText');\n\n  isFirst = true;\n\n  classDef.methods.forEach(function (method) {\n    addTspan(methods, method, isFirst, conf);\n    isFirst = false;\n  });\n\n  const classBox = g.node().getBBox();\n  var cssClassStr = ' ';\n\n  if (classDef.cssClasses.length > 0) {\n    cssClassStr = cssClassStr + classDef.cssClasses.join(' ');\n  }\n\n  const rect = g\n    .insert('rect', ':first-child')\n    .attr('x', 0)\n    .attr('y', 0)\n    .attr('width', classBox.width + 2 * conf.padding)\n    .attr('height', classBox.height + conf.padding + 0.5 * conf.dividerMargin)\n    .attr('class', cssClassStr);\n\n  const rectWidth = rect.node().getBBox().width;\n\n  // Center title\n  // We subtract the width of each text element from the class box width and divide it by 2\n  title.node().childNodes.forEach(function (x) {\n    x.setAttribute('x', (rectWidth - x.getBBox().width) / 2);\n  });\n\n  if (classDef.tooltip) {\n    title.insert('title').text(classDef.tooltip);\n  }\n\n  membersLine.attr('x2', rectWidth);\n  methodsLine.attr('x2', rectWidth);\n\n  classInfo.width = rectWidth;\n  classInfo.height = classBox.height + conf.padding + 0.5 * conf.dividerMargin;\n\n  return classInfo;\n};\n\n/**\n * Renders a note diagram\n *\n * @param {SVGSVGElement} elem The element to draw it into\n * @param {{id: string; text: string; class: string;}} note\n * @param conf\n * @param diagObj\n * @todo Add more information in the JSDOC here\n */\nexport const drawNote = function (elem, note, conf, diagObj) {\n  log.debug('Rendering note ', note, conf);\n\n  const id = note.id;\n  const noteInfo = {\n    id: id,\n    text: note.text,\n    width: 0,\n    height: 0,\n  };\n\n  // add class group\n  const g = elem.append('g').attr('id', id).attr('class', 'classGroup');\n\n  // add text\n  let text = g\n    .append('text')\n    .attr('y', conf.textHeight + conf.padding)\n    .attr('x', 0);\n\n  const lines = JSON.parse(`\"${note.text}\"`).split('\\n');\n\n  lines.forEach(function (line) {\n    log.debug(`Adding line: ${line}`);\n    text.append('tspan').text(line).attr('class', 'title').attr('dy', conf.textHeight);\n  });\n\n  const noteBox = g.node().getBBox();\n\n  const rect = g\n    .insert('rect', ':first-child')\n    .attr('x', 0)\n    .attr('y', 0)\n    .attr('width', noteBox.width + 2 * conf.padding)\n    .attr(\n      'height',\n      noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin\n    );\n\n  const rectWidth = rect.node().getBBox().width;\n\n  // Center title\n  // We subtract the width of each text element from the class box width and divide it by 2\n  text.node().childNodes.forEach(function (x) {\n    x.setAttribute('x', (rectWidth - x.getBBox().width) / 2);\n  });\n\n  noteInfo.width = rectWidth;\n  noteInfo.height =\n    noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin;\n\n  return noteInfo;\n};\n\nexport const parseMember = function (text) {\n  const fieldRegEx = /^([#+~-])?(\\w+)(~\\w+~|\\[])?\\s+(\\w+) *([$*])?$/;\n  const methodRegEx = /^([#+|~-])?(\\w+) *\\( *(.*)\\) *([$*])? *(\\w*[[\\]|~]*\\s*\\w*~?)$/;\n\n  let fieldMatch = text.match(fieldRegEx);\n  let methodMatch = text.match(methodRegEx);\n\n  if (fieldMatch && !methodMatch) {\n    return buildFieldDisplay(fieldMatch);\n  } else if (methodMatch) {\n    return buildMethodDisplay(methodMatch);\n  } else {\n    return buildLegacyDisplay(text);\n  }\n};\n\nconst buildFieldDisplay = function (parsedText) {\n  let cssStyle = '';\n  let displayText = '';\n\n  try {\n    let visibility = parsedText[1] ? parsedText[1].trim() : '';\n    let fieldType = parsedText[2] ? parsedText[2].trim() : '';\n    let genericType = parsedText[3] ? parseGenericTypes(parsedText[3].trim()) : '';\n    let fieldName = parsedText[4] ? parsedText[4].trim() : '';\n    let classifier = parsedText[5] ? parsedText[5].trim() : '';\n\n    displayText = visibility + fieldType + genericType + ' ' + fieldName;\n    cssStyle = parseClassifier(classifier);\n  } catch (err) {\n    displayText = parsedText;\n  }\n\n  return {\n    displayText: displayText,\n    cssStyle: cssStyle,\n  };\n};\n\nconst buildMethodDisplay = function (parsedText) {\n  let cssStyle = '';\n  let displayText = '';\n\n  try {\n    let visibility = parsedText[1] ? parsedText[1].trim() : '';\n    let methodName = parsedText[2] ? parsedText[2].trim() : '';\n    let parameters = parsedText[3] ? parseGenericTypes(parsedText[3].trim()) : '';\n    let classifier = parsedText[4] ? parsedText[4].trim() : '';\n    let returnType = parsedText[5] ? ' : ' + parseGenericTypes(parsedText[5]).trim() : '';\n\n    displayText = visibility + methodName + '(' + parameters + ')' + returnType;\n    cssStyle = parseClassifier(classifier);\n  } catch (err) {\n    displayText = parsedText;\n  }\n\n  return {\n    displayText: displayText,\n    cssStyle: cssStyle,\n  };\n};\n\nconst buildLegacyDisplay = function (text) {\n  // if for some reason we don't have any match, use old format to parse text\n  let displayText = '';\n  let cssStyle = '';\n  let returnType = '';\n  let methodStart = text.indexOf('(');\n  let methodEnd = text.indexOf(')');\n\n  if (methodStart > 1 && methodEnd > methodStart && methodEnd <= text.length) {\n    let visibility = '';\n    let methodName = '';\n\n    let firstChar = text.substring(0, 1);\n    if (firstChar.match(/\\w/)) {\n      methodName = text.substring(0, methodStart).trim();\n    } else {\n      if (firstChar.match(/[#+~-]/)) {\n        visibility = firstChar;\n      }\n\n      methodName = text.substring(1, methodStart).trim();\n    }\n\n    const parameters = text.substring(methodStart + 1, methodEnd);\n    const classifier = text.substring(methodEnd + 1, 1);\n    cssStyle = parseClassifier(text.substring(methodEnd + 1, methodEnd + 2));\n\n    displayText = visibility + methodName + '(' + parseGenericTypes(parameters.trim()) + ')';\n\n    if (methodEnd < text.length) {\n      returnType = text.substring(methodEnd + 2).trim();\n      if (returnType !== '') {\n        returnType = ' : ' + parseGenericTypes(returnType);\n        displayText += returnType;\n      }\n    }\n  } else {\n    // finally - if all else fails, just send the text back as written (other than parsing for generic types)\n    displayText = parseGenericTypes(text);\n  }\n\n  return {\n    displayText,\n    cssStyle,\n  };\n};\n/**\n * Adds a <tspan> for a member in a diagram\n *\n * @param {SVGElement} textEl The element to append to\n * @param {string} txt The member\n * @param {boolean} isFirst\n * @param {{ padding: string; textHeight: string }} conf The configuration for the member\n */\nconst addTspan = function (textEl, txt, isFirst, conf) {\n  let member = parseMember(txt);\n\n  const tSpan = textEl.append('tspan').attr('x', conf.padding).text(member.displayText);\n\n  if (member.cssStyle !== '') {\n    tSpan.attr('style', member.cssStyle);\n  }\n\n  if (!isFirst) {\n    tSpan.attr('dy', conf.textHeight);\n  }\n};\n\n/**\n * Gives the styles for a classifier\n *\n * @param {'+' | '-' | '#' | '~' | '*' | '$'} classifier The classifier string\n * @returns {string} Styling for the classifier\n */\nconst parseClassifier = function (classifier) {\n  switch (classifier) {\n    case '*':\n      return 'font-style:italic;';\n    case '$':\n      return 'text-decoration:underline;';\n    default:\n      return '';\n  }\n};\n\nexport default {\n  drawClass,\n  drawEdge,\n  drawNote,\n  parseMember,\n};\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n"],"names":["$c935eef3212dc734$var$idCache","$c935eef3212dc734$var$getGraphId","label","foundEntry","Object","entries","find","entry","$c935eef3212dc734$var$renderer","text","id","_version","diagObj","conf","$jmbVX","g","class","l","info","securityLevel","sandboxElement","$2YFJl","select","root","nodes","contentDocument","body","diagram","elem","append","attr","$4LkSm","Graph","multigraph","setGraph","isMultiGraph","setDefaultEdgeLabel","classes","db","getClasses","keys","key","classDef","node","$eVRfl","s","drawClass","setNode","height","getRelations","forEach","relation","id1","id2","JSON","stringify","setEdge","title","getNotes","note","debug","drawNote","type1","type2","lineType","dagreLayout","v","lookUpDomId","x","width","y","edges","e","edge","w","drawEdge","svgBounds","getBBox","$c935eef3212dc734$var$padding","$3IUvT","k","useMaxWidth","vBox","$c935eef3212dc734$export$6118d022d940d562","$1BFN5","p","d","init","cnf","arrowMarkerAbsolute","clear","$adefb12e855c4667$var$edgeCount","$adefb12e855c4667$export$ffb5f4729a158638","fieldMatch","match","methodMatch","$adefb12e855c4667$var$buildFieldDisplay","$adefb12e855c4667$var$buildMethodDisplay","$adefb12e855c4667$var$buildLegacyDisplay","parsedText","cssStyle","displayText","visibility","trim","fieldType","genericType","z","fieldName","classifier","$adefb12e855c4667$var$parseClassifier","err","methodName","parameters","returnType","methodStart","indexOf","methodEnd","length","firstChar","substring","$adefb12e855c4667$var$addTspan","textEl","txt","isFirst","member","tSpan","padding","textHeight","$adefb12e855c4667$export$2408f22a0fab9ae5","classInfo","link","linkTarget","annotations","titleText2","classTitleString","type","classTitle","titleHeight","membersLine","dividerMargin","members","membersBox","methodsLine","methods","method","classBox","cssClassStr","cssClasses","join","rectWidth","insert","childNodes","setAttribute","tooltip","path","getRelationType","relationType","AGGREGATION","EXTENSION","COMPOSITION","DEPENDENCY","LOLLIPOP","points","filter","Number","isNaN","lineData","lineFunction","line","curve","curveBasis","svgPath","url","window","location","protocol","host","pathname","search","replace","p1_card_x","p1_card_y","p2_card_x","p2_card_y","labelPosition","u","calcLabelPosition","cardinality_1_point","calcCardinalityPosition","cardinality_2_point","bounds","relationTitle1","relationTitle2","noteInfo","lines","parse","split","noteBox","$86d5c19d81d423c4$export$2e2bcd8739ae039","parcelRequire","default","getPrototypeOf","$hArsG","$281ac82f5f5844b1$var$funcProto","Function","prototype","$281ac82f5f5844b1$var$objectProto","$281ac82f5f5844b1$var$funcToString","toString","$281ac82f5f5844b1$var$hasOwnProperty","hasOwnProperty","$281ac82f5f5844b1$var$objectCtorString","call","$281ac82f5f5844b1$export$2e2bcd8739ae039","value","$f2iog","proto","$bzIQZ","Ctor","constructor"],"version":3,"file":"classDiagram-634fc78b.2a67c1ad.js.map"}