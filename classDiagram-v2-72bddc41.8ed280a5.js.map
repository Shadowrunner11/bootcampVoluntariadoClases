{"mappings":"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","sources":["node_modules/mermaid/src/diagrams/class/classRenderer-v2.ts","node_modules/mermaid/src/diagrams/class/classDiagram-v2.ts","node_modules/mermaid/src/diagrams/class/svgDraw.js","node_modules/lodash-es/_getPrototype.js","node_modules/lodash-es/isPlainObject.js"],"sourcesContent":["// @ts-ignore d3 types are not available\nimport { select, curveLinear } from 'd3';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport { getConfig } from '../../config';\nimport { render } from '../../dagre-wrapper/index.js';\nimport utils from '../../utils';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\nimport common from '../common/common';\nimport { ClassRelation, ClassNote, ClassMap, EdgeData } from './classTypes';\n\nconst sanitizeText = (txt: string) => common.sanitizeText(txt, getConfig());\n\nlet conf = {\n  dividerMargin: 10,\n  padding: 5,\n  textHeight: 10,\n  curve: undefined,\n};\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param classes - Object containing the vertices.\n * @param g - The graph that is to be drawn.\n * @param _id - id of the graph\n * @param diagObj - The diagram object\n */\nexport const addClasses = function (\n  classes: ClassMap,\n  g: graphlib.Graph,\n  _id: string,\n  diagObj: any\n) {\n  const keys = Object.keys(classes);\n  log.info('keys:', keys);\n  log.info(classes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  keys.forEach(function (id) {\n    const vertex = classes[id];\n\n    /**\n     * Variable for storing the classes for the vertex\n     */\n    let cssClassStr = '';\n    if (vertex.cssClasses.length > 0) {\n      cssClassStr = cssClassStr + ' ' + vertex.cssClasses.join(' ');\n    }\n\n    const styles = { labelStyle: '', style: '' }; //getStylesFromArray(vertex.styles);\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    const vertexText = vertex.label ?? vertex.id;\n    const radius = 0;\n    const shape = 'class_box';\n    // Add the node\n    const node = {\n      labelStyle: styles.labelStyle,\n      shape: shape,\n      labelText: sanitizeText(vertexText),\n      classData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssClassStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.domId,\n      tooltip: diagObj.db.getTooltip(vertex.id) || '',\n      haveCallback: vertex.haveCallback,\n      link: vertex.link,\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n    g.setNode(vertex.id, node);\n    log.info('setNode', node);\n  });\n};\n\n/**\n * Function that adds the additional vertices (notes) found during parsing to the graph to be rendered.\n *\n * @param notes - Object containing the additional vertices (notes).\n * @param g - The graph that is to be drawn.\n * @param startEdgeId - starting index for note edge\n * @param classes - Classes\n */\nexport const addNotes = function (\n  notes: ClassNote[],\n  g: graphlib.Graph,\n  startEdgeId: number,\n  classes: ClassMap\n) {\n  log.info(notes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  notes.forEach(function (note, i) {\n    const vertex = note;\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     */\n    const cssNoteStr = '';\n\n    const styles = { labelStyle: '', style: '' };\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    const vertexText = vertex.text;\n\n    const radius = 0;\n    const shape = 'note';\n    // Add the node\n    const node = {\n      labelStyle: styles.labelStyle,\n      shape: shape,\n      labelText: sanitizeText(vertexText),\n      noteData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssNoteStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.id,\n      tooltip: '',\n      type: 'note',\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n    g.setNode(vertex.id, node);\n    log.info('setNode', node);\n\n    if (!vertex.class || !(vertex.class in classes)) {\n      return;\n    }\n    const edgeId = startEdgeId + i;\n\n    const edgeData: EdgeData = {\n      id: `edgeNote${edgeId}`,\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: 'dotted',\n      // Set link type for rendering\n      arrowhead: 'none',\n      //Set edge extra labels\n      startLabelRight: '',\n      endLabelLeft: '',\n      //Set relation arrow types\n      arrowTypeStart: 'none',\n      arrowTypeEnd: 'none',\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf.curve, curveLinear),\n    };\n\n    // Add the edge to the graph\n    g.setEdge(vertex.id, vertex.class, edgeData, edgeId);\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param relations -\n * @param g - The graph object\n */\nexport const addRelations = function (relations: ClassRelation[], g: graphlib.Graph) {\n  const conf = getConfig().flowchart;\n  let cnt = 0;\n\n  relations.forEach(function (edge) {\n    cnt++;\n    const edgeData: EdgeData = {\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: edge.relation.lineType == 1 ? 'dashed' : 'solid',\n      id: 'id' + cnt,\n      // Set link type for rendering\n      arrowhead: edge.type === 'arrow_open' ? 'none' : 'normal',\n      //Set edge extra labels\n      startLabelRight: edge.relationTitle1 === 'none' ? '' : edge.relationTitle1,\n      endLabelLeft: edge.relationTitle2 === 'none' ? '' : edge.relationTitle2,\n      //Set relation arrow types\n      arrowTypeStart: getArrowMarker(edge.relation.type1),\n      arrowTypeEnd: getArrowMarker(edge.relation.type2),\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf?.curve, curveLinear),\n    };\n\n    log.info(edgeData, edge);\n\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      edgeData.style = styles.style;\n      edgeData.labelStyle = styles.labelStyle;\n    }\n\n    edge.text = edge.title;\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      if (getConfig().flowchart?.htmlLabels ?? getConfig().htmlLabels) {\n        edgeData.labelType = 'html';\n        edgeData.label = '<span class=\"edgeLabel\">' + edge.text + '</span>';\n      } else {\n        edgeData.labelType = 'text';\n        edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n        if (edge.style === undefined) {\n          edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none';\n        }\n\n        edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n      }\n    }\n    // Add the edge to the graph\n    g.setEdge(edge.id1, edge.id2, edgeData, cnt);\n  });\n};\n\n/**\n * Merges the value of `conf` with the passed `cnf`\n *\n * @param cnf - Config to merge\n */\nexport const setConf = function (cnf: any) {\n  conf = {\n    ...conf,\n    ...cnf,\n  };\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param text -\n * @param id -\n * @param _version -\n * @param diagObj -\n */\nexport const draw = function (text: string, id: string, _version: string, diagObj: any) {\n  log.info('Drawing class - ', id);\n\n  // TODO V10: Why flowchart? Might be a mistake when copying.\n  const conf = getConfig().flowchart ?? getConfig().class;\n  const securityLevel = getConfig().securityLevel;\n  log.info('config:', conf);\n  const nodeSpacing = conf?.nodeSpacing ?? 50;\n  const rankSpacing = conf?.rankSpacing ?? 50;\n\n  // Create the input mermaid.graph\n  const g: graphlib.Graph = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: diagObj.db.getDirection(),\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 8,\n      marginy: 8,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const classes: ClassMap = diagObj.db.getClasses();\n  const relations: ClassRelation[] = diagObj.db.getRelations();\n  const notes: ClassNote[] = diagObj.db.getNotes();\n  log.info(relations);\n  addClasses(classes, g, id, diagObj);\n  addRelations(relations, g);\n  addNotes(notes, g, relations.length + 1, classes);\n\n  // Set up an SVG group so that we can translate the final graph.\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? // @ts-ignore Ignore type error for now\n\n        select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  // @ts-ignore Ignore type error for now\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  // @ts-ignore Ignore type error for now\n  const element = root.select('#' + id + ' g');\n  render(\n    element,\n    g,\n    ['aggregation', 'extension', 'composition', 'dependency', 'lollipop'],\n    'classDiagram',\n    id\n  );\n\n  utils.insertTitle(svg, 'classTitleText', conf?.titleTopMargin ?? 5, diagObj.db.getDiagramTitle());\n\n  setupGraphViewbox(g, svg, conf?.diagramPadding, conf?.useMaxWidth);\n\n  // Add label rects for non html labels\n  if (!conf?.htmlLabels) {\n    // @ts-ignore Ignore type error for now\n    const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n};\n\n/**\n * Gets the arrow marker for a type index\n *\n * @param type - The type to look for\n * @returns The arrow marker\n */\nfunction getArrowMarker(type: number) {\n  let marker;\n  switch (type) {\n    case 0:\n      marker = 'aggregation';\n      break;\n    case 1:\n      marker = 'extension';\n      break;\n    case 2:\n      marker = 'composition';\n      break;\n    case 3:\n      marker = 'dependency';\n      break;\n    case 4:\n      marker = 'lollipop';\n      break;\n    default:\n      marker = 'none';\n  }\n  return marker;\n}\n\nexport default {\n  setConf,\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/classDiagram';\nimport db from './classDb';\nimport styles from './styles';\nimport renderer from './classRenderer-v2';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n","import { line, curveBasis } from 'd3';\nimport utils from '../../utils';\nimport { log } from '../../logger';\nimport { parseGenericTypes } from '../common/common';\n\nlet edgeCount = 0;\nexport const drawEdge = function (elem, path, relation, conf, diagObj) {\n  const getRelationType = function (type) {\n    switch (type) {\n      case diagObj.db.relationType.AGGREGATION:\n        return 'aggregation';\n      case diagObj.db.relationType.EXTENSION:\n        return 'extension';\n      case diagObj.db.relationType.COMPOSITION:\n        return 'composition';\n      case diagObj.db.relationType.DEPENDENCY:\n        return 'dependency';\n      case diagObj.db.relationType.LOLLIPOP:\n        return 'lollipop';\n    }\n  };\n\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n\n  // The data for our line\n  const lineData = path.points;\n\n  // This is the accessor function we talked about above\n  const lineFunction = line()\n    .x(function (d) {\n      return d.x;\n    })\n    .y(function (d) {\n      return d.y;\n    })\n    .curve(curveBasis);\n\n  const svgPath = elem\n    .append('path')\n    .attr('d', lineFunction(lineData))\n    .attr('id', 'edge' + edgeCount)\n    .attr('class', 'relation');\n  let url = '';\n  if (conf.arrowMarkerAbsolute) {\n    url =\n      window.location.protocol +\n      '//' +\n      window.location.host +\n      window.location.pathname +\n      window.location.search;\n    url = url.replace(/\\(/g, '\\\\(');\n    url = url.replace(/\\)/g, '\\\\)');\n  }\n\n  if (relation.relation.lineType == 1) {\n    svgPath.attr('class', 'relation dashed-line');\n  }\n  if (relation.relation.lineType == 10) {\n    svgPath.attr('class', 'relation dotted-line');\n  }\n  if (relation.relation.type1 !== 'none') {\n    svgPath.attr(\n      'marker-start',\n      'url(' + url + '#' + getRelationType(relation.relation.type1) + 'Start' + ')'\n    );\n  }\n  if (relation.relation.type2 !== 'none') {\n    svgPath.attr(\n      'marker-end',\n      'url(' + url + '#' + getRelationType(relation.relation.type2) + 'End' + ')'\n    );\n  }\n\n  let x, y;\n  const l = path.points.length;\n  // Calculate Label position\n  let labelPosition = utils.calcLabelPosition(path.points);\n  x = labelPosition.x;\n  y = labelPosition.y;\n\n  let p1_card_x, p1_card_y;\n  let p2_card_x, p2_card_y;\n\n  if (l % 2 !== 0 && l > 1) {\n    let cardinality_1_point = utils.calcCardinalityPosition(\n      relation.relation.type1 !== 'none',\n      path.points,\n      path.points[0]\n    );\n    let cardinality_2_point = utils.calcCardinalityPosition(\n      relation.relation.type2 !== 'none',\n      path.points,\n      path.points[l - 1]\n    );\n\n    log.debug('cardinality_1_point ' + JSON.stringify(cardinality_1_point));\n    log.debug('cardinality_2_point ' + JSON.stringify(cardinality_2_point));\n\n    p1_card_x = cardinality_1_point.x;\n    p1_card_y = cardinality_1_point.y;\n    p2_card_x = cardinality_2_point.x;\n    p2_card_y = cardinality_2_point.y;\n  }\n\n  if (relation.title !== undefined) {\n    const g = elem.append('g').attr('class', 'classLabel');\n    const label = g\n      .append('text')\n      .attr('class', 'label')\n      .attr('x', x)\n      .attr('y', y)\n      .attr('fill', 'red')\n      .attr('text-anchor', 'middle')\n      .text(relation.title);\n\n    window.label = label;\n    const bounds = label.node().getBBox();\n\n    g.insert('rect', ':first-child')\n      .attr('class', 'box')\n      .attr('x', bounds.x - conf.padding / 2)\n      .attr('y', bounds.y - conf.padding / 2)\n      .attr('width', bounds.width + conf.padding)\n      .attr('height', bounds.height + conf.padding);\n  }\n\n  log.info('Rendering relation ' + JSON.stringify(relation));\n  if (relation.relationTitle1 !== undefined && relation.relationTitle1 !== 'none') {\n    const g = elem.append('g').attr('class', 'cardinality');\n    g.append('text')\n      .attr('class', 'type1')\n      .attr('x', p1_card_x)\n      .attr('y', p1_card_y)\n      .attr('fill', 'black')\n      .attr('font-size', '6')\n      .text(relation.relationTitle1);\n  }\n  if (relation.relationTitle2 !== undefined && relation.relationTitle2 !== 'none') {\n    const g = elem.append('g').attr('class', 'cardinality');\n    g.append('text')\n      .attr('class', 'type2')\n      .attr('x', p2_card_x)\n      .attr('y', p2_card_y)\n      .attr('fill', 'black')\n      .attr('font-size', '6')\n      .text(relation.relationTitle2);\n  }\n\n  edgeCount++;\n};\n\n/**\n * Renders a class diagram\n *\n * @param {SVGSVGElement} elem The element to draw it into\n * @param classDef\n * @param conf\n * @param diagObj\n * @todo Add more information in the JSDOC here\n */\nexport const drawClass = function (elem, classDef, conf, diagObj) {\n  log.debug('Rendering class ', classDef, conf);\n\n  const id = classDef.id;\n  const classInfo = {\n    id: id,\n    label: classDef.id,\n    width: 0,\n    height: 0,\n  };\n\n  // add class group\n  const g = elem.append('g').attr('id', diagObj.db.lookUpDomId(id)).attr('class', 'classGroup');\n\n  // add title\n  let title;\n  if (classDef.link) {\n    title = g\n      .append('svg:a')\n      .attr('xlink:href', classDef.link)\n      .attr('target', classDef.linkTarget)\n      .append('text')\n      .attr('y', conf.textHeight + conf.padding)\n      .attr('x', 0);\n  } else {\n    title = g\n      .append('text')\n      .attr('y', conf.textHeight + conf.padding)\n      .attr('x', 0);\n  }\n\n  // add annotations\n  let isFirst = true;\n  classDef.annotations.forEach(function (member) {\n    const titleText2 = title.append('tspan').text('«' + member + '»');\n    if (!isFirst) {\n      titleText2.attr('dy', conf.textHeight);\n    }\n    isFirst = false;\n  });\n\n  let classTitleString = classDef.id;\n\n  if (classDef.type !== undefined && classDef.type !== '') {\n    classTitleString += '<' + classDef.type + '>';\n  }\n\n  const classTitle = title.append('tspan').text(classTitleString).attr('class', 'title');\n\n  // If class has annotations the title needs to have an offset of the text height\n  if (!isFirst) {\n    classTitle.attr('dy', conf.textHeight);\n  }\n\n  const titleHeight = title.node().getBBox().height;\n\n  const membersLine = g\n    .append('line') // text label for the x axis\n    .attr('x1', 0)\n    .attr('y1', conf.padding + titleHeight + conf.dividerMargin / 2)\n    .attr('y2', conf.padding + titleHeight + conf.dividerMargin / 2);\n\n  const members = g\n    .append('text') // text label for the x axis\n    .attr('x', conf.padding)\n    .attr('y', titleHeight + conf.dividerMargin + conf.textHeight)\n    .attr('fill', 'white')\n    .attr('class', 'classText');\n\n  isFirst = true;\n  classDef.members.forEach(function (member) {\n    addTspan(members, member, isFirst, conf);\n    isFirst = false;\n  });\n\n  const membersBox = members.node().getBBox();\n\n  const methodsLine = g\n    .append('line') // text label for the x axis\n    .attr('x1', 0)\n    .attr('y1', conf.padding + titleHeight + conf.dividerMargin + membersBox.height)\n    .attr('y2', conf.padding + titleHeight + conf.dividerMargin + membersBox.height);\n\n  const methods = g\n    .append('text') // text label for the x axis\n    .attr('x', conf.padding)\n    .attr('y', titleHeight + 2 * conf.dividerMargin + membersBox.height + conf.textHeight)\n    .attr('fill', 'white')\n    .attr('class', 'classText');\n\n  isFirst = true;\n\n  classDef.methods.forEach(function (method) {\n    addTspan(methods, method, isFirst, conf);\n    isFirst = false;\n  });\n\n  const classBox = g.node().getBBox();\n  var cssClassStr = ' ';\n\n  if (classDef.cssClasses.length > 0) {\n    cssClassStr = cssClassStr + classDef.cssClasses.join(' ');\n  }\n\n  const rect = g\n    .insert('rect', ':first-child')\n    .attr('x', 0)\n    .attr('y', 0)\n    .attr('width', classBox.width + 2 * conf.padding)\n    .attr('height', classBox.height + conf.padding + 0.5 * conf.dividerMargin)\n    .attr('class', cssClassStr);\n\n  const rectWidth = rect.node().getBBox().width;\n\n  // Center title\n  // We subtract the width of each text element from the class box width and divide it by 2\n  title.node().childNodes.forEach(function (x) {\n    x.setAttribute('x', (rectWidth - x.getBBox().width) / 2);\n  });\n\n  if (classDef.tooltip) {\n    title.insert('title').text(classDef.tooltip);\n  }\n\n  membersLine.attr('x2', rectWidth);\n  methodsLine.attr('x2', rectWidth);\n\n  classInfo.width = rectWidth;\n  classInfo.height = classBox.height + conf.padding + 0.5 * conf.dividerMargin;\n\n  return classInfo;\n};\n\n/**\n * Renders a note diagram\n *\n * @param {SVGSVGElement} elem The element to draw it into\n * @param {{id: string; text: string; class: string;}} note\n * @param conf\n * @param diagObj\n * @todo Add more information in the JSDOC here\n */\nexport const drawNote = function (elem, note, conf, diagObj) {\n  log.debug('Rendering note ', note, conf);\n\n  const id = note.id;\n  const noteInfo = {\n    id: id,\n    text: note.text,\n    width: 0,\n    height: 0,\n  };\n\n  // add class group\n  const g = elem.append('g').attr('id', id).attr('class', 'classGroup');\n\n  // add text\n  let text = g\n    .append('text')\n    .attr('y', conf.textHeight + conf.padding)\n    .attr('x', 0);\n\n  const lines = JSON.parse(`\"${note.text}\"`).split('\\n');\n\n  lines.forEach(function (line) {\n    log.debug(`Adding line: ${line}`);\n    text.append('tspan').text(line).attr('class', 'title').attr('dy', conf.textHeight);\n  });\n\n  const noteBox = g.node().getBBox();\n\n  const rect = g\n    .insert('rect', ':first-child')\n    .attr('x', 0)\n    .attr('y', 0)\n    .attr('width', noteBox.width + 2 * conf.padding)\n    .attr(\n      'height',\n      noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin\n    );\n\n  const rectWidth = rect.node().getBBox().width;\n\n  // Center title\n  // We subtract the width of each text element from the class box width and divide it by 2\n  text.node().childNodes.forEach(function (x) {\n    x.setAttribute('x', (rectWidth - x.getBBox().width) / 2);\n  });\n\n  noteInfo.width = rectWidth;\n  noteInfo.height =\n    noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin;\n\n  return noteInfo;\n};\n\nexport const parseMember = function (text) {\n  const fieldRegEx = /^([#+~-])?(\\w+)(~\\w+~|\\[])?\\s+(\\w+) *([$*])?$/;\n  const methodRegEx = /^([#+|~-])?(\\w+) *\\( *(.*)\\) *([$*])? *(\\w*[[\\]|~]*\\s*\\w*~?)$/;\n\n  let fieldMatch = text.match(fieldRegEx);\n  let methodMatch = text.match(methodRegEx);\n\n  if (fieldMatch && !methodMatch) {\n    return buildFieldDisplay(fieldMatch);\n  } else if (methodMatch) {\n    return buildMethodDisplay(methodMatch);\n  } else {\n    return buildLegacyDisplay(text);\n  }\n};\n\nconst buildFieldDisplay = function (parsedText) {\n  let cssStyle = '';\n  let displayText = '';\n\n  try {\n    let visibility = parsedText[1] ? parsedText[1].trim() : '';\n    let fieldType = parsedText[2] ? parsedText[2].trim() : '';\n    let genericType = parsedText[3] ? parseGenericTypes(parsedText[3].trim()) : '';\n    let fieldName = parsedText[4] ? parsedText[4].trim() : '';\n    let classifier = parsedText[5] ? parsedText[5].trim() : '';\n\n    displayText = visibility + fieldType + genericType + ' ' + fieldName;\n    cssStyle = parseClassifier(classifier);\n  } catch (err) {\n    displayText = parsedText;\n  }\n\n  return {\n    displayText: displayText,\n    cssStyle: cssStyle,\n  };\n};\n\nconst buildMethodDisplay = function (parsedText) {\n  let cssStyle = '';\n  let displayText = '';\n\n  try {\n    let visibility = parsedText[1] ? parsedText[1].trim() : '';\n    let methodName = parsedText[2] ? parsedText[2].trim() : '';\n    let parameters = parsedText[3] ? parseGenericTypes(parsedText[3].trim()) : '';\n    let classifier = parsedText[4] ? parsedText[4].trim() : '';\n    let returnType = parsedText[5] ? ' : ' + parseGenericTypes(parsedText[5]).trim() : '';\n\n    displayText = visibility + methodName + '(' + parameters + ')' + returnType;\n    cssStyle = parseClassifier(classifier);\n  } catch (err) {\n    displayText = parsedText;\n  }\n\n  return {\n    displayText: displayText,\n    cssStyle: cssStyle,\n  };\n};\n\nconst buildLegacyDisplay = function (text) {\n  // if for some reason we don't have any match, use old format to parse text\n  let displayText = '';\n  let cssStyle = '';\n  let returnType = '';\n  let methodStart = text.indexOf('(');\n  let methodEnd = text.indexOf(')');\n\n  if (methodStart > 1 && methodEnd > methodStart && methodEnd <= text.length) {\n    let visibility = '';\n    let methodName = '';\n\n    let firstChar = text.substring(0, 1);\n    if (firstChar.match(/\\w/)) {\n      methodName = text.substring(0, methodStart).trim();\n    } else {\n      if (firstChar.match(/[#+~-]/)) {\n        visibility = firstChar;\n      }\n\n      methodName = text.substring(1, methodStart).trim();\n    }\n\n    const parameters = text.substring(methodStart + 1, methodEnd);\n    const classifier = text.substring(methodEnd + 1, 1);\n    cssStyle = parseClassifier(text.substring(methodEnd + 1, methodEnd + 2));\n\n    displayText = visibility + methodName + '(' + parseGenericTypes(parameters.trim()) + ')';\n\n    if (methodEnd < text.length) {\n      returnType = text.substring(methodEnd + 2).trim();\n      if (returnType !== '') {\n        returnType = ' : ' + parseGenericTypes(returnType);\n        displayText += returnType;\n      }\n    }\n  } else {\n    // finally - if all else fails, just send the text back as written (other than parsing for generic types)\n    displayText = parseGenericTypes(text);\n  }\n\n  return {\n    displayText,\n    cssStyle,\n  };\n};\n/**\n * Adds a <tspan> for a member in a diagram\n *\n * @param {SVGElement} textEl The element to append to\n * @param {string} txt The member\n * @param {boolean} isFirst\n * @param {{ padding: string; textHeight: string }} conf The configuration for the member\n */\nconst addTspan = function (textEl, txt, isFirst, conf) {\n  let member = parseMember(txt);\n\n  const tSpan = textEl.append('tspan').attr('x', conf.padding).text(member.displayText);\n\n  if (member.cssStyle !== '') {\n    tSpan.attr('style', member.cssStyle);\n  }\n\n  if (!isFirst) {\n    tSpan.attr('dy', conf.textHeight);\n  }\n};\n\n/**\n * Gives the styles for a classifier\n *\n * @param {'+' | '-' | '#' | '~' | '*' | '$'} classifier The classifier string\n * @returns {string} Styling for the classifier\n */\nconst parseClassifier = function (classifier) {\n  switch (classifier) {\n    case '*':\n      return 'font-style:italic;';\n    case '$':\n      return 'text-decoration:underline;';\n    default:\n      return '';\n  }\n};\n\nexport default {\n  drawClass,\n  drawEdge,\n  drawNote,\n  parseMember,\n};\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n"],"names":["$8d56dc2371e40f6f$var$sanitizeText","txt","$jmbVX","e","sanitizeText","g","$8d56dc2371e40f6f$var$conf","dividerMargin","padding","textHeight","curve","$8d56dc2371e40f6f$var$getArrowMarker","type","marker","$8d56dc2371e40f6f$var$renderer","cnf","text","id","_version","diagObj","l","info","conf","flowchart","class","securityLevel","nodeSpacing","rankSpacing","$4LkSm","Graph","multigraph","compound","setGraph","rankdir","db","getDirection","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","classes","getClasses","relations","getRelations","notes","getNotes","sandboxElement","_id","keys","Object","forEach","vertex","cssClassStr","cssClasses","length","join","styles","vertexText","label","node","labelStyle","labelText","classData","rx","ry","style","domId","tooltip","getTooltip","haveCallback","link","width","_a","_b","setNode","$8d56dc2371e40f6f$var$addClasses","cnt","edge","edgeData","pattern","relation","lineType","arrowhead","startLabelRight","relationTitle1","endLabelLeft","relationTitle2","arrowTypeStart","type1","arrowTypeEnd","type2","$3IUvT","o","$2YFJl","curveLinear","n","title","arrowheadStyle","labelpos","htmlLabels","labelType","replace","lineBreakRegex","setEdge","id1","id2","$8d56dc2371e40f6f$var$addRelations","startEdgeId","note","i","noteData","edgeId","$8d56dc2371e40f6f$var$addNotes","select","root","nodes","contentDocument","body","svg","element","$evFAv","r","u","insertTitle","titleTopMargin","getDiagramTitle","s","diagramPadding","useMaxWidth","doc","document","labels","querySelectorAll","dim","getBBox","rect","createElementNS","setAttribute","height","insertBefore","firstChild","$8d56dc2371e40f6f$export$6118d022d940d562","$1BFN5","p","d","init","arrowMarkerAbsolute","clear","$adefb12e855c4667$var$edgeCount","$adefb12e855c4667$export$ffb5f4729a158638","fieldMatch","match","methodMatch","$adefb12e855c4667$var$buildFieldDisplay","$adefb12e855c4667$var$buildMethodDisplay","$adefb12e855c4667$var$buildLegacyDisplay","parsedText","cssStyle","displayText","visibility","trim","fieldType","genericType","z","fieldName","classifier","$adefb12e855c4667$var$parseClassifier","err","methodName","parameters","returnType","methodStart","indexOf","methodEnd","firstChar","substring","$adefb12e855c4667$var$addTspan","textEl","isFirst","member","tSpan","append","attr","$adefb12e855c4667$export$2408f22a0fab9ae5","elem","classDef","debug","classInfo","lookUpDomId","linkTarget","annotations","titleText2","classTitleString","classTitle","titleHeight","membersLine","members","membersBox","methodsLine","methods","method","classBox","rectWidth","insert","childNodes","x","path","getRelationType","relationType","AGGREGATION","EXTENSION","COMPOSITION","DEPENDENCY","LOLLIPOP","points","filter","Number","isNaN","y","lineData","lineFunction","line","curveBasis","svgPath","url","window","location","protocol","host","pathname","search","p1_card_x","p1_card_y","p2_card_x","p2_card_y","labelPosition","calcLabelPosition","cardinality_1_point","calcCardinalityPosition","cardinality_2_point","JSON","stringify","bounds","noteInfo","lines","parse","split","noteBox","$86d5c19d81d423c4$export$2e2bcd8739ae039","parcelRequire","default","getPrototypeOf","$hArsG","$281ac82f5f5844b1$var$funcProto","Function","prototype","$281ac82f5f5844b1$var$objectProto","$281ac82f5f5844b1$var$funcToString","toString","$281ac82f5f5844b1$var$hasOwnProperty","hasOwnProperty","$281ac82f5f5844b1$var$objectCtorString","call","$281ac82f5f5844b1$export$2e2bcd8739ae039","value","$f2iog","proto","$bzIQZ","Ctor","constructor"],"version":3,"file":"classDiagram-v2-72bddc41.8ed280a5.js.map"}