function e(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}var t=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire8ed7;t.register("evFAv",(function(n,r){e(n.exports,"r",(()=>E));var i=t("hV1gR"),d=t("c0ySZ"),a=t("6raLh"),l=t("jmbVX"),o=t("4LkSm"),s=t("gwjTY"),c=t("2YFJl");let g={},h={},f={};const u=(e,t)=>(l.l.trace("In isDecendant",t," ",e," = ",h[t].includes(e)),!!h[t].includes(e)),w=(e,t,n,r)=>{l.l.warn("Copying children of ",e,"root",r,"data",t.node(e),r);const i=t.children(e)||[];e!==r&&i.push(e),l.l.warn("Copying (nodes) clusterId",e,"nodes",i),i.forEach((i=>{if(t.children(i).length>0)w(i,t,n,r);else{const d=t.node(i);l.l.info("cp ",i," to ",r," with parent ",e),n.setNode(i,d),r!==t.parent(i)&&(l.l.warn("Setting parent",i,t.parent(i)),n.setParent(i,t.parent(i))),e!==r&&i!==e?(l.l.debug("Setting parent",i,e),n.setParent(i,e)):(l.l.info("In copy ",e,"root",r,"data",t.node(e),r),l.l.debug("Not Setting parent for node=",i,"cluster!==rootId",e!==r,"node!==clusterId",i!==e));const a=t.edges(i);l.l.debug("Copying Edges",a),a.forEach((i=>{l.l.info("Edge",i);const d=t.edge(i.v,i.w,i.name);l.l.info("Edge data",d,r);try{((e,t)=>(l.l.info("Decendants of ",t," is ",h[t]),l.l.info("Edge is ",e),e.v!==t&&e.w!==t&&(h[t]?h[t].includes(e.v)||u(e.v,t)||u(e.w,t)||h[t].includes(e.w):(l.l.debug("Tilt, ",t,",not in decendants"),!1))))(i,r)?(l.l.info("Copying as ",i.v,i.w,d,i.name),n.setEdge(i.v,i.w,d,i.name),l.l.info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):l.l.info("Skipping copy of edge ",i.v,"--\x3e",i.w," rootId: ",r," clusterId:",e)}catch(e){l.l.error(e)}}))}l.l.debug("Removing node",i),t.removeNode(i)}))},p=(e,t)=>{const n=t.children(e);let r=[...n];for(const i of n)f[i]=e,r=[...r,...p(i,t)];return r},v=(e,t)=>{l.l.trace("Searching",e);const n=t.children(e);if(l.l.trace("Searching children of id ",e,n),n.length<1)return l.l.trace("This is a valid node",e),e;for(const r of n){const n=v(r,t);if(n)return l.l.trace("Found replacement for",e," => ",n),n}},y=e=>g[e]&&g[e].externalConnections&&g[e]?g[e].id:e,x=(e,t)=>{if(l.l.warn("extractor - ",t,d.write(e),e.children("D")),t>10)return void l.l.error("Bailing out");let n=e.nodes(),r=!1;for(const t of n){const n=e.children(t);r=r||n.length>0}if(r){l.l.debug("Nodes = ",n,t);for(const r of n)if(l.l.debug("Extracting node",r,g,g[r]&&!g[r].externalConnections,!e.parent(r),e.node(r),e.children("D")," Depth ",t),g[r])if(!g[r].externalConnections&&e.children(r)&&e.children(r).length>0){l.l.warn("Cluster without external connections, without a parent and with children",r,t);let n="TB"===e.graph().rankdir?"LR":"TB";g[r]&&g[r].clusterData&&g[r].clusterData.dir&&(n=g[r].clusterData.dir,l.l.warn("Fixing dir",g[r].clusterData.dir,n));const i=new o.Graph({multigraph:!0,compound:!0}).setGraph({rankdir:n,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));l.l.warn("Old graph before copy",d.write(e)),w(r,e,i,r),e.setNode(r,{clusterNode:!0,id:r,clusterData:g[r].clusterData,labelText:g[r].labelText,graph:i}),l.l.warn("New graph after copy node: (",r,")",d.write(i)),l.l.debug("Old graph after copy",d.write(e))}else l.l.warn("Cluster ** ",r," **not meeting the criteria !externalConnections:",!g[r].externalConnections," no parent: ",!e.parent(r)," children ",e.children(r)&&e.children(r).length>0,e.children("D"),t),l.l.debug(g);else l.l.debug("Not a cluster",r,t);n=e.nodes(),l.l.warn("New list of nodes",n);for(const r of n){const n=e.node(r);l.l.warn(" Now next level",r,n),n.clusterNode&&x(n.graph,t+1)}}else l.l.debug("Done, no node has children",e.nodes())},b=(e,t)=>{if(0===t.length)return[];let n=Object.assign(t);return t.forEach((t=>{const r=e.children(t),i=b(e,r);n=[...n,...i]})),n},m={rect:(e,t)=>{l.l.info("Creating subgraph rect for ",t.id,t);const n=e.insert("g").attr("class","cluster"+(t.class?" "+t.class:"")).attr("id",t.id),r=n.insert("rect",":first-child"),i=(0,l.k)((0,l.g)().flowchart.htmlLabels),d=n.insert("g").attr("class","cluster-label"),o="markdown"===t.labelType?(0,s.c)(d,t.labelText,{style:t.labelStyle,useHtmlLabels:i}):d.node().appendChild((0,a.c)(t.labelText,t.labelStyle,void 0,!0));let g=o.getBBox();if((0,l.k)((0,l.g)().flowchart.htmlLabels)){const e=o.children[0],t=(0,c.select)(o);g=e.getBoundingClientRect(),t.attr("width",g.width),t.attr("height",g.height)}const h=0*t.padding,f=h/2,u=t.width<=g.width+h?g.width+h:t.width;t.width<=g.width+h?t.diff=(g.width-t.width)/2-t.padding/2:t.diff=-t.padding/2,l.l.trace("Data ",t,JSON.stringify(t)),r.attr("style",t.style).attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-u/2).attr("y",t.y-t.height/2-f).attr("width",u).attr("height",t.height+h),i?d.attr("transform","translate("+(t.x-g.width/2)+", "+(t.y-t.height/2)+")"):d.attr("transform","translate("+t.x+", "+(t.y-t.height/2)+")");const w=r.node().getBBox();return t.width=w.width,t.height=w.height,t.intersect=function(e){return(0,a.i)(t,e)},n},roundedWithTitle:(e,t)=>{const n=e.insert("g").attr("class",t.classes).attr("id",t.id),r=n.insert("rect",":first-child"),i=n.insert("g").attr("class","cluster-label"),d=n.append("rect"),o=i.node().appendChild((0,a.c)(t.labelText,t.labelStyle,void 0,!0));let s=o.getBBox();if((0,l.k)((0,l.g)().flowchart.htmlLabels)){const e=o.children[0],t=(0,c.select)(o);s=e.getBoundingClientRect(),t.attr("width",s.width),t.attr("height",s.height)}s=o.getBBox();const g=0*t.padding,h=g/2,f=t.width<=s.width+t.padding?s.width+t.padding:t.width;t.width<=s.width+t.padding?t.diff=(s.width+0*t.padding-t.width)/2:t.diff=-t.padding/2,r.attr("class","outer").attr("x",t.x-f/2-h).attr("y",t.y-t.height/2-h).attr("width",f+g).attr("height",t.height+g),d.attr("class","inner").attr("x",t.x-f/2-h).attr("y",t.y-t.height/2-h+s.height-1).attr("width",f+g).attr("height",t.height+g-s.height-3),i.attr("transform","translate("+(t.x-s.width/2)+", "+(t.y-t.height/2-t.padding/3+((0,l.k)((0,l.g)().flowchart.htmlLabels)?5:3))+")");const u=r.node().getBBox();return t.height=u.height,t.intersect=function(e){return(0,a.i)(t,e)},n},noteGroup:(e,t)=>{const n=e.insert("g").attr("class","note-cluster").attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding,d=i/2;r.attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-t.width/2-d).attr("y",t.y-t.height/2-d).attr("width",t.width+i).attr("height",t.height+i).attr("fill","none");const l=r.node().getBBox();return t.width=l.width,t.height=l.height,t.intersect=function(e){return(0,a.i)(t,e)},n},divider:(e,t)=>{const n=e.insert("g").attr("class",t.classes).attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding,d=i/2;r.attr("class","divider").attr("x",t.x-t.width/2-d).attr("y",t.y-t.height/2).attr("width",t.width+i).attr("height",t.height+i);const l=r.node().getBBox();return t.width=l.width,t.height=l.height,t.diff=-t.padding/2,t.intersect=function(e){return(0,a.i)(t,e)},n}};let N={};const X=(e,t,n,r)=>{l.l.info("Graph in recursive render: XXX",d.write(t),r);const o=t.graph().rankdir;l.l.trace("Dir in recursive render - dir:",o);const s=e.insert("g").attr("class","root");t.nodes()?l.l.info("Recursive render XXX",t.nodes()):l.l.info("No nodes found for",t),t.edges().length>0&&l.l.trace("Recursive edges",t.edge(t.edges()[0]));const c=s.insert("g").attr("class","clusters"),h=s.insert("g").attr("class","edgePaths"),f=s.insert("g").attr("class","edgeLabels"),u=s.insert("g").attr("class","nodes");t.nodes().forEach((function(e){const i=t.node(e);if(void 0!==r){const n=JSON.parse(JSON.stringify(r.clusterData));l.l.info("Setting data for cluster XXX (",e,") ",n,r),t.setNode(r.id,n),t.parent(e)||(l.l.trace("Setting parent",e,r.id),t.setParent(e,r.id,n))}if(l.l.info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),i&&i.clusterNode){l.l.info("Cluster identified",e,i.width,t.node(e));const r=X(u,i.graph,n,t.node(e)),d=r.elem;(0,a.u)(i,d),i.diff=r.diff||0,l.l.info("Node bounds (abc123)",e,i,i.width,i.x,i.y),(0,a.s)(d,i),l.l.warn("Recursive render complete ",d,i)}else t.children(e).length>0?(l.l.info("Cluster - the non recursive path XXX",e,i.id,i,t),l.l.info(v(i.id,t)),g[i.id]={id:v(i.id,t),node:i}):(l.l.info("Node - the non recursive path",e,i.id,i),(0,a.e)(u,t.node(e),o))})),t.edges().forEach((function(e){const n=t.edge(e.v,e.w,e.name);l.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),l.l.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),l.l.info("Fix",g,"ids:",e.v,e.w,"Translateing: ",g[e.v],g[e.w]),(0,a.f)(f,n)})),t.edges().forEach((function(e){l.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e))})),l.l.info("#############################################"),l.l.info("###                Layout                 ###"),l.l.info("#############################################"),l.l.info(t),(0,i.layout)(t),l.l.info("Graph after layout:",d.write(t));let w=0;return(e=>b(e,e.children()))(t).forEach((function(e){const n=t.node(e);l.l.info("Position "+e+": "+JSON.stringify(t.node(e))),l.l.info("Position "+e+": ("+n.x,","+n.y,") width: ",n.width," height: ",n.height),n&&n.clusterNode?(0,a.p)(n):t.children(e).length>0?(((e,t)=>{l.l.trace("Inserting cluster");const n=t.shape||"rect";N[t.id]=m[n](e,t)})(c,n),g[n.id].node=n):(0,a.p)(n)})),t.edges().forEach((function(e){const r=t.edge(e);l.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(r),r);const i=(0,a.g)(h,e,r,g,n,t);(0,a.h)(r,i)})),t.nodes().forEach((function(e){const n=t.node(e);l.l.info(e,n.type,n.diff),"group"===n.type&&(w=n.diff)})),{elem:s,diff:w}},E=(e,t,n,r,i)=>{(0,a.a)(e,n,r,i),(0,a.b)(),(0,a.d)(),N={},h={},f={},g={},l.l.warn("Graph at first:",d.write(t)),((e,t)=>{!e||t>10?l.l.debug("Opting out, no graph "):(l.l.debug("Opting in, graph "),e.nodes().forEach((function(t){e.children(t).length>0&&(l.l.warn("Cluster identified",t," Replacement id in edges: ",v(t,e)),h[t]=p(t,e),g[t]={id:v(t,e),clusterData:e.node(t)})})),e.nodes().forEach((function(t){const n=e.children(t),r=e.edges();n.length>0?(l.l.debug("Cluster identified",t,h),r.forEach((e=>{e.v!==t&&e.w!==t&&u(e.v,t)^u(e.w,t)&&(l.l.warn("Edge: ",e," leaves cluster ",t),l.l.warn("Decendants of XXX ",t,": ",h[t]),g[t].externalConnections=!0)}))):l.l.debug("Not a cluster ",t,h)})),e.edges().forEach((function(t){const n=e.edge(t);l.l.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),l.l.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(e.edge(t)));let r=t.v,i=t.w;if(l.l.warn("Fix XXX",g,"ids:",t.v,t.w,"Translating: ",g[t.v]," --- ",g[t.w]),g[t.v]&&g[t.w]&&g[t.v]===g[t.w]){l.l.warn("Fixing and trixing link to self - removing XXX",t.v,t.w,t.name),l.l.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=y(t.v),i=y(t.w),e.removeEdge(t.v,t.w,t.name);const d=t.w+"---"+t.v;e.setNode(d,{domId:d,id:d,labelStyle:"",labelText:n.label,padding:0,shape:"labelRect",style:""});const a=JSON.parse(JSON.stringify(n)),o=JSON.parse(JSON.stringify(n));a.label="",a.arrowTypeEnd="none",o.label="",a.fromCluster=t.v,o.toCluster=t.v,e.setEdge(r,d,a,t.name+"-cyclic-special"),e.setEdge(d,i,o,t.name+"-cyclic-special")}else(g[t.v]||g[t.w])&&(l.l.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=y(t.v),i=y(t.w),e.removeEdge(t.v,t.w,t.name),r!==t.v&&(n.fromCluster=t.v),i!==t.w&&(n.toCluster=t.w),l.l.warn("Fix Replacing with XXX",r,i,t.name),e.setEdge(r,i,n,t.name))})),l.l.warn("Adjusted Graph",d.write(e)),x(e,0),l.l.trace(g))})(t),l.l.warn("Graph after:",d.write(t)),X(e,t,r)}})),t.register("c0ySZ",(function(n,r){e(n.exports,"write",(()=>l));var i=t("hNIl0"),d=(t("fpekr"),t("1G4S6")),a=t("3kePu");t("2rLgF");function l(e){var t={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:o(e),edges:s(e)};return d.default(e.graph())||(t.value=i.default(e.graph())),t}function o(e){return a.default(e.nodes(),(function(t){var n=e.node(t),r=e.parent(t),i={v:t};return d.default(n)||(i.value=n),d.default(r)||(i.parent=r),i}))}function s(e){return a.default(e.edges(),(function(t){var n=e.edge(t),r={v:t.v,w:t.w};return d.default(t.name)||(r.name=t.name),d.default(n)||(r.value=n),r}))}})),t.register("hNIl0",(function(n,r){e(n.exports,"default",(()=>d));var i=t("gbpSA");var d=function(e){return(0,i.default)(e,4)}}));
//# sourceMappingURL=flowDiagram-46a15f6f.a924742f.js.map
