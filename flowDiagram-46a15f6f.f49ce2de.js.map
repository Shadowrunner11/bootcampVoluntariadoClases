{"mappings":"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","sources":["node_modules/mermaid/src/rendering-util/handle-markdown-text.js","node_modules/mermaid/src/rendering-util/createText.js","node_modules/@khanacademy/simple-markdown/src/index.js"],"sourcesContent":["import SimpleMarkdown from '@khanacademy/simple-markdown';\n\n/**\n *\n * @param markdown\n */\nfunction preprocessMarkdown(markdown) {\n  // Replace multiple newlines with a single newline\n  const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, '\\n');\n  // Remove extra spaces at the beginning of each line\n  const withoutExtraSpaces = withoutMultipleNewlines.replace(/^\\s+/gm, '');\n  return withoutExtraSpaces;\n}\n\n/**\n *\n * @param markdown\n */\nexport function markdownToLines(markdown) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown);\n  const mdParse = SimpleMarkdown.defaultBlockParse;\n  const syntaxTree = mdParse(preprocessedMarkdown);\n\n  let lines = [[]];\n  let currentLine = 0;\n\n  /**\n   *\n   * @param node\n   * @param parentType\n   */\n  function processNode(node, parentType) {\n    if (node.type === 'text') {\n      const textLines = node.content.split('\\n');\n\n      textLines.forEach((textLine, index) => {\n        if (index !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n\n        // textLine.split(/ (?=[^!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]+)/).forEach((word) => {\n        textLine.split(' ').forEach((word) => {\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType || 'normal' });\n          }\n        });\n      });\n    } else if (node.type === 'strong' || node.type === 'em') {\n      node.content.forEach((contentNode) => {\n        processNode(contentNode, node.type);\n      });\n    }\n  }\n\n  syntaxTree.forEach((treeNode) => {\n    if (treeNode.type === 'paragraph') {\n      treeNode.content.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    }\n  });\n\n  return lines;\n}\n\n/**\n *\n * @param markdown\n */\nexport function markdownToHTML(markdown) {\n  const mdParse = SimpleMarkdown.defaultBlockParse;\n  const syntaxTree = mdParse(markdown);\n\n  /**\n   *\n   * @param node\n   */\n  function output(node) {\n    if (node.type === 'text') {\n      return node.content.replace(/\\n/g, '<br/>');\n    } else if (node.type === 'strong') {\n      return `<strong>${node.content.map(output).join('')}</strong>`;\n    } else if (node.type === 'em') {\n      return `<em>${node.content.map(output).join('')}</em>`;\n    } else if (node.type === 'paragraph') {\n      return `<p>${node.content.map(output).join('')}</p>`;\n    } else {\n      return '';\n    }\n  }\n\n  return syntaxTree.map(output).join('');\n}\n","import { select } from 'd3';\nimport { log } from '../logger';\nimport { getConfig } from '../config';\nimport { evaluate } from '../diagrams/common/common';\nimport { decodeEntities } from '../mermaidAPI';\nimport { markdownToHTML, markdownToLines } from '../rendering-util/handle-markdown-text';\n/**\n * @param dom\n * @param styleFn\n */\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr('style', styleFn);\n  }\n}\n\n/**\n * @param element\n * @param {any} node\n * @param width\n * @param classes\n * @returns {SVGForeignObjectElement} Node\n */\nfunction addHtmlSpan(element, node, width, classes) {\n  const fo = element.append('foreignObject');\n  // const newEl = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');\n  // const newEl = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');\n  const div = fo.append('xhtml:div');\n  // const div = body.append('div');\n  // const div = fo.append('div');\n\n  const label = node.label;\n  const labelClass = node.isNode ? 'nodeLabel' : 'edgeLabel';\n  div.html(\n    `<span class=\"${labelClass} ${classes}\" ` +\n      (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : '') +\n      '>' +\n      label +\n      '</span>'\n  );\n\n  applyStyle(div, node.labelStyle);\n  div.style('display', 'table-cell');\n  div.style('white-space', 'nowrap');\n  div.style('max-width', width + 'px');\n  div.attr('xmlns', 'http://www.w3.org/1999/xhtml');\n\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style('display', 'table');\n    div.style('white-space', 'break-spaces');\n    div.style('width', width + 'px');\n    bbox = div.node().getBoundingClientRect();\n  }\n\n  fo.style('width', bbox.width);\n  fo.style('height', bbox.height);\n\n  return fo.node();\n}\n\n/**\n * Creates a tspan element with the specified attributes for text positioning.\n *\n * @param {object} textElement - The parent text element to append the tspan element.\n * @param {number} lineIndex - The index of the current line in the structuredText array.\n * @param {number} lineHeight - The line height value for the text.\n * @returns {object} The created tspan element.\n */\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement\n    .append('tspan')\n    .attr('class', 'text-outer-tspan')\n    .attr('x', 0)\n    .attr('y', lineIndex * lineHeight - 0.1 + 'em')\n    .attr('dy', lineHeight + 'em');\n}\n\n/**\n * Creates a formatted text element by breaking lines and applying styles based on\n * the given structuredText.\n *\n * @param {number} width - The maximum allowed width of the text.\n * @param {object} g - The parent group element to append the formatted text.\n * @param {Array} structuredText - The structured text data to format.\n * @param addBackground\n */\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append('g');\n  let bkg = labelGroup.insert('rect').attr('class', 'background');\n  const textElement = labelGroup.append('text').attr('y', '-10.1');\n  // .attr('dominant-baseline', 'middle')\n  // .attr('text-anchor', 'middle');\n  // .attr('text-anchor', 'middle');\n  let lineIndex = -1;\n  structuredText.forEach((line) => {\n    lineIndex++;\n    let tspan = createTspan(textElement, lineIndex, lineHeight);\n\n    let words = [...line].reverse();\n    let currentWord;\n    let wrappedLine = [];\n\n    while (words.length) {\n      currentWord = words.pop();\n      wrappedLine.push(currentWord);\n\n      updateTextContentAndStyles(tspan, wrappedLine);\n\n      if (tspan.node().getComputedTextLength() > width) {\n        wrappedLine.pop();\n        words.push(currentWord);\n\n        updateTextContentAndStyles(tspan, wrappedLine);\n\n        wrappedLine = [];\n        lineIndex++;\n        tspan = createTspan(textElement, lineIndex, lineHeight);\n      }\n    }\n  });\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg\n      .attr('x', -padding)\n      .attr('y', -padding)\n      .attr('width', bbox.width + 2 * padding)\n      .attr('height', bbox.height + 2 * padding);\n    // .style('fill', 'red');\n\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\n\n/**\n * Updates the text content and styles of the given tspan element based on the\n * provided wrappedLine data.\n *\n * @param {object} tspan - The tspan element to update.\n * @param {Array} wrappedLine - The line data to apply to the tspan element.\n */\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text('');\n\n  wrappedLine.forEach((word, index) => {\n    const innerTspan = tspan\n      .append('tspan')\n      .attr('font-style', word.type === 'em' ? 'italic' : 'normal')\n      .attr('class', 'text-inner-tspan')\n      .attr('font-weight', word.type === 'strong' ? 'bold' : 'normal');\n    const special = ['\"', \"'\", '.', ',', ':', ';', '!', '?', '(', ')', '[', ']', '{', '}'];\n    if (index === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(' ' + word.content);\n    }\n  });\n}\n\n/**\n *\n * @param el\n * @param {*} text\n * @param {*} param1\n * @param root0\n * @param root0.style\n * @param root0.isTitle\n * @param root0.classes\n * @param root0.useHtmlLabels\n * @param root0.isNode\n * @returns\n */\n// Note when using from flowcharts converting the API isNode means classes should be set accordingly. When using htmlLabels => to sett classes to'nodeLabel' when isNode=true otherwise 'edgeLabel'\n// When not using htmlLabels => to set classes to 'title-row' when isTitle=true otherwise 'title-row'\nexport const createText = (\n  el,\n  text = '',\n  {\n    style = '',\n    isTitle = false,\n    classes = '',\n    useHtmlLabels = true,\n    isNode = true,\n    width,\n    addSvgBackground = false,\n  } = {}\n) => {\n  log.info('createText', text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n  if (useHtmlLabels) {\n    // TODO: addHtmlLabel accepts a labelStyle. Do we possibly have that?\n    // text = text.replace(/\\\\n|\\n/g, '<br />');\n    const htmlText = markdownToHTML(text);\n    // log.info('markdo  wnToHTML' + text, markdownToHTML(text));\n    const node = {\n      isNode,\n      label: decodeEntities(htmlText).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        (s) => `<i class='${s.replace(':', ' ')}'></i>`\n      ),\n      labelStyle: style.replace('fill:', 'color:'),\n    };\n    let vertexNode = addHtmlSpan(el, node, width, classes);\n    return vertexNode;\n  } else {\n    const structuredText = markdownToLines(text);\n    const special = ['\"', \"'\", '.', ',', ':', ';', '!', '?', '(', ')', '[', ']', '{', '}'];\n    let lastWord;\n    structuredText.forEach((line) => {\n      line.forEach((word) => {\n        if (special.includes(word.content) && lastWord) {\n          lastWord.content += word.content;\n          word.content = '';\n        }\n        lastWord = word;\n      });\n    });\n    const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n    return svgLabel;\n  }\n};\n","/* eslint-disable prefer-spread, no-regex-spaces, no-unused-vars, guard-for-in, no-console, no-var */\n// @flow\n\n/**\n * Simple-Markdown\n * ===============\n *\n * Simple-Markdown's primary goal is to be easy to adapt. It aims\n * to be compliant with John Gruber's [Markdown Syntax page][1],\n * but compatiblity with other markdown implementations' edge-cases\n * will be sacrificed where it conflicts with simplicity or\n * extensibility.\n *\n * If your goal is to simply embed a standard markdown implementation\n * in your website, simple-markdown is probably not the best library\n * for you (although it should work). But if you have struggled to\n * customize an existing library to meet your needs, simple-markdown\n * might be able to help.\n *\n * Many of the regexes and original logic has been adapted from\n * the wonderful [marked.js](https://github.com/chjj/marked)\n */\n\n// Flow Type Definitions:\n\ntype Capture =\n    | (Array<string> & {index: number})\n    | (Array<string> & {index?: number});\n\ntype Attr = string | number | boolean | null | void;\n\ntype SingleASTNode = {\n    type: string,\n    [string]: any,\n};\n\ntype UnTypedASTNode = {\n    [string]: any,\n};\n\ntype ASTNode = SingleASTNode | Array<SingleASTNode>;\n\ntype State = {\n    key?: string | number | void,\n    inline?: ?boolean,\n    [string]: any,\n};\n\ntype ReactElement = React$Element<any>;\ntype ReactElements = React$Node;\n\ntype MatchFunction = {regex?: RegExp} & ((\n    source: string,\n    state: State,\n    prevCapture: string,\n) => ?Capture);\n\ntype Parser = (source: string, state?: ?State) => Array<SingleASTNode>;\n\ntype ParseFunction = (\n    capture: Capture,\n    nestedParse: Parser,\n    state: State,\n) => UnTypedASTNode | ASTNode;\n\ntype SingleNodeParseFunction = (\n    capture: Capture,\n    nestedParse: Parser,\n    state: State,\n) => UnTypedASTNode;\n\ntype Output<Result> = (node: ASTNode, state?: ?State) => Result;\n\ntype NodeOutput<Result> = (\n    node: SingleASTNode,\n    nestedOutput: Output<Result>,\n    state: State,\n) => Result;\n\ntype ArrayNodeOutput<Result> = (\n    node: Array<SingleASTNode>,\n    nestedOutput: Output<Result>,\n    state: State,\n) => Result;\n\ntype ReactOutput = Output<ReactElements>;\ntype ReactNodeOutput = NodeOutput<ReactElements>;\ntype HtmlOutput = Output<string>;\ntype HtmlNodeOutput = NodeOutput<string>;\n\ntype ParserRule = {\n    +order: number,\n    +match: MatchFunction,\n    +quality?: (capture: Capture, state: State, prevCapture: string) => number,\n    +parse: ParseFunction,\n};\n\ntype SingleNodeParserRule = {\n    +order: number,\n    +match: MatchFunction,\n    +quality?: (capture: Capture, state: State, prevCapture: string) => number,\n    +parse: SingleNodeParseFunction,\n};\n\ntype ReactOutputRule = {\n    // we allow null because some rules are never output results, and that's\n    // legal as long as no parsers return an AST node matching that rule.\n    // We don't use ? because this makes it be explicitly defined as either\n    // a valid function or null, so it can't be forgotten.\n    +react: ReactNodeOutput | null,\n};\n\ntype HtmlOutputRule = {\n    +html: HtmlNodeOutput | null,\n};\n\ntype ArrayRule = {\n    +react?: ArrayNodeOutput<ReactElements>,\n    +html?: ArrayNodeOutput<string>,\n    +[string]: ArrayNodeOutput<any>,\n};\n\ntype ParserRules = {\n    +Array?: ArrayRule,\n    +[type: string]: ParserRule,\n};\n\ntype OutputRules<Rule> = {\n    +Array?: ArrayRule,\n    +[type: string]: Rule,\n};\ntype Rules<OutputRule> = {\n    +Array?: ArrayRule,\n    +[type: string]: ParserRule & OutputRule,\n};\ntype ReactRules = {\n    +Array?: {\n        +react: ArrayNodeOutput<ReactElements>,\n    },\n    +[type: string]: ParserRule & ReactOutputRule,\n};\ntype HtmlRules = {\n    +Array?: {\n        +html: ArrayNodeOutput<string>,\n    },\n    +[type: string]: ParserRule & HtmlOutputRule,\n};\n\n// We want to clarify our defaultRules types a little bit more so clients can\n// reuse defaultRules built-ins. So we make some stronger guarantess when\n// we can:\ntype NonNullReactOutputRule = {\n    +react: ReactNodeOutput,\n};\ntype ElementReactOutputRule = {\n    +react: NodeOutput<ReactElement>,\n};\ntype TextReactOutputRule = {\n    +react: NodeOutput<string>,\n};\ntype NonNullHtmlOutputRule = {\n    +html: HtmlNodeOutput,\n};\n\ntype DefaultInRule = SingleNodeParserRule & ReactOutputRule & HtmlOutputRule;\ntype TextInOutRule = SingleNodeParserRule &\n    TextReactOutputRule &\n    NonNullHtmlOutputRule;\ntype LenientInOutRule = SingleNodeParserRule &\n    NonNullReactOutputRule &\n    NonNullHtmlOutputRule;\ntype DefaultInOutRule = SingleNodeParserRule &\n    ElementReactOutputRule &\n    NonNullHtmlOutputRule;\n\ntype DefaultRules = {\n    +Array: {\n        +react: ArrayNodeOutput<ReactElements>,\n        +html: ArrayNodeOutput<string>,\n    },\n    +heading: DefaultInOutRule,\n    +nptable: DefaultInRule,\n    +lheading: DefaultInRule,\n    +hr: DefaultInOutRule,\n    +codeBlock: DefaultInOutRule,\n    +fence: DefaultInRule,\n    +blockQuote: DefaultInOutRule,\n    +list: DefaultInOutRule,\n    +def: LenientInOutRule,\n    +table: DefaultInOutRule,\n    +tableSeparator: DefaultInRule,\n    +newline: TextInOutRule,\n    +paragraph: DefaultInOutRule,\n    +escape: DefaultInRule,\n    +autolink: DefaultInRule,\n    +mailto: DefaultInRule,\n    +url: DefaultInRule,\n    +link: DefaultInOutRule,\n    +image: DefaultInOutRule,\n    +reflink: DefaultInRule,\n    +refimage: DefaultInRule,\n    +em: DefaultInOutRule,\n    +strong: DefaultInOutRule,\n    +u: DefaultInOutRule,\n    +del: DefaultInOutRule,\n    +inlineCode: DefaultInOutRule,\n    +br: DefaultInOutRule,\n    +text: TextInOutRule,\n};\n\ntype RefNode = {\n    type: string,\n    content?: ASTNode,\n    target?: string,\n    title?: string,\n    alt?: string,\n};\n\n// End Flow Definitions\n\nvar CR_NEWLINE_R = /\\r\\n?/g;\nvar TAB_R = /\\t/g;\nvar FORMFEED_R = /\\f/g;\n\n/**\n * Turn various whitespace into easy-to-process whitespace\n */\nvar preprocess = function (source: string): string {\n    return source\n        .replace(CR_NEWLINE_R, \"\\n\")\n        .replace(FORMFEED_R, \"\")\n        .replace(TAB_R, \"    \");\n};\n\nvar populateInitialState = function (\n    givenState: ?State,\n    defaultState: ?State,\n): State {\n    var state: State = givenState || {};\n    if (defaultState != null) {\n        for (var prop in defaultState) {\n            // $FlowFixMe\n            if (Object.prototype.hasOwnProperty.call(defaultState, prop)) {\n                state[prop] = defaultState[prop];\n            }\n        }\n    }\n    return state;\n};\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @param {SimpleMarkdown.ParserRules} rules\n *     an object containing\n *     rule type -> {match, order, parse} objects\n *     (lower order is higher precedence)\n * @param {SimpleMarkdown.OptionalState} [defaultState]\n *\n * @returns {SimpleMarkdown.Parser}\n *     The resulting parse function, with the following parameters:\n *     @source: the input source string to be parsed\n *     @state: an optional object to be threaded through parse\n *         calls. Allows clients to add stateful operations to\n *         parsing, such as keeping track of how many levels deep\n *         some nesting is. For an example use-case, see passage-ref\n *         parsing in src/widgets/passage/passage-markdown.jsx\n */\nvar parserFor = function (rules: ParserRules, defaultState: ?State): Parser {\n    // Sorts rules in order of increasing order, then\n    // ascending rule name in case of ties.\n    var ruleList = Object.keys(rules).filter(function (type) {\n        var rule = rules[type];\n        if (rule == null || rule.match == null) {\n            return false;\n        }\n        var order = rule.order;\n        if (\n            (typeof order !== \"number\" || !isFinite(order)) &&\n            typeof console !== \"undefined\"\n        ) {\n            console.warn(\n                \"simple-markdown: Invalid order for rule `\" +\n                    type +\n                    \"`: \" +\n                    String(order),\n            );\n        }\n        return true;\n    });\n\n    ruleList.sort(function (typeA, typeB) {\n        var ruleA: ParserRule = (rules[typeA]: any);\n        var ruleB: ParserRule = (rules[typeB]: any);\n        var orderA = ruleA.order;\n        var orderB = ruleB.order;\n\n        // First sort based on increasing order\n        if (orderA !== orderB) {\n            return orderA - orderB;\n        }\n\n        var secondaryOrderA = ruleA.quality ? 0 : 1;\n        var secondaryOrderB = ruleB.quality ? 0 : 1;\n\n        if (secondaryOrderA !== secondaryOrderB) {\n            return secondaryOrderA - secondaryOrderB;\n\n            // Then based on increasing unicode lexicographic ordering\n        } else if (typeA < typeB) {\n            return -1;\n        } else if (typeA > typeB) {\n            return 1;\n        } else {\n            // Rules should never have the same name,\n            // but this is provided for completeness.\n            return 0;\n        }\n    });\n\n    var latestState: State;\n    var nestedParse: Parser = function (\n        source: string,\n        state: ?State,\n    ): Array<SingleASTNode> {\n        var result: Array<SingleASTNode> = [];\n        state = state || latestState;\n        latestState = state;\n        while (source) {\n            // store the best match, it's rule, and quality:\n            var ruleType = null;\n            var rule = null;\n            var capture = null;\n            var quality = NaN;\n\n            // loop control variables:\n            var i = 0;\n            var currRuleType = ruleList[0];\n\n            // $FlowFixMe\n            var currRule: ParserRule = rules[currRuleType];\n\n            do {\n                var currOrder = currRule.order;\n                var prevCaptureStr =\n                    state.prevCapture == null ? \"\" : state.prevCapture[0];\n                var currCapture = currRule.match(source, state, prevCaptureStr);\n\n                if (currCapture) {\n                    var currQuality = currRule.quality\n                        ? currRule.quality(currCapture, state, prevCaptureStr)\n                        : 0;\n                    // This should always be true the first time because\n                    // the initial quality is NaN (that's why there's the\n                    // condition negation).\n                    if (!(currQuality <= quality)) {\n                        ruleType = currRuleType;\n                        rule = currRule;\n                        capture = currCapture;\n                        quality = currQuality;\n                    }\n                }\n\n                // Move on to the next item.\n                // Note that this makes `currRule` be the next item\n                i++;\n                currRuleType = ruleList[i];\n                // $FlowFixMe\n                currRule = rules[currRuleType];\n            } while (\n                // keep looping while we're still within the ruleList\n                currRule &&\n                // if we don't have a match yet, continue\n                (!capture ||\n                    // or if we have a match, but the next rule is\n                    // at the same order, and has a quality measurement\n                    // functions, then this rule must have a quality\n                    // measurement function (since they are sorted before\n                    // those without), and we need to check if there is\n                    // a better quality match\n                    (currRule.order === currOrder && currRule.quality))\n            );\n\n            // TODO(aria): Write tests for these\n            if (rule == null || capture == null) {\n                throw new Error(\n                    \"Could not find a matching rule for the below \" +\n                        \"content. The rule with highest `order` should \" +\n                        \"always match content provided to it. Check \" +\n                        \"the definition of `match` for '\" +\n                        ruleList[ruleList.length - 1] +\n                        \"'. It seems to not match the following source:\\n\" +\n                        source,\n                );\n            }\n            if (capture.index) {\n                // If present and non-zero, i.e. a non-^ regexp result:\n                throw new Error(\n                    \"`match` must return a capture starting at index 0 \" +\n                        \"(the current parse index). Did you forget a ^ at the \" +\n                        \"start of the RegExp?\",\n                );\n            }\n\n            var parsed = rule.parse(capture, nestedParse, state);\n            // We maintain the same object here so that rules can\n            // store references to the objects they return and\n            // modify them later. (oops sorry! but this adds a lot\n            // of power--see reflinks.)\n            if (Array.isArray(parsed)) {\n                // $FlowFixMe\n                Array.prototype.push.apply(result, parsed);\n            } else {\n                if (parsed == null || typeof parsed !== \"object\") {\n                    throw new Error(\n                        `parse() function returned invalid parse result: '${parsed}'`,\n                    );\n                }\n\n                // We also let rules override the default type of\n                // their parsed node if they would like to, so that\n                // there can be a single output function for all links,\n                // even if there are several rules to parse them.\n                if (parsed.type == null) {\n                    // $FlowFixMe\n                    parsed.type = ruleType;\n                }\n                result.push(parsed);\n            }\n\n            state.prevCapture = capture;\n            source = source.substring(state.prevCapture[0].length);\n        }\n\n        // $FlowFixMe\n        return result;\n    };\n\n    var outerParse: Parser = function (\n        source: string,\n        state: ?State,\n    ): Array<SingleASTNode> {\n        latestState = populateInitialState(state, defaultState);\n        if (!latestState.inline && !latestState.disableAutoBlockNewlines) {\n            source = source + \"\\n\\n\";\n        }\n        // We store the previous capture so that match functions can\n        // use some limited amount of lookbehind. Lists use this to\n        // ensure they don't match arbitrary '- ' or '* ' in inline\n        // text (see the list rule for more information). This stores\n        // the full regex capture object, if there is one.\n        latestState.prevCapture = null;\n        return nestedParse(preprocess(source), latestState);\n    };\n\n    // $FlowFixMe\n    return outerParse;\n};\n\n// Creates a match function for an inline scoped element from a regex\nvar inlineRegex = function (regex: RegExp): MatchFunction {\n    var match = function (\n        source: string,\n        state: State,\n        prevCapture: string,\n    ): ?Capture {\n        if (state.inline) {\n            // $FlowFixMe\n            return regex.exec(source);\n        } else {\n            return null;\n        }\n    };\n    match.regex = regex;\n\n    return match;\n};\n\n// Creates a match function for a block scoped element from a regex\nvar blockRegex = function (regex: RegExp): MatchFunction {\n    // $FlowFixMe\n    var match: MatchFunction = function (source, state) {\n        if (state.inline) {\n            return null;\n        } else {\n            return regex.exec(source);\n        }\n    };\n    match.regex = regex;\n    return match;\n};\n\n// Creates a match function from a regex, ignoring block/inline scope\nvar anyScopeRegex = function (regex: RegExp): MatchFunction {\n    // $FlowFixMe\n    var match: MatchFunction = function (source, state) {\n        return regex.exec(source);\n    };\n    match.regex = regex;\n    return match;\n};\n\nvar TYPE_SYMBOL =\n    (typeof Symbol === \"function\" &&\n        Symbol.for &&\n        Symbol.for(\"react.element\")) ||\n    0xeac7;\n\nvar reactElement = function (\n    type: string,\n    key: string | number | null | void,\n    props: {[string]: any},\n): ReactElement {\n    var element: ReactElement = ({\n        $$typeof: TYPE_SYMBOL,\n        type: type,\n        key: key == null ? undefined : key,\n        ref: null,\n        props: props,\n        _owner: null,\n    }: any);\n    return element;\n};\n\n/** Returns a closed HTML tag.\n * @param {string} tagName - Name of HTML tag (eg. \"em\" or \"a\")\n * @param {string} content - Inner content of tag\n * @param {{ [attr: string]: SimpleMarkdown.Attr }} [attributes] - Optional extra attributes of tag as an object of key-value pairs\n *   eg. { \"href\": \"http://google.com\" }. Falsey attributes are filtered out.\n * @param {boolean} [isClosed] - boolean that controls whether tag is closed or not (eg. img tags).\n *   defaults to true\n */\nvar htmlTag = function (\n    tagName: string,\n    content: string,\n    attributes: ?{[any]: ?Attr},\n    isClosed: ?boolean,\n) {\n    attributes = attributes || {};\n    isClosed = typeof isClosed !== \"undefined\" ? isClosed : true;\n\n    var attributeString = \"\";\n    for (var attr in attributes) {\n        var attribute = attributes[attr];\n        // Removes falsey attributes\n        if (\n            // $FlowFixMe\n            Object.prototype.hasOwnProperty.call(attributes, attr) &&\n            attribute\n        ) {\n            attributeString +=\n                \" \" + sanitizeText(attr) + '=\"' + sanitizeText(attribute) + '\"';\n        }\n    }\n\n    var unclosedTag = \"<\" + tagName + attributeString + \">\";\n\n    if (isClosed) {\n        return unclosedTag + content + \"</\" + tagName + \">\";\n    } else {\n        return unclosedTag;\n    }\n};\n\nvar EMPTY_PROPS = {};\n\n/**\n * @param {string | null | undefined} url - url to sanitize\n * @returns {string | null} - url if safe, or null if a safe url could not be made\n */\nvar sanitizeUrl = function (url: ?string) {\n    if (url == null) {\n        return null;\n    }\n    try {\n        var prot = new URL(url, \"https://localhost\").protocol;\n        if (\n            prot.indexOf(\"javascript:\") === 0 ||\n            prot.indexOf(\"vbscript:\") === 0 ||\n            prot.indexOf(\"data:\") === 0\n        ) {\n            return null;\n        }\n    } catch (e) {\n        // invalid URLs should throw a TypeError\n        // see for instance: `new URL(\"\");`\n        return null;\n    }\n    return url;\n};\n\nvar SANITIZE_TEXT_R = /[<>&\"']/g;\nvar SANITIZE_TEXT_CODES = {\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    \"&\": \"&amp;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#x27;\",\n    \"/\": \"&#x2F;\",\n    \"`\": \"&#96;\",\n};\n\nvar sanitizeText = function (text: Attr): string {\n    return String(text).replace(SANITIZE_TEXT_R, function (chr) {\n        return SANITIZE_TEXT_CODES[chr];\n    });\n};\n\nvar UNESCAPE_URL_R = /\\\\([^0-9A-Za-z\\s])/g;\n\nvar unescapeUrl = function (rawUrlString: string): string {\n    return rawUrlString.replace(UNESCAPE_URL_R, \"$1\");\n};\n\n/**\n * Parse some content with the parser `parse`, with state.inline\n * set to true. Useful for block elements; not generally necessary\n * to be used by inline elements (where state.inline is already true.\n */\nvar parseInline = function (\n    parse: Parser,\n    content: string,\n    state: State,\n): ASTNode {\n    var isCurrentlyInline = state.inline || false;\n    state.inline = true;\n    var result = parse(content, state);\n    state.inline = isCurrentlyInline;\n    return result;\n};\n\nvar parseBlock = function (\n    parse: Parser,\n    content: string,\n    state: State,\n): ASTNode {\n    var isCurrentlyInline = state.inline || false;\n    state.inline = false;\n    var result = parse(content + \"\\n\\n\", state);\n    state.inline = isCurrentlyInline;\n    return result;\n};\n\nvar parseCaptureInline = function (\n    capture: Capture,\n    parse: Parser,\n    state: State,\n): UnTypedASTNode {\n    return {\n        content: parseInline(parse, capture[1], state),\n    };\n};\n\nvar ignoreCapture = function (): UnTypedASTNode {\n    return {};\n};\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nvar LIST_BULLET = \"(?:[*+-]|\\\\d+\\\\.)\";\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nvar LIST_ITEM_PREFIX = \"( *)(\" + LIST_BULLET + \") +\";\nvar LIST_ITEM_PREFIX_R = new RegExp(\"^\" + LIST_ITEM_PREFIX);\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nvar LIST_ITEM_R = new RegExp(\n    LIST_ITEM_PREFIX +\n        \"[^\\\\n]*(?:\\\\n\" +\n        \"(?!\\\\1\" +\n        LIST_BULLET +\n        \" )[^\\\\n]*)*(\\n|$)\",\n    \"gm\",\n);\nvar BLOCK_END_R = /\\n{2,}$/;\nvar INLINE_CODE_ESCAPE_BACKTICKS_R = /^ (?= *`)|(` *) $/g;\n// recognize the end of a paragraph block inside a list item:\n// two or more newlines at end end of the item\nvar LIST_BLOCK_END_R = BLOCK_END_R;\nvar LIST_ITEM_END_R = / *\\n+$/;\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nvar LIST_R = new RegExp(\n    \"^( *)(\" +\n        LIST_BULLET +\n        \") \" +\n        \"[\\\\s\\\\S]+?(?:\\n{2,}(?! )\" +\n        \"(?!\\\\1\" +\n        LIST_BULLET +\n        \" )\\\\n*\" +\n        // the \\\\s*$ here is so that we can parse the inside of nested\n        // lists, where our content might end before we receive two `\\n`s\n        \"|\\\\s*\\n*$)\",\n);\nvar LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/;\n\nvar TABLES = (function () {\n    // predefine regexes so we don't have to create them inside functions\n    // sure, regex literals should be fast, even inside functions, but they\n    // aren't in all browsers.\n    var TABLE_BLOCK_TRIM = /\\n+/g;\n    var TABLE_ROW_SEPARATOR_TRIM = /^ *\\| *| *\\| *$/g;\n    var TABLE_CELL_END_TRIM = / *$/;\n    var TABLE_RIGHT_ALIGN = /^ *-+: *$/;\n    var TABLE_CENTER_ALIGN = /^ *:-+: *$/;\n    var TABLE_LEFT_ALIGN = /^ *:-+ *$/;\n\n    // TODO: This needs a real type\n    type TableAlignment = any;\n\n    var parseTableAlignCapture = function (\n        alignCapture: string,\n    ): TableAlignment {\n        if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n            return \"right\";\n        } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n            return \"center\";\n        } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n            return \"left\";\n        } else {\n            return null;\n        }\n    };\n\n    var parseTableAlign = function (\n        source: string,\n        parse: Parser,\n        state: State,\n        trimEndSeparators: boolean,\n    ): Array<TableAlignment> {\n        if (trimEndSeparators) {\n            source = source.replace(TABLE_ROW_SEPARATOR_TRIM, \"\");\n        }\n        var alignText = source.trim().split(\"|\");\n        return alignText.map(parseTableAlignCapture);\n    };\n\n    var parseTableRow = function (\n        source: string,\n        parse: Parser,\n        state: State,\n        trimEndSeparators: boolean,\n    ): Array<Array<SingleASTNode>> {\n        var prevInTable = state.inTable;\n        state.inTable = true;\n        var tableRow = parse(source.trim(), state);\n        state.inTable = prevInTable;\n\n        var cells = [[]];\n        tableRow.forEach(function (node, i) {\n            if (node.type === \"tableSeparator\") {\n                // Filter out empty table separators at the start/end:\n                if (\n                    !trimEndSeparators ||\n                    (i !== 0 && i !== tableRow.length - 1)\n                ) {\n                    // Split the current row:\n                    cells.push([]);\n                }\n            } else {\n                if (\n                    node.type === \"text\" &&\n                    (tableRow[i + 1] == null ||\n                        tableRow[i + 1].type === \"tableSeparator\")\n                ) {\n                    node.content = node.content.replace(\n                        TABLE_CELL_END_TRIM,\n                        \"\",\n                    );\n                }\n                cells[cells.length - 1].push(node);\n            }\n        });\n\n        return cells;\n    };\n\n    /**\n     * @param {string} source\n     * @param {SimpleMarkdown.Parser} parse\n     * @param {SimpleMarkdown.State} state\n     * @param {boolean} trimEndSeparators\n     * @returns {SimpleMarkdown.ASTNode[][]}\n     */\n    var parseTableCells = function (\n        source: string,\n        parse: Parser,\n        state: State,\n        trimEndSeparators: boolean,\n    ): Array<Array<ASTNode>> {\n        var rowsText = source.trim().split(\"\\n\");\n\n        return rowsText.map(function (rowText) {\n            // $FlowFixMe\n            return parseTableRow(rowText, parse, state, trimEndSeparators);\n        });\n    };\n\n    /**\n     * @param {boolean} trimEndSeparators\n     * @returns {SimpleMarkdown.SingleNodeParseFunction}\n     */\n    var parseTable = function (trimEndSeparators) {\n        return function (capture, parse, state) {\n            state.inline = true;\n            var header = parseTableRow(\n                capture[1],\n                parse,\n                state,\n                trimEndSeparators,\n            );\n            var align = parseTableAlign(\n                capture[2],\n                parse,\n                state,\n                trimEndSeparators,\n            );\n            var cells = parseTableCells(\n                capture[3],\n                parse,\n                state,\n                trimEndSeparators,\n            );\n            state.inline = false;\n\n            return {\n                type: \"table\",\n                header: header,\n                align: align,\n                cells: cells,\n            };\n        };\n    };\n\n    return {\n        parseTable: parseTable(true),\n        parseNpTable: parseTable(false),\n        TABLE_REGEX:\n            /^ *(\\|.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/,\n        NPTABLE_REGEX:\n            /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n    };\n})();\n\nvar LINK_INSIDE = \"(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*\";\nvar LINK_HREF_AND_TITLE =\n    \"\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\";\nvar AUTOLINK_MAILTO_CHECK_R = /mailto:/i;\n\nvar parseRef = function (\n    capture: Capture,\n    state: State,\n    refNode: RefNode,\n): RefNode {\n    var ref = (capture[2] || capture[1]).replace(/\\s+/g, \" \").toLowerCase();\n\n    // We store information about previously seen defs on\n    // state._defs (_ to deconflict with client-defined\n    // state). If the def for this reflink/refimage has\n    // already been seen, we can use its target/source\n    // and title here:\n    if (state._defs && state._defs[ref]) {\n        var def = state._defs[ref];\n        // `refNode` can be a link or an image. Both use\n        // target and title properties.\n        refNode.target = def.target;\n        refNode.title = def.title;\n    }\n\n    // In case we haven't seen our def yet (or if someone\n    // overwrites that def later on), we add this node\n    // to the list of ref nodes for that def. Then, when\n    // we find the def, we can modify this link/image AST\n    // node :).\n    // I'm sorry.\n    state._refs = state._refs || {};\n    state._refs[ref] = state._refs[ref] || [];\n    state._refs[ref].push(refNode);\n\n    return refNode;\n};\n\nvar currOrder = 0;\n\nvar defaultRules: DefaultRules = {\n    Array: {\n        react: function (arr, output, state) {\n            var oldKey = state.key;\n            var result: Array<ReactElements> = [];\n\n            // map output over the ast, except group any text\n            // nodes together into a single string output.\n            for (var i = 0, key = 0; i < arr.length; i++, key++) {\n                // `key` is our numerical `state.key`, which we increment for\n                // every output node, but don't change for joined text nodes.\n                // (i, however, must change for joined text nodes)\n                state.key = \"\" + i;\n\n                var node = arr[i];\n                if (node.type === \"text\") {\n                    node = {type: \"text\", content: node.content};\n                    for (\n                        ;\n                        i + 1 < arr.length && arr[i + 1].type === \"text\";\n                        i++\n                    ) {\n                        node.content += arr[i + 1].content;\n                    }\n                }\n\n                result.push(output(node, state));\n            }\n\n            state.key = oldKey;\n            return result;\n        },\n        html: function (arr, output, state) {\n            var result = \"\";\n\n            // map output over the ast, except group any text\n            // nodes together into a single string output.\n            for (var i = 0, key = 0; i < arr.length; i++) {\n                var node = arr[i];\n                if (node.type === \"text\") {\n                    node = {type: \"text\", content: node.content};\n                    for (\n                        ;\n                        i + 1 < arr.length && arr[i + 1].type === \"text\";\n                        i++\n                    ) {\n                        node.content += arr[i + 1].content;\n                    }\n                }\n\n                result += output(node, state);\n            }\n            return result;\n        },\n    },\n    heading: {\n        order: currOrder++,\n        match: blockRegex(/^ *(#{1,6})([^\\n]+?)#* *(?:\\n *)+\\n/),\n        parse: function (capture, parse, state) {\n            return {\n                level: capture[1].length,\n                content: parseInline(parse, capture[2].trim(), state),\n            };\n        },\n        react: function (node, output, state) {\n            return reactElement(\"h\" + node.level, state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"h\" + node.level, output(node.content, state));\n        },\n    },\n    nptable: {\n        order: currOrder++,\n        match: blockRegex(TABLES.NPTABLE_REGEX),\n        parse: TABLES.parseNpTable,\n        react: null,\n        html: null,\n    },\n    lheading: {\n        order: currOrder++,\n        match: blockRegex(/^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"heading\",\n                level: capture[2] === \"=\" ? 1 : 2,\n                content: parseInline(parse, capture[1], state),\n            };\n        },\n        react: null,\n        html: null,\n    },\n    hr: {\n        order: currOrder++,\n        match: blockRegex(/^( *[-*_]){3,} *(?:\\n *)+\\n/),\n        parse: ignoreCapture,\n        react: function (node, output, state) {\n            return reactElement(\"hr\", state.key, EMPTY_PROPS);\n        },\n        html: function (node, output, state) {\n            return \"<hr>\";\n        },\n    },\n    codeBlock: {\n        order: currOrder++,\n        match: blockRegex(/^(?:    [^\\n]+\\n*)+(?:\\n *)+\\n/),\n        parse: function (capture, parse, state) {\n            var content = capture[0].replace(/^    /gm, \"\").replace(/\\n+$/, \"\");\n            return {\n                lang: undefined,\n                content: content,\n            };\n        },\n        react: function (node, output, state) {\n            var className = node.lang\n                ? \"markdown-code-\" + node.lang\n                : undefined;\n\n            return reactElement(\"pre\", state.key, {\n                children: reactElement(\"code\", null, {\n                    className: className,\n                    children: node.content,\n                }),\n            });\n        },\n        html: function (node, output, state) {\n            var className = node.lang\n                ? \"markdown-code-\" + node.lang\n                : undefined;\n\n            var codeBlock = htmlTag(\"code\", sanitizeText(node.content), {\n                class: className,\n            });\n            return htmlTag(\"pre\", codeBlock);\n        },\n    },\n    fence: {\n        order: currOrder++,\n        match: blockRegex(\n            /^ *(`{3,}|~{3,}) *(?:(\\S+) *)?\\n([\\s\\S]+?)\\n?\\1 *(?:\\n *)+\\n/,\n        ),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"codeBlock\",\n                lang: capture[2] || undefined,\n                content: capture[3],\n            };\n        },\n        react: null,\n        html: null,\n    },\n    blockQuote: {\n        order: currOrder++,\n        match: blockRegex(/^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/),\n        parse: function (capture, parse, state) {\n            var content = capture[0].replace(/^ *> ?/gm, \"\");\n            return {\n                content: parse(content, state),\n            };\n        },\n        react: function (node, output, state) {\n            return reactElement(\"blockquote\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"blockquote\", output(node.content, state));\n        },\n    },\n    list: {\n        order: currOrder++,\n        // $FlowFixMe\n        match: function (source, state) {\n            // We only want to break into a list if we are at the start of a\n            // line. This is to avoid parsing \"hi * there\" with \"* there\"\n            // becoming a part of a list.\n            // You might wonder, \"but that's inline, so of course it wouldn't\n            // start a list?\". You would be correct! Except that some of our\n            // lists can be inline, because they might be inside another list,\n            // in which case we can parse with inline scope, but need to allow\n            // nested lists inside this inline scope.\n            var prevCaptureStr =\n                state.prevCapture == null ? \"\" : state.prevCapture[0];\n            var isStartOfLineCapture = LIST_LOOKBEHIND_R.exec(prevCaptureStr);\n            var isListBlock = state._list || !state.inline;\n\n            if (isStartOfLineCapture && isListBlock) {\n                source = isStartOfLineCapture[1] + source;\n                return LIST_R.exec(source);\n            } else {\n                return null;\n            }\n        },\n        parse: function (capture, parse, state) {\n            var bullet = capture[2];\n            var ordered = bullet.length > 1;\n            var start = ordered ? +bullet : undefined;\n            var items: Array<string> = capture[0]\n                .replace(LIST_BLOCK_END_R, \"\\n\")\n                .match(LIST_ITEM_R);\n\n            // We know this will match here, because of how the regexes are\n            // defined\n\n            var lastItemWasAParagraph = false;\n            var itemContent = items.map(function (item: string, i: number) {\n                // We need to see how far indented this item is:\n                var prefixCapture = LIST_ITEM_PREFIX_R.exec(item);\n                var space = prefixCapture ? prefixCapture[0].length : 0;\n                // And then we construct a regex to \"unindent\" the subsequent\n                // lines of the items by that amount:\n                var spaceRegex = new RegExp(\"^ {1,\" + space + \"}\", \"gm\");\n\n                // Before processing the item, we need a couple things\n                var content = item\n                    // remove indents on trailing lines:\n                    .replace(spaceRegex, \"\")\n                    // remove the bullet:\n                    .replace(LIST_ITEM_PREFIX_R, \"\");\n\n                // I'm not sur4 why this is necessary again?\n\n                // Handling \"loose\" lists, like:\n                //\n                //  * this is wrapped in a paragraph\n                //\n                //  * as is this\n                //\n                //  * as is this\n                var isLastItem = i === items.length - 1;\n                var containsBlocks = content.indexOf(\"\\n\\n\") !== -1;\n\n                // Any element in a list is a block if it contains multiple\n                // newlines. The last element in the list can also be a block\n                // if the previous item in the list was a block (this is\n                // because non-last items in the list can end with \\n\\n, but\n                // the last item can't, so we just \"inherit\" this property\n                // from our previous element).\n                var thisItemIsAParagraph =\n                    containsBlocks || (isLastItem && lastItemWasAParagraph);\n                lastItemWasAParagraph = thisItemIsAParagraph;\n\n                // backup our state for restoration afterwards. We're going to\n                // want to set state._list to true, and state.inline depending\n                // on our list's looseness.\n                var oldStateInline = state.inline;\n                var oldStateList = state._list;\n                state._list = true;\n\n                // Parse inline if we're in a tight list, or block if we're in\n                // a loose list.\n                var adjustedContent;\n                if (thisItemIsAParagraph) {\n                    state.inline = false;\n                    adjustedContent = content.replace(LIST_ITEM_END_R, \"\\n\\n\");\n                } else {\n                    state.inline = true;\n                    adjustedContent = content.replace(LIST_ITEM_END_R, \"\");\n                }\n\n                var result = parse(adjustedContent, state);\n\n                // Restore our state before returning\n                state.inline = oldStateInline;\n                state._list = oldStateList;\n                return result;\n            });\n\n            return {\n                ordered: ordered,\n                start: start,\n                items: itemContent,\n            };\n        },\n        react: function (node, output, state) {\n            var ListWrapper = node.ordered ? \"ol\" : \"ul\";\n\n            return reactElement(ListWrapper, state.key, {\n                start: node.start,\n                children: node.items.map(function (item: ASTNode, i: number) {\n                    return reactElement(\"li\", \"\" + i, {\n                        children: output(item, state),\n                    });\n                }),\n            });\n        },\n        html: function (node, output, state) {\n            var listItems = node.items\n                .map(function (item: ASTNode) {\n                    return htmlTag(\"li\", output(item, state));\n                })\n                .join(\"\");\n\n            var listTag = node.ordered ? \"ol\" : \"ul\";\n            var attributes = {\n                start: node.start,\n            };\n            return htmlTag(listTag, listItems, attributes);\n        },\n    },\n    def: {\n        order: currOrder++,\n        // TODO(aria): This will match without a blank line before the next\n        // block element, which is inconsistent with most of the rest of\n        // simple-markdown.\n        match: blockRegex(\n            /^ *\\[([^\\]]+)\\]: *<?([^\\s>]*)>?(?: +[\"(]([^\\n]+)[\")])? *\\n(?: *\\n)*/,\n        ),\n        parse: function (capture, parse, state) {\n            var def = capture[1].replace(/\\s+/g, \" \").toLowerCase();\n            var target = capture[2];\n            var title = capture[3];\n\n            // Look for previous links/images using this def\n            // If any links/images using this def have already been declared,\n            // they will have added themselves to the state._refs[def] list\n            // (_ to deconflict with client-defined state). We look through\n            // that list of reflinks for this def, and modify those AST nodes\n            // with our newly found information now.\n            // Sorry :(.\n            if (state._refs && state._refs[def]) {\n                // `refNode` can be a link or an image\n                state._refs[def].forEach(function (refNode: RefNode) {\n                    refNode.target = target;\n                    refNode.title = title;\n                });\n            }\n\n            // Add this def to our map of defs for any future links/images\n            // In case we haven't found any or all of the refs referring to\n            // this def yet, we add our def to the table of known defs, so\n            // that future reflinks can modify themselves appropriately with\n            // this information.\n            state._defs = state._defs || {};\n            state._defs[def] = {\n                target: target,\n                title: title,\n            };\n\n            // return the relevant parsed information\n            // for debugging only.\n            return {\n                def: def,\n                target: target,\n                title: title,\n            };\n        },\n        react: function () {\n            return null;\n        },\n        html: function () {\n            return \"\";\n        },\n    },\n    table: {\n        order: currOrder++,\n        match: blockRegex(TABLES.TABLE_REGEX),\n        parse: TABLES.parseTable,\n        react: function (node, output, state) {\n            var getStyle = function (colIndex: number): {\n                [attr: string]: Attr,\n            } {\n                return node.align[colIndex] == null\n                    ? {}\n                    : {\n                          textAlign: node.align[colIndex],\n                      };\n            };\n\n            var headers = node.header.map(function (\n                content: ASTNode,\n                i: number,\n            ) {\n                return reactElement(\"th\", \"\" + i, {\n                    style: getStyle(i),\n                    scope: \"col\",\n                    children: output(content, state),\n                });\n            });\n\n            var rows = node.cells.map(function (\n                row: Array<ASTNode>,\n                r: number,\n            ) {\n                return reactElement(\"tr\", \"\" + r, {\n                    children: row.map(function (content: ASTNode, c: number) {\n                        return reactElement(\"td\", \"\" + c, {\n                            style: getStyle(c),\n                            children: output(content, state),\n                        });\n                    }),\n                });\n            });\n\n            return reactElement(\"table\", state.key, {\n                children: [\n                    reactElement(\"thead\", \"thead\", {\n                        children: reactElement(\"tr\", null, {\n                            children: headers,\n                        }),\n                    }),\n                    reactElement(\"tbody\", \"tbody\", {\n                        children: rows,\n                    }),\n                ],\n            });\n        },\n        html: function (node, output, state) {\n            var getStyle = function (colIndex: number): string {\n                return node.align[colIndex] == null\n                    ? \"\"\n                    : \"text-align:\" + node.align[colIndex] + \";\";\n            };\n\n            var headers = node.header\n                .map(function (content: ASTNode, i: number) {\n                    return htmlTag(\"th\", output(content, state), {\n                        style: getStyle(i),\n                        scope: \"col\",\n                    });\n                })\n                .join(\"\");\n\n            var rows = node.cells\n                .map(function (row: Array<ASTNode>) {\n                    var cols = row\n                        .map(function (content: ASTNode, c: number) {\n                            return htmlTag(\"td\", output(content, state), {\n                                style: getStyle(c),\n                            });\n                        })\n                        .join(\"\");\n\n                    return htmlTag(\"tr\", cols);\n                })\n                .join(\"\");\n\n            var thead = htmlTag(\"thead\", htmlTag(\"tr\", headers));\n            var tbody = htmlTag(\"tbody\", rows);\n\n            return htmlTag(\"table\", thead + tbody);\n        },\n    },\n    newline: {\n        order: currOrder++,\n        match: blockRegex(/^(?:\\n *)*\\n/),\n        parse: ignoreCapture,\n        react: function (node, output, state) {\n            return \"\\n\";\n        },\n        html: function (node, output, state) {\n            return \"\\n\";\n        },\n    },\n    paragraph: {\n        order: currOrder++,\n        match: blockRegex(/^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/),\n        parse: parseCaptureInline,\n        react: function (node, output, state) {\n            return reactElement(\"div\", state.key, {\n                className: \"paragraph\",\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            var attributes = {\n                class: \"paragraph\",\n            };\n            return htmlTag(\"div\", output(node.content, state), attributes);\n        },\n    },\n    escape: {\n        order: currOrder++,\n        // We don't allow escaping numbers, letters, or spaces here so that\n        // backslashes used in plain text still get rendered. But allowing\n        // escaping anything else provides a very flexible escape mechanism,\n        // regardless of how this grammar is extended.\n        match: inlineRegex(/^\\\\([^0-9A-Za-z\\s])/),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"text\",\n                content: capture[1],\n            };\n        },\n        react: null,\n        html: null,\n    },\n    tableSeparator: {\n        order: currOrder++,\n        // $FlowFixMe\n        match: function (source, state) {\n            if (!state.inTable) {\n                return null;\n            }\n            return /^ *\\| */.exec(source);\n        },\n        parse: function () {\n            return {type: \"tableSeparator\"};\n        },\n        // These shouldn't be reached, but in case they are, be reasonable:\n        react: function () {\n            return \" | \";\n        },\n        html: function () {\n            return \" &vert; \";\n        },\n    },\n    autolink: {\n        order: currOrder++,\n        match: inlineRegex(/^<([^: >]+:\\/[^ >]+)>/),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"link\",\n                content: [\n                    {\n                        type: \"text\",\n                        content: capture[1],\n                    },\n                ],\n                target: capture[1],\n            };\n        },\n        react: null,\n        html: null,\n    },\n    mailto: {\n        order: currOrder++,\n        match: inlineRegex(/^<([^ >]+@[^ >]+)>/),\n        parse: function (capture, parse, state) {\n            var address = capture[1];\n            var target = capture[1];\n\n            // Check for a `mailto:` already existing in the link:\n            if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n                target = \"mailto:\" + target;\n            }\n\n            return {\n                type: \"link\",\n                content: [\n                    {\n                        type: \"text\",\n                        content: address,\n                    },\n                ],\n                target: target,\n            };\n        },\n        react: null,\n        html: null,\n    },\n    url: {\n        order: currOrder++,\n        match: inlineRegex(/^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"link\",\n                content: [\n                    {\n                        type: \"text\",\n                        content: capture[1],\n                    },\n                ],\n                target: capture[1],\n                title: undefined,\n            };\n        },\n        react: null,\n        html: null,\n    },\n    link: {\n        order: currOrder++,\n        match: inlineRegex(\n            new RegExp(\n                \"^\\\\[(\" + LINK_INSIDE + \")\\\\]\\\\(\" + LINK_HREF_AND_TITLE + \"\\\\)\",\n            ),\n        ),\n        parse: function (capture, parse, state) {\n            var link = {\n                content: parse(capture[1], state),\n                target: unescapeUrl(capture[2]),\n                title: capture[3],\n            };\n            return link;\n        },\n        react: function (node, output, state) {\n            return reactElement(\"a\", state.key, {\n                href: sanitizeUrl(node.target),\n                title: node.title,\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            var attributes = {\n                href: sanitizeUrl(node.target),\n                title: node.title,\n            };\n\n            return htmlTag(\"a\", output(node.content, state), attributes);\n        },\n    },\n    image: {\n        order: currOrder++,\n        match: inlineRegex(\n            new RegExp(\n                \"^!\\\\[(\" +\n                    LINK_INSIDE +\n                    \")\\\\]\\\\(\" +\n                    LINK_HREF_AND_TITLE +\n                    \"\\\\)\",\n            ),\n        ),\n        parse: function (capture, parse, state) {\n            var image = {\n                alt: capture[1],\n                target: unescapeUrl(capture[2]),\n                title: capture[3],\n            };\n            return image;\n        },\n        react: function (node, output, state) {\n            return reactElement(\"img\", state.key, {\n                src: sanitizeUrl(node.target),\n                alt: node.alt,\n                title: node.title,\n            });\n        },\n        html: function (node, output, state) {\n            var attributes = {\n                src: sanitizeUrl(node.target),\n                alt: node.alt,\n                title: node.title,\n            };\n\n            return htmlTag(\"img\", \"\", attributes, false);\n        },\n    },\n    reflink: {\n        order: currOrder++,\n        match: inlineRegex(\n            new RegExp(\n                // The first [part] of the link\n                \"^\\\\[(\" +\n                    LINK_INSIDE +\n                    \")\\\\]\" +\n                    // The [ref] target of the link\n                    \"\\\\s*\\\\[([^\\\\]]*)\\\\]\",\n            ),\n        ),\n        parse: function (capture, parse, state) {\n            return parseRef(capture, state, {\n                type: \"link\",\n                content: parse(capture[1], state),\n            });\n        },\n        react: null,\n        html: null,\n    },\n    refimage: {\n        order: currOrder++,\n        match: inlineRegex(\n            new RegExp(\n                // The first [part] of the link\n                \"^!\\\\[(\" +\n                    LINK_INSIDE +\n                    \")\\\\]\" +\n                    // The [ref] target of the link\n                    \"\\\\s*\\\\[([^\\\\]]*)\\\\]\",\n            ),\n        ),\n        parse: function (capture, parse, state) {\n            return parseRef(capture, state, {\n                type: \"image\",\n                alt: capture[1],\n            });\n        },\n        react: null,\n        html: null,\n    },\n    em: {\n        order: currOrder /* same as strong/u */,\n        match: inlineRegex(\n            new RegExp(\n                // only match _s surrounding words.\n                \"^\\\\b_\" +\n                    \"((?:__|\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\_])+?)_\" +\n                    \"\\\\b\" +\n                    // Or match *s:\n                    \"|\" +\n                    // Only match *s that are followed by a non-space:\n                    \"^\\\\*(?=\\\\S)(\" +\n                    // Match at least one of:\n                    \"(?:\" +\n                    //  - `**`: so that bolds inside italics don't close the\n                    //          italics\n                    \"\\\\*\\\\*|\" +\n                    //  - escape sequence: so escaped *s don't close us\n                    \"\\\\\\\\[\\\\s\\\\S]|\" +\n                    //  - whitespace: followed by a non-* (we don't\n                    //          want ' *' to close an italics--it might\n                    //          start a list)\n                    \"\\\\s+(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\s\\\\*\\\\\\\\]|\\\\*\\\\*)|\" +\n                    //  - non-whitespace, non-*, non-backslash characters\n                    \"[^\\\\s\\\\*\\\\\\\\]\" +\n                    \")+?\" +\n                    // followed by a non-space, non-* then *\n                    \")\\\\*(?!\\\\*)\",\n            ),\n        ),\n        quality: function (capture) {\n            // precedence by length, `em` wins ties:\n            return capture[0].length + 0.2;\n        },\n        parse: function (capture, parse, state) {\n            return {\n                content: parse(capture[2] || capture[1], state),\n            };\n        },\n        react: function (node, output, state) {\n            return reactElement(\"em\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"em\", output(node.content, state));\n        },\n    },\n    strong: {\n        order: currOrder /* same as em */,\n        match: inlineRegex(/^\\*\\*((?:\\\\[\\s\\S]|[^\\\\])+?)\\*\\*(?!\\*)/),\n        quality: function (capture) {\n            // precedence by length, wins ties vs `u`:\n            return capture[0].length + 0.1;\n        },\n        parse: parseCaptureInline,\n        react: function (node, output, state) {\n            return reactElement(\"strong\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"strong\", output(node.content, state));\n        },\n    },\n    u: {\n        order: currOrder++ /* same as em&strong; increment for next rule */,\n        match: inlineRegex(/^__((?:\\\\[\\s\\S]|[^\\\\])+?)__(?!_)/),\n        quality: function (capture) {\n            // precedence by length, loses all ties\n            return capture[0].length;\n        },\n        parse: parseCaptureInline,\n        react: function (node, output, state) {\n            return reactElement(\"u\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"u\", output(node.content, state));\n        },\n    },\n    del: {\n        order: currOrder++,\n        match: inlineRegex(\n            /^~~(?=\\S)((?:\\\\[\\s\\S]|~(?!~)|[^\\s~\\\\]|\\s(?!~~))+?)~~/,\n        ),\n        parse: parseCaptureInline,\n        react: function (node, output, state) {\n            return reactElement(\"del\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"del\", output(node.content, state));\n        },\n    },\n    inlineCode: {\n        order: currOrder++,\n        match: inlineRegex(/^(`+)([\\s\\S]*?[^`])\\1(?!`)/),\n        parse: function (capture, parse, state) {\n            return {\n                content: capture[2].replace(\n                    INLINE_CODE_ESCAPE_BACKTICKS_R,\n                    \"$1\",\n                ),\n            };\n        },\n        react: function (node, output, state) {\n            return reactElement(\"code\", state.key, {\n                children: node.content,\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"code\", sanitizeText(node.content));\n        },\n    },\n    br: {\n        order: currOrder++,\n        match: anyScopeRegex(/^ {2,}\\n/),\n        parse: ignoreCapture,\n        react: function (node, output, state) {\n            return reactElement(\"br\", state.key, EMPTY_PROPS);\n        },\n        html: function (node, output, state) {\n            return \"<br>\";\n        },\n    },\n    text: {\n        order: currOrder++,\n        // Here we look for anything followed by non-symbols,\n        // double newlines, or double-space-newlines\n        // We break on any symbol characters so that this grammar\n        // is easy to extend without needing to modify this regex\n        match: anyScopeRegex(\n            /^[\\s\\S]+?(?=[^0-9A-Za-z\\s\\u00c0-\\uffff]|\\n\\n| {2,}\\n|\\w+:\\S|$)/,\n        ),\n        parse: function (capture, parse, state) {\n            return {\n                content: capture[0],\n            };\n        },\n        react: function (node, output, state) {\n            return node.content;\n        },\n        html: function (node, output, state) {\n            return sanitizeText(node.content);\n        },\n    },\n};\n\n/** (deprecated) */\nvar ruleOutput = function (\n    // $FlowFixMe\n    rules: OutputRules<Rule>,\n    property: $Keys<Rule>,\n) {\n    if (!property && typeof console !== \"undefined\") {\n        console.warn(\n            \"simple-markdown ruleOutput should take 'react' or \" +\n                \"'html' as the second argument.\",\n        );\n    }\n\n    var nestedRuleOutput = function (\n        ast: SingleASTNode,\n        outputFunc: Output<any>,\n        state: State,\n    ) {\n        return rules[ast.type][property](ast, outputFunc, state);\n    };\n    return nestedRuleOutput;\n};\n\n/** (deprecated)\n */\nvar reactFor = function (outputFunc: ReactNodeOutput): ReactOutput {\n    var nestedOutput: ReactOutput = function (ast, state) {\n        state = state || {};\n        if (Array.isArray(ast)) {\n            var oldKey = state.key;\n            var result: Array<ReactElements> = [];\n\n            // map nestedOutput over the ast, except group any text\n            // nodes together into a single string output.\n            var lastResult = null;\n            for (var i = 0; i < ast.length; i++) {\n                state.key = \"\" + i;\n                var nodeOut = nestedOutput(ast[i], state);\n                if (\n                    typeof nodeOut === \"string\" &&\n                    typeof lastResult === \"string\"\n                ) {\n                    lastResult = lastResult + nodeOut;\n                    result[result.length - 1] = lastResult;\n                } else {\n                    result.push(nodeOut);\n                    lastResult = nodeOut;\n                }\n            }\n\n            state.key = oldKey;\n            return result;\n        } else {\n            return outputFunc(ast, nestedOutput, state);\n        }\n    };\n    return nestedOutput;\n};\n\n/** (deprecated)\n */\nvar htmlFor = function (outputFunc: HtmlNodeOutput): HtmlOutput {\n    var nestedOutput: HtmlOutput = function (ast, state) {\n        state = state || {};\n        if (Array.isArray(ast)) {\n            return ast\n                .map(function (node) {\n                    return nestedOutput(node, state);\n                })\n                .join(\"\");\n        } else {\n            return outputFunc(ast, nestedOutput, state);\n        }\n    };\n    return nestedOutput;\n};\n\nvar outputFor = function (\n    rules: OutputRules<Rule>,\n    property: $Keys<Rule>,\n    defaultState: ?State = {},\n) {\n    if (!property) {\n        throw new Error(\n            \"simple-markdown: outputFor: `property` must be \" +\n                \"defined. \" +\n                \"if you just upgraded, you probably need to replace `outputFor` \" +\n                \"with `reactFor`\",\n        );\n    }\n\n    var latestState: State;\n    // $FlowFixMe[incompatible-type]\n    var arrayRule: ArrayRule = rules.Array || defaultRules.Array;\n\n    // Tricks to convince tsc that this var is not null:\n    var arrayRuleCheck = arrayRule[property];\n    if (!arrayRuleCheck) {\n        throw new Error(\n            \"simple-markdown: outputFor: to join nodes of type `\" +\n                property +\n                \"` you must provide an `Array:` joiner rule with that type, \" +\n                \"Please see the docs for details on specifying an Array rule.\",\n        );\n    }\n    var arrayRuleOutput = arrayRuleCheck;\n\n    var nestedOutput: Output<any> = function (ast, state) {\n        state = state || latestState;\n        latestState = state;\n        if (Array.isArray(ast)) {\n            return arrayRuleOutput(ast, nestedOutput, state);\n        } else {\n            return rules[ast.type][property](ast, nestedOutput, state);\n        }\n    };\n\n    var outerOutput: Output<any> = function (ast, state) {\n        latestState = populateInitialState(state, defaultState);\n        return nestedOutput(ast, latestState);\n    };\n    return outerOutput;\n};\n\n// $FlowFixMe[incompatible-call]\nvar defaultRawParse = parserFor(defaultRules);\n\nvar defaultBlockParse = function (\n    source: string,\n    state: ?State,\n): Array<SingleASTNode> {\n    state = state || {};\n    state.inline = false;\n    return defaultRawParse(source, state);\n};\n\nvar defaultInlineParse = function (\n    source: string,\n    state: ?State,\n): Array<SingleASTNode> {\n    state = state || {};\n    state.inline = true;\n    return defaultRawParse(source, state);\n};\n\nvar defaultImplicitParse = function (\n    source: string,\n    state: ?State,\n): Array<SingleASTNode> {\n    var isBlock = BLOCK_END_R.test(source);\n    state = state || {};\n    state.inline = !isBlock;\n    return defaultRawParse(source, state);\n};\n\n// $FlowFixMe[incompatible-call]\nvar defaultReactOutput: ReactOutput = outputFor(defaultRules, \"react\");\n// $FlowFixMe[incompatible-call]\nvar defaultHtmlOutput: HtmlOutput = outputFor(defaultRules, \"html\");\n\nvar markdownToReact = function (source: string, state: ?State): ReactElements {\n    return defaultReactOutput(defaultBlockParse(source, state), state);\n};\n\nvar markdownToHtml = function (source: string, state: ?State): string {\n    return defaultHtmlOutput(defaultBlockParse(source, state), state);\n};\n\n// TODO: This needs definition\ntype ReactMarkdownProps = any;\nvar ReactMarkdown = function (props: ReactMarkdownProps): ReactElement {\n    var divProps = {};\n\n    for (var prop in props) {\n        if (\n            prop !== \"source\" &&\n            // $FlowFixMe\n            Object.prototype.hasOwnProperty.call(props, prop)\n        ) {\n            divProps[prop] = props[prop];\n        }\n    }\n    divProps.children = markdownToReact(props.source);\n\n    return reactElement(\"div\", null, divProps);\n};\n\ntype Exports = {\n    +defaultRules: DefaultRules,\n    +parserFor: (rules: ParserRules, defaultState?: ?State) => Parser,\n    +outputFor: <Rule: Object>(\n        rules: OutputRules<Rule>,\n        param: $Keys<Rule>,\n        defaultState?: ?State,\n    ) => Output<any>,\n\n    +ruleOutput: <Rule: Object>(\n        rules: OutputRules<Rule>,\n        param: $Keys<Rule>,\n    ) => NodeOutput<any>,\n    +reactFor: (ReactNodeOutput) => ReactOutput,\n    +htmlFor: (HtmlNodeOutput) => HtmlOutput,\n\n    +inlineRegex: (regex: RegExp) => MatchFunction,\n    +blockRegex: (regex: RegExp) => MatchFunction,\n    +anyScopeRegex: (regex: RegExp) => MatchFunction,\n    +parseInline: (parse: Parser, content: string, state: State) => ASTNode,\n    +parseBlock: (parse: Parser, content: string, state: State) => ASTNode,\n\n    +markdownToReact: (source: string, state?: ?State) => ReactElements,\n    +markdownToHtml: (source: string, state?: ?State) => string,\n    +ReactMarkdown: (props: {source: string, [string]: any}) => ReactElement,\n\n    +defaultRawParse: (source: string, state?: ?State) => Array<SingleASTNode>,\n    +defaultBlockParse: (\n        source: string,\n        state?: ?State,\n    ) => Array<SingleASTNode>,\n    +defaultInlineParse: (\n        source: string,\n        state?: ?State,\n    ) => Array<SingleASTNode>,\n    +defaultImplicitParse: (\n        source: string,\n        state?: ?State,\n    ) => Array<SingleASTNode>,\n\n    +defaultReactOutput: ReactOutput,\n    +defaultHtmlOutput: HtmlOutput,\n\n    +preprocess: (source: string) => string,\n    +sanitizeText: (text: Attr) => string,\n    +sanitizeUrl: (url: ?string) => ?string,\n    +unescapeUrl: (url: string) => string,\n    +htmlTag: (\n        tagName: string,\n        content: string,\n        attributes: ?{[any]: ?Attr},\n        isClosed: ?boolean,\n    ) => string,\n    +reactElement: (\n        type: string,\n        key: string | null,\n        props: {[string]: any},\n    ) => ReactElement,\n};\n\nexport type {\n    // Hopefully you shouldn't have to use these, but they're here if you need!\n    // Top-level API:\n    State,\n    Parser,\n    Output,\n    ReactOutput,\n    HtmlOutput,\n    // Most of the following types should be considered experimental and\n    // subject to change or change names. Again, they shouldn't be necessary,\n    // but if they are I'd love to hear how so I can better support them!\n\n    // Individual Rule fields:\n    Capture,\n    MatchFunction,\n    ParseFunction,\n    NodeOutput,\n    ArrayNodeOutput,\n    ReactNodeOutput,\n    // Single rules:\n    ParserRule,\n    ReactOutputRule,\n    HtmlOutputRule,\n    // Sets of rules:\n    ParserRules,\n    OutputRules,\n    Rules,\n    ReactRules,\n    HtmlRules,\n    SingleASTNode,\n};\n\n// $FlowFixMe\nvar SimpleMarkdown: Exports = {\n    defaultRules: defaultRules,\n    parserFor: parserFor,\n    outputFor: outputFor,\n\n    inlineRegex: inlineRegex,\n    blockRegex: blockRegex,\n    anyScopeRegex: anyScopeRegex,\n    parseInline: parseInline,\n    parseBlock: parseBlock,\n\n    // default wrappers:\n    markdownToReact: markdownToReact,\n    markdownToHtml: markdownToHtml,\n    ReactMarkdown: ReactMarkdown,\n\n    defaultBlockParse: defaultBlockParse,\n    defaultInlineParse: defaultInlineParse,\n    defaultImplicitParse: defaultImplicitParse,\n\n    defaultReactOutput: defaultReactOutput,\n    defaultHtmlOutput: defaultHtmlOutput,\n\n    preprocess: preprocess,\n    sanitizeText: sanitizeText,\n    sanitizeUrl: sanitizeUrl,\n    unescapeUrl: unescapeUrl,\n    htmlTag: htmlTag,\n    reactElement: reactElement,\n\n    // deprecated:\n    defaultRawParse: defaultRawParse,\n    ruleOutput: ruleOutput,\n    reactFor: reactFor,\n    htmlFor: htmlFor,\n\n    defaultParse: function () {\n        if (typeof console !== \"undefined\") {\n            console.warn(\n                \"defaultParse is deprecated, please use `defaultImplicitParse`\",\n            );\n        }\n        return defaultImplicitParse.apply(null, (arguments: any));\n    },\n    defaultOutput: function () {\n        if (typeof console !== \"undefined\") {\n            console.warn(\n                \"defaultOutput is deprecated, please use `defaultReactOutput`\",\n            );\n        }\n        return defaultReactOutput.apply(null, (arguments: any));\n    },\n};\n\nexport default SimpleMarkdown;\n"],"names":["$c06f129853951c16$var$markdownToLines","markdown","preprocessedMarkdown","replace","$c06f129853951c16$var$preprocessMarkdown","syntaxTree","mdParse","$6Radu","default","defaultBlockParse","lines","currentLine","processNode","node","parentType","type","content","split","forEach","textLine","index","push","word","contentNode","treeNode","$c06f129853951c16$var$createTspan","textElement","lineIndex","lineHeight","append","attr","$c06f129853951c16$var$updateTextContentAndStyles","tspan","wrappedLine","text","innerTspan","$c06f129853951c16$export$db3b6bfb95261072","el","style","isTitle","classes","useHtmlLabels","isNode","width","addSvgBackground","$jmbVX","l","info","htmlText","map","output","join","vertexNode","element","fo","div","label","labelClass","dom","styleFn","html","labelStyle","bbox","getBoundingClientRect","height","$c06f129853951c16$var$addHtmlSpan","$eCa9q","d","s","structuredText","special","lastWord","line","includes","svgLabel","g","addBackground","labelGroup","bkg","insert","currentWord","words","reverse","length","pop","getComputedTextLength","getBBox","padding","$c06f129853951c16$var$createFormattedText","TABLE_ROW_SEPARATOR_TRIM","TABLE_CELL_END_TRIM","TABLE_RIGHT_ALIGN","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","parseTableAlignCapture","parseTableRow","parseTable","CR_NEWLINE_R","TAB_R","FORMFEED_R","preprocess","source","populateInitialState","givenState","defaultState","state","prop","Object","prototype","hasOwnProperty","call","parserFor","rules","latestState","ruleList","keys","filter","rule","match","order","isFinite","console","warn","String","sort","typeA","typeB","ruleA","ruleB","orderA","orderB","secondaryOrderA","quality","secondaryOrderB","nestedParse","result","ruleType","capture","NaN","i","currRuleType","currRule","currOrder","prevCaptureStr","prevCapture","currCapture","currQuality","Error","parsed","parse","Array","isArray","apply","substring","inline","disableAutoBlockNewlines","inlineRegex","regex","exec","blockRegex","anyScopeRegex","TYPE_SYMBOL","Symbol","for","reactElement","key","props","$$typeof","undefined","ref","_owner","htmlTag","tagName","attributes","isClosed","attributeString","attribute","sanitizeText","unclosedTag","EMPTY_PROPS","sanitizeUrl","url","prot","URL","protocol","indexOf","e","SANITIZE_TEXT_R","SANITIZE_TEXT_CODES","chr","UNESCAPE_URL_R","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","parseCaptureInline","ignoreCapture","LIST_BULLET","LIST_ITEM_PREFIX","LIST_ITEM_PREFIX_R","RegExp","LIST_ITEM_R","BLOCK_END_R","INLINE_CODE_ESCAPE_BACKTICKS_R","LIST_BLOCK_END_R","LIST_ITEM_END_R","LIST_R","LIST_LOOKBEHIND_R","TABLES","alignCapture","test","trimEndSeparators","prevInTable","inTable","tableRow","trim","cells","header","align","parseTableAlign","rowText","parseTableCells","parseNpTable","TABLE_REGEX","NPTABLE_REGEX","LINK_INSIDE","LINK_HREF_AND_TITLE","AUTOLINK_MAILTO_CHECK_R","parseRef","refNode","toLowerCase","_defs","def","target","title","_refs","defaultRules","react","arr","oldKey","heading","_parse","_x","_x2","_x3","this","arguments","toString","level","children","nptable","lheading","_parse2","_x4","_x5","_x6","hr","codeBlock","_parse3","_x7","_x8","_x9","lang","className","class","fence","_parse4","_x10","_x11","_x12","blockQuote","_parse5","_x13","_x14","_x15","list","isStartOfLineCapture","isListBlock","_list","_parse6","_x16","_x17","_x18","bullet","ordered","start","items","lastItemWasAParagraph","item","prefixCapture","space","spaceRegex","isLastItem","thisItemIsAParagraph","adjustedContent","oldStateInline","oldStateList","ListWrapper","listItems","listTag","_parse7","_x19","_x20","_x21","table","getStyle","colIndex","textAlign","headers","scope","rows","row","r","c","cols","thead","tbody","newline","paragraph","escape","_parse8","_x22","_x23","_x24","tableSeparator","autolink","_parse9","_x25","_x26","_x27","mailto","_parse10","_x28","_x29","_x30","address","_parse11","_x31","_x32","_x33","link","_parse12","_x34","_x35","_x36","href","image","_parse13","_x37","_x38","_x39","alt","src","reflink","_parse14","_x40","_x41","_x42","refimage","_parse15","_x43","_x44","_x45","em","_parse16","_x46","_x47","_x48","strong","u","del","inlineCode","_parse17","_x49","_x50","_x51","br","_parse18","_x52","_x53","_x54","outputFor","property","arrayRule","arrayRuleCheck","arrayRuleOutput","nestedOutput","ast","defaultRawParse","defaultImplicitParse","isBlock","defaultReactOutput","defaultHtmlOutput","markdownToReact","SimpleMarkdown","parseBlock","markdownToHtml","ReactMarkdown","divProps","defaultInlineParse","ruleOutput","outputFunc","reactFor","lastResult","nodeOut","htmlFor","defaultParse","defaultOutput"],"version":3,"file":"flowDiagram-46a15f6f.f49ce2de.js.map"}