{"mappings":"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","sources":["node_modules/mermaid/src/diagrams/flowchart/flowChartShapes.js","node_modules/mermaid/src/diagrams/flowchart/flowRenderer.js","node_modules/mermaid/src/diagrams/flowchart/flowDiagram.ts","node_modules/dagre-d3-es/src/index.js","node_modules/dagre-d3-es/src/dagre-js/render.js","node_modules/dagre-d3-es/src/dagre-js/arrows.js","node_modules/dagre-d3-es/src/dagre-js/create-clusters.js","node_modules/dagre-d3-es/src/dagre-js/label/add-label.js","node_modules/dagre-d3-es/src/dagre-js/label/add-svg-label.js","node_modules/dagre-d3-es/src/dagre-js/label/add-text-label.js","node_modules/dagre-d3-es/src/dagre-js/create-edge-labels.js","node_modules/dagre-d3-es/src/dagre-js/create-edge-paths.js","node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-node.js","node_modules/dagre-d3-es/src/dagre-js/create-nodes.js","node_modules/dagre-d3-es/src/dagre-js/position-clusters.js","node_modules/dagre-d3-es/src/dagre-js/position-edge-labels.js","node_modules/dagre-d3-es/src/dagre-js/position-nodes.js","node_modules/dagre-d3-es/src/dagre-js/shapes.js","node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-circle.js","node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-ellipse.js","node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-polygon.js","node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-line.js","node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-rect.js","node_modules/dagre-d3-es/src/dagre-js/intersect/index.js","node_modules/mermaid/src/diagrams/flowchart/flowRenderer-v2.js","node_modules/mermaid/src/diagrams/flowchart/styles.ts","node_modules/mermaid/src/diagrams/class/svgDraw.js","node_modules/lodash-es/_getPrototype.js","node_modules/lodash-es/isPlainObject.js"],"sourcesContent":["import { intersectPolygon } from 'dagre-d3-es/src/dagre-js/intersect/intersect-polygon.js';\nimport { intersectRect } from 'dagre-d3-es/src/dagre-js/intersect/intersect-rect.js';\n\n/**\n * @param parent\n * @param bbox\n * @param node\n */\nfunction question(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const s = (w + h) * 0.9;\n  const points = [\n    { x: s / 2, y: 0 },\n    { x: s, y: -s / 2 },\n    { x: s / 2, y: -s },\n    { x: 0, y: -s / 2 },\n  ];\n  const shapeSvg = insertPolygonShape(parent, s, s, points);\n  node.intersect = function (point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\n\n/**\n * @param parent\n * @param bbox\n * @param node\n */\nfunction hexagon(parent, bbox, node) {\n  const f = 4;\n  const h = bbox.height;\n  const m = h / f;\n  const w = bbox.width + 2 * m;\n  const points = [\n    { x: m, y: 0 },\n    { x: w - m, y: 0 },\n    { x: w, y: -h / 2 },\n    { x: w - m, y: -h },\n    { x: m, y: -h },\n    { x: 0, y: -h / 2 },\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function (point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\n\n/**\n * @param parent\n * @param bbox\n * @param node\n */\nfunction rect_left_inv_arrow(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: -h / 2, y: 0 },\n    { x: w, y: 0 },\n    { x: w, y: -h },\n    { x: -h / 2, y: -h },\n    { x: 0, y: -h / 2 },\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function (point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\n\n/**\n * @param parent\n * @param bbox\n * @param node\n */\nfunction lean_right(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: (-2 * h) / 6, y: 0 },\n    { x: w - h / 6, y: 0 },\n    { x: w + (2 * h) / 6, y: -h },\n    { x: h / 6, y: -h },\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function (point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\n\n/**\n * @param parent\n * @param bbox\n * @param node\n */\nfunction lean_left(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: (2 * h) / 6, y: 0 },\n    { x: w + h / 6, y: 0 },\n    { x: w - (2 * h) / 6, y: -h },\n    { x: -h / 6, y: -h },\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function (point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\n\n/**\n * @param parent\n * @param bbox\n * @param node\n */\nfunction trapezoid(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: (-2 * h) / 6, y: 0 },\n    { x: w + (2 * h) / 6, y: 0 },\n    { x: w - h / 6, y: -h },\n    { x: h / 6, y: -h },\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function (point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\n\n/**\n * @param parent\n * @param bbox\n * @param node\n */\nfunction inv_trapezoid(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: h / 6, y: 0 },\n    { x: w - h / 6, y: 0 },\n    { x: w + (2 * h) / 6, y: -h },\n    { x: (-2 * h) / 6, y: -h },\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function (point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\n\n/**\n * @param parent\n * @param bbox\n * @param node\n */\nfunction rect_right_inv_arrow(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: 0, y: 0 },\n    { x: w + h / 2, y: 0 },\n    { x: w, y: -h / 2 },\n    { x: w + h / 2, y: -h },\n    { x: 0, y: -h },\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function (point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\n\n/**\n * @param parent\n * @param bbox\n * @param node\n */\nfunction stadium(parent, bbox, node) {\n  const h = bbox.height;\n  const w = bbox.width + h / 4;\n\n  const shapeSvg = parent\n    .insert('rect', ':first-child')\n    .attr('rx', h / 2)\n    .attr('ry', h / 2)\n    .attr('x', -w / 2)\n    .attr('y', -h / 2)\n    .attr('width', w)\n    .attr('height', h);\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n}\n\n/**\n * @param parent\n * @param bbox\n * @param node\n */\nfunction subroutine(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: 0, y: 0 },\n    { x: w, y: 0 },\n    { x: w, y: -h },\n    { x: 0, y: -h },\n    { x: 0, y: 0 },\n    { x: -8, y: 0 },\n    { x: w + 8, y: 0 },\n    { x: w + 8, y: -h },\n    { x: -8, y: -h },\n    { x: -8, y: 0 },\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function (point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\n\n/**\n * @param parent\n * @param bbox\n * @param node\n */\nfunction cylinder(parent, bbox, node) {\n  const w = bbox.width;\n  const rx = w / 2;\n  const ry = rx / (2.5 + w / 50);\n  const h = bbox.height + ry;\n\n  const shape =\n    'M 0,' +\n    ry +\n    ' a ' +\n    rx +\n    ',' +\n    ry +\n    ' 0,0,0 ' +\n    w +\n    ' 0 a ' +\n    rx +\n    ',' +\n    ry +\n    ' 0,0,0 ' +\n    -w +\n    ' 0 l 0,' +\n    h +\n    ' a ' +\n    rx +\n    ',' +\n    ry +\n    ' 0,0,0 ' +\n    w +\n    ' 0 l 0,' +\n    -h;\n\n  const shapeSvg = parent\n    .attr('label-offset-y', ry)\n    .insert('path', ':first-child')\n    .attr('d', shape)\n    .attr('transform', 'translate(' + -w / 2 + ',' + -(h / 2 + ry) + ')');\n\n  node.intersect = function (point) {\n    const pos = intersectRect(node, point);\n    const x = pos.x - node.x;\n\n    if (\n      rx != 0 &&\n      (Math.abs(x) < node.width / 2 ||\n        (Math.abs(x) == node.width / 2 && Math.abs(pos.y - node.y) > node.height / 2 - ry))\n    ) {\n      // ellipsis equation: x*x / a*a + y*y / b*b = 1\n      // solve for y to get adjusted value for pos.y\n      let y = ry * ry * (1 - (x * x) / (rx * rx));\n      if (y != 0) {\n        y = Math.sqrt(y);\n      }\n      y = ry - y;\n      if (point.y - node.y > 0) {\n        y = -y;\n      }\n\n      pos.y += y;\n    }\n\n    return pos;\n  };\n\n  return shapeSvg;\n}\n\n/** @param render */\nexport function addToRender(render) {\n  render.shapes().question = question;\n  render.shapes().hexagon = hexagon;\n  render.shapes().stadium = stadium;\n  render.shapes().subroutine = subroutine;\n  render.shapes().cylinder = cylinder;\n\n  // Add custom shape for box with inverted arrow on left side\n  render.shapes().rect_left_inv_arrow = rect_left_inv_arrow;\n\n  // Add custom shape for box with inverted arrow on left side\n  render.shapes().lean_right = lean_right;\n\n  // Add custom shape for box with inverted arrow on left side\n  render.shapes().lean_left = lean_left;\n\n  // Add custom shape for box with inverted arrow on left side\n  render.shapes().trapezoid = trapezoid;\n\n  // Add custom shape for box with inverted arrow on left side\n  render.shapes().inv_trapezoid = inv_trapezoid;\n\n  // Add custom shape for box with inverted arrow on right side\n  render.shapes().rect_right_inv_arrow = rect_right_inv_arrow;\n}\n\n/** @param addShape */\nexport function addToRenderV2(addShape) {\n  addShape({ question });\n  addShape({ hexagon });\n  addShape({ stadium });\n  addShape({ subroutine });\n  addShape({ cylinder });\n\n  // Add custom shape for box with inverted arrow on left side\n  addShape({ rect_left_inv_arrow });\n\n  // Add custom shape for box with inverted arrow on left side\n  addShape({ lean_right });\n\n  // Add custom shape for box with inverted arrow on left side\n  addShape({ lean_left });\n\n  // Add custom shape for box with inverted arrow on left side\n  addShape({ trapezoid });\n\n  // Add custom shape for box with inverted arrow on left side\n  addShape({ inv_trapezoid });\n\n  // Add custom shape for box with inverted arrow on right side\n  addShape({ rect_right_inv_arrow });\n}\n\n/**\n * @param parent\n * @param w\n * @param h\n * @param points\n */\nfunction insertPolygonShape(parent, w, h, points) {\n  return parent\n    .insert('polygon', ':first-child')\n    .attr(\n      'points',\n      points\n        .map(function (d) {\n          return d.x + ',' + d.y;\n        })\n        .join(' ')\n    )\n    .attr('transform', 'translate(' + -w / 2 + ',' + h / 2 + ')');\n}\n\nexport default {\n  addToRender,\n  addToRenderV2,\n};\n","import * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { select, curveLinear, selectAll } from 'd3';\nimport { getConfig } from '../../config';\nimport { render as Render } from 'dagre-d3-es';\nimport { applyStyle } from 'dagre-d3-es/src/dagre-js/util.js';\nimport { addHtmlLabel } from 'dagre-d3-es/src/dagre-js/label/add-html-label.js';\nimport { log } from '../../logger';\nimport common, { evaluate } from '../common/common';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\nimport flowChartShapes from './flowChartShapes';\n\nconst conf = {};\nexport const setConf = function (cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    conf[key] = cnf[key];\n  }\n};\n\n/**\n * Function that adds the vertices found in the graph definition to the graph to be rendered.\n *\n * @param vert Object containing the vertices.\n * @param g The graph that is to be drawn.\n * @param svgId\n * @param root\n * @param _doc\n * @param diagObj\n */\nexport const addVertices = function (vert, g, svgId, root, _doc, diagObj) {\n  const svg = !root ? select(`[id=\"${svgId}\"]`) : root.select(`[id=\"${svgId}\"]`);\n  const doc = !_doc ? document : _doc;\n  const keys = Object.keys(vert);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  keys.forEach(function (id) {\n    const vertex = vert[id];\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     * @type {string}\n     */\n    let classStr = 'default';\n    if (vertex.classes.length > 0) {\n      classStr = vertex.classes.join(' ');\n    }\n\n    const styles = getStylesFromArray(vertex.styles);\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    let vertexText = vertex.text !== undefined ? vertex.text : vertex.id;\n\n    // We create a SVG label, either by delegating to addHtmlLabel or manually\n    let vertexNode;\n    if (evaluate(getConfig().flowchart.htmlLabels)) {\n      // TODO: addHtmlLabel accepts a labelStyle. Do we possibly have that?\n      const node = {\n        label: vertexText.replace(\n          /fa[blrs]?:fa-[\\w-]+/g,\n          (s) => `<i class='${s.replace(':', ' ')}'></i>`\n        ),\n      };\n      vertexNode = addHtmlLabel(svg, node).node();\n      vertexNode.parentNode.removeChild(vertexNode);\n    } else {\n      const svgLabel = doc.createElementNS('http://www.w3.org/2000/svg', 'text');\n      svgLabel.setAttribute('style', styles.labelStyle.replace('color:', 'fill:'));\n\n      const rows = vertexText.split(common.lineBreakRegex);\n\n      for (const row of rows) {\n        const tspan = doc.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n        tspan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');\n        tspan.setAttribute('dy', '1em');\n        tspan.setAttribute('x', '1');\n        tspan.textContent = row;\n        svgLabel.appendChild(tspan);\n      }\n      vertexNode = svgLabel;\n    }\n\n    let radious = 0;\n    let _shape = '';\n    // Set the shape based parameters\n    switch (vertex.type) {\n      case 'round':\n        radious = 5;\n        _shape = 'rect';\n        break;\n      case 'square':\n        _shape = 'rect';\n        break;\n      case 'diamond':\n        _shape = 'question';\n        break;\n      case 'hexagon':\n        _shape = 'hexagon';\n        break;\n      case 'odd':\n        _shape = 'rect_left_inv_arrow';\n        break;\n      case 'lean_right':\n        _shape = 'lean_right';\n        break;\n      case 'lean_left':\n        _shape = 'lean_left';\n        break;\n      case 'trapezoid':\n        _shape = 'trapezoid';\n        break;\n      case 'inv_trapezoid':\n        _shape = 'inv_trapezoid';\n        break;\n      case 'odd_right':\n        _shape = 'rect_left_inv_arrow';\n        break;\n      case 'circle':\n        _shape = 'circle';\n        break;\n      case 'ellipse':\n        _shape = 'ellipse';\n        break;\n      case 'stadium':\n        _shape = 'stadium';\n        break;\n      case 'subroutine':\n        _shape = 'subroutine';\n        break;\n      case 'cylinder':\n        _shape = 'cylinder';\n        break;\n      case 'group':\n        _shape = 'rect';\n        break;\n      default:\n        _shape = 'rect';\n    }\n    // Add the node\n    log.warn('Adding node', vertex.id, vertex.domId);\n    g.setNode(diagObj.db.lookUpDomId(vertex.id), {\n      labelType: 'svg',\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      label: vertexNode,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: diagObj.db.lookUpDomId(vertex.id),\n    });\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param {object} edges The edges to add to the graph\n * @param {object} g The graph object\n * @param diagObj\n */\nexport const addEdges = function (edges, g, diagObj) {\n  let cnt = 0;\n\n  let defaultStyle;\n  let defaultLabelStyle;\n\n  if (edges.defaultStyle !== undefined) {\n    const defaultStyles = getStylesFromArray(edges.defaultStyle);\n    defaultStyle = defaultStyles.style;\n    defaultLabelStyle = defaultStyles.labelStyle;\n  }\n\n  edges.forEach(function (edge) {\n    cnt++;\n\n    // Identify Link\n    var linkId = 'L-' + edge.start + '-' + edge.end;\n    var linkNameStart = 'LS-' + edge.start;\n    var linkNameEnd = 'LE-' + edge.end;\n\n    const edgeData = {};\n\n    // Set link type for rendering\n    if (edge.type === 'arrow_open') {\n      edgeData.arrowhead = 'none';\n    } else {\n      edgeData.arrowhead = 'normal';\n    }\n\n    let style = '';\n    let labelStyle = '';\n\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      style = styles.style;\n      labelStyle = styles.labelStyle;\n    } else {\n      switch (edge.stroke) {\n        case 'normal':\n          style = 'fill:none';\n          if (defaultStyle !== undefined) {\n            style = defaultStyle;\n          }\n          if (defaultLabelStyle !== undefined) {\n            labelStyle = defaultLabelStyle;\n          }\n          break;\n        case 'dotted':\n          style = 'fill:none;stroke-width:2px;stroke-dasharray:3;';\n          break;\n        case 'thick':\n          style = ' stroke-width: 3.5px;fill:none';\n          break;\n      }\n    }\n\n    edgeData.style = style;\n    edgeData.labelStyle = labelStyle;\n\n    if (edge.interpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (edges.defaultInterpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(edges.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n\n      if (evaluate(getConfig().flowchart.htmlLabels)) {\n        edgeData.labelType = 'html';\n        edgeData.label = `<span id=\"L-${linkId}\" class=\"edgeLabel L-${linkNameStart}' L-${linkNameEnd}\" style=\"${\n          edgeData.labelStyle\n        }\">${edge.text.replace(\n          /fa[blrs]?:fa-[\\w-]+/g,\n          (s) => `<i class='${s.replace(':', ' ')}'></i>`\n        )}</span>`;\n      } else {\n        edgeData.labelType = 'text';\n        edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n        if (edge.style === undefined) {\n          edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none';\n        }\n\n        edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n      }\n    }\n\n    edgeData.id = linkId;\n    edgeData.class = linkNameStart + ' ' + linkNameEnd;\n    edgeData.minlen = edge.length || 1;\n\n    // Add the edge to the graph\n    g.setEdge(diagObj.db.lookUpDomId(edge.start), diagObj.db.lookUpDomId(edge.end), edgeData, cnt);\n  });\n};\n\n/**\n * Returns the all the styles from classDef statements in the graph definition.\n *\n * @param text\n * @param diagObj\n * @returns {object} ClassDef styles\n */\nexport const getClasses = function (text, diagObj) {\n  log.info('Extracting classes');\n  diagObj.db.clear();\n  try {\n    // Parse the graph definition\n    diagObj.parse(text);\n    return diagObj.db.getClasses();\n  } catch (e) {\n    log.error(e);\n    return {};\n  }\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param text\n * @param id\n * @param _version\n * @param diagObj\n */\nexport const draw = function (text, id, _version, diagObj) {\n  log.info('Drawing flowchart');\n  diagObj.db.clear();\n  const { securityLevel, flowchart: conf } = getConfig();\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n\n  // Parse the graph definition\n  try {\n    diagObj.parser.parse(text);\n  } catch (err) {\n    log.debug('Parsing failed');\n  }\n\n  // Fetch the default direction, use TD if none was found\n  let dir = diagObj.db.getDirection();\n  if (dir === undefined) {\n    dir = 'TD';\n  }\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n\n  // Create the input mermaid.graph\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: dir,\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 8,\n      marginy: 8,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  let subG;\n  const subGraphs = diagObj.db.getSubGraphs();\n  for (let i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n    diagObj.db.addVertex(subG.id, subG.title, 'group', undefined, subG.classes);\n  }\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const vert = diagObj.db.getVertices();\n  log.warn('Get vertices', vert);\n\n  const edges = diagObj.db.getEdges();\n\n  let i = 0;\n  for (i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n\n    selectAll('cluster').append('text');\n\n    for (let j = 0; j < subG.nodes.length; j++) {\n      log.warn(\n        'Setting subgraph',\n        subG.nodes[j],\n        diagObj.db.lookUpDomId(subG.nodes[j]),\n        diagObj.db.lookUpDomId(subG.id)\n      );\n      g.setParent(diagObj.db.lookUpDomId(subG.nodes[j]), diagObj.db.lookUpDomId(subG.id));\n    }\n  }\n  addVertices(vert, g, id, root, doc, diagObj);\n  addEdges(edges, g, diagObj);\n\n  // Create the renderer\n  const render = new Render();\n\n  // Add custom shapes\n  flowChartShapes.addToRender(render);\n\n  // Add our custom arrow - an empty arrowhead\n  render.arrows().none = function normal(parent, id, edge, type) {\n    const marker = parent\n      .append('marker')\n      .attr('id', id)\n      .attr('viewBox', '0 0 10 10')\n      .attr('refX', 9)\n      .attr('refY', 5)\n      .attr('markerUnits', 'strokeWidth')\n      .attr('markerWidth', 8)\n      .attr('markerHeight', 6)\n      .attr('orient', 'auto');\n\n    const path = marker.append('path').attr('d', 'M 0 0 L 0 0 L 0 0 z');\n    applyStyle(path, edge[type + 'Style']);\n  };\n\n  // Override normal arrowhead defined in d3. Remove style & add class to allow css styling.\n  render.arrows().normal = function normal(parent, id) {\n    const marker = parent\n      .append('marker')\n      .attr('id', id)\n      .attr('viewBox', '0 0 10 10')\n      .attr('refX', 9)\n      .attr('refY', 5)\n      .attr('markerUnits', 'strokeWidth')\n      .attr('markerWidth', 8)\n      .attr('markerHeight', 6)\n      .attr('orient', 'auto');\n\n    marker\n      .append('path')\n      .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n      .attr('class', 'arrowheadPath')\n      .style('stroke-width', 1)\n      .style('stroke-dasharray', '1,0');\n  };\n\n  // Set up an SVG group so that we can translate the final graph.\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  const element = root.select('#' + id + ' g');\n  render(element, g);\n\n  element.selectAll('g.node').attr('title', function () {\n    return diagObj.db.getTooltip(this.id);\n  });\n\n  // Index nodes\n  diagObj.db.indexNodes('subGraph' + i);\n\n  // reposition labels\n  for (i = 0; i < subGraphs.length; i++) {\n    subG = subGraphs[i];\n    if (subG.title !== 'undefined') {\n      const clusterRects = doc.querySelectorAll(\n        '#' + id + ' [id=\"' + diagObj.db.lookUpDomId(subG.id) + '\"] rect'\n      );\n      const clusterEl = doc.querySelectorAll(\n        '#' + id + ' [id=\"' + diagObj.db.lookUpDomId(subG.id) + '\"]'\n      );\n\n      const xPos = clusterRects[0].x.baseVal.value;\n      const yPos = clusterRects[0].y.baseVal.value;\n      const _width = clusterRects[0].width.baseVal.value;\n      const cluster = select(clusterEl[0]);\n      const te = cluster.select('.label');\n      te.attr('transform', `translate(${xPos + _width / 2}, ${yPos + 14})`);\n      te.attr('id', id + 'Text');\n\n      for (let j = 0; j < subG.classes.length; j++) {\n        clusterEl[0].classList.add(subG.classes[j]);\n      }\n    }\n  }\n\n  // Add label rects for non html labels\n  if (!conf.htmlLabels) {\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n      // rect.setAttribute('style', 'fill:#e8e8e8;');\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n  setupGraphViewbox(g, svg, conf.diagramPadding, conf.useMaxWidth);\n\n  // If node has a link, wrap it in an anchor SVG object.\n  const keys = Object.keys(vert);\n  keys.forEach(function (key) {\n    const vertex = vert[key];\n\n    if (vertex.link) {\n      const node = root.select('#' + id + ' [id=\"' + diagObj.db.lookUpDomId(key) + '\"]');\n      if (node) {\n        const link = doc.createElementNS('http://www.w3.org/2000/svg', 'a');\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'class', vertex.classes.join(' '));\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'href', vertex.link);\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'rel', 'noopener');\n        if (securityLevel === 'sandbox') {\n          link.setAttributeNS('http://www.w3.org/2000/svg', 'target', '_top');\n        } else if (vertex.linkTarget) {\n          link.setAttributeNS('http://www.w3.org/2000/svg', 'target', vertex.linkTarget);\n        }\n\n        const linkNode = node.insert(function () {\n          return link;\n        }, ':first-child');\n\n        const shape = node.select('.label-container');\n        if (shape) {\n          linkNode.append(function () {\n            return shape.node();\n          });\n        }\n\n        const label = node.select('.label');\n        if (label) {\n          linkNode.append(function () {\n            return label.node();\n          });\n        }\n      }\n    }\n  });\n};\n\nexport default {\n  setConf,\n  addVertices,\n  addEdges,\n  getClasses,\n  draw,\n};\n","// @ts-ignore: TODO Fix ts errors\nimport flowParser from './parser/flow';\nimport flowDb from './flowDb';\nimport flowRenderer from './flowRenderer';\nimport flowRendererV2 from './flowRenderer-v2';\nimport flowStyles from './styles';\nimport { MermaidConfig } from '../../config.type';\n\nexport const diagram = {\n  parser: flowParser,\n  db: flowDb,\n  renderer: flowRendererV2,\n  styles: flowStyles,\n  init: (cnf: MermaidConfig) => {\n    if (!cnf.flowchart) {\n      cnf.flowchart = {};\n    }\n    // TODO, broken as of 2022-09-14 (13809b50251845475e6dca65cc395761be38fbd2)\n    cnf.flowchart.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    flowRenderer.setConf(cnf.flowchart);\n    flowDb.clear();\n    flowDb.setGen('gen-1');\n  },\n};\n","import { render } from './dagre-js/render.js';\nimport * as graphlib from './graphlib/index.js';\n\nimport * as intersect from './dagre-js/intersect/index.js';\n\nexport { graphlib, intersect, render };\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport { layout } from '../dagre/index.js';\nimport { arrows, setArrows } from './arrows.js';\nimport { createClusters, setCreateClusters } from './create-clusters.js';\nimport { createEdgeLabels, setCreateEdgeLabels } from './create-edge-labels.js';\nimport { createEdgePaths, setCreateEdgePaths } from './create-edge-paths.js';\nimport { createNodes, setCreateNodes } from './create-nodes.js';\nimport { positionClusters } from './position-clusters.js';\nimport { positionEdgeLabels } from './position-edge-labels.js';\nimport { positionNodes } from './position-nodes.js';\nimport { shapes, setShapes } from './shapes.js';\n\nexport { render };\n\n// This design is based on http://bost.ocks.org/mike/chart/.\nfunction render() {\n  var fn = function (svg, g) {\n    preProcessGraph(g);\n\n    var outputGroup = createOrSelectGroup(svg, 'output');\n    var clustersGroup = createOrSelectGroup(outputGroup, 'clusters');\n    var edgePathsGroup = createOrSelectGroup(outputGroup, 'edgePaths');\n    var edgeLabels = createEdgeLabels(createOrSelectGroup(outputGroup, 'edgeLabels'), g);\n    var nodes = createNodes(createOrSelectGroup(outputGroup, 'nodes'), g, shapes);\n\n    layout(g);\n\n    positionNodes(nodes, g);\n    positionEdgeLabels(edgeLabels, g);\n    createEdgePaths(edgePathsGroup, g, arrows);\n\n    var clusters = createClusters(clustersGroup, g);\n    positionClusters(clusters, g);\n\n    postProcessGraph(g);\n  };\n\n  fn.createNodes = function (value) {\n    if (!arguments.length) return createNodes;\n    setCreateNodes(value);\n    return fn;\n  };\n\n  fn.createClusters = function (value) {\n    if (!arguments.length) return createClusters;\n    setCreateClusters(value);\n    return fn;\n  };\n\n  fn.createEdgeLabels = function (value) {\n    if (!arguments.length) return createEdgeLabels;\n    setCreateEdgeLabels(value);\n    return fn;\n  };\n\n  fn.createEdgePaths = function (value) {\n    if (!arguments.length) return createEdgePaths;\n    setCreateEdgePaths(value);\n    return fn;\n  };\n\n  fn.shapes = function (value) {\n    if (!arguments.length) return shapes;\n    setShapes(value);\n    return fn;\n  };\n\n  fn.arrows = function (value) {\n    if (!arguments.length) return arrows;\n    setArrows(value);\n    return fn;\n  };\n\n  return fn;\n}\n\nvar NODE_DEFAULT_ATTRS = {\n  paddingLeft: 10,\n  paddingRight: 10,\n  paddingTop: 10,\n  paddingBottom: 10,\n  rx: 0,\n  ry: 0,\n  shape: 'rect',\n};\n\nvar EDGE_DEFAULT_ATTRS = {\n  arrowhead: 'normal',\n  curve: d3.curveLinear,\n};\n\nfunction preProcessGraph(g) {\n  g.nodes().forEach(function (v) {\n    var node = g.node(v);\n    if (!_.has(node, 'label') && !g.children(v).length) {\n      node.label = v;\n    }\n\n    if (_.has(node, 'paddingX')) {\n      _.defaults(node, {\n        paddingLeft: node.paddingX,\n        paddingRight: node.paddingX,\n      });\n    }\n\n    if (_.has(node, 'paddingY')) {\n      _.defaults(node, {\n        paddingTop: node.paddingY,\n        paddingBottom: node.paddingY,\n      });\n    }\n\n    if (_.has(node, 'padding')) {\n      _.defaults(node, {\n        paddingLeft: node.padding,\n        paddingRight: node.padding,\n        paddingTop: node.padding,\n        paddingBottom: node.padding,\n      });\n    }\n\n    _.defaults(node, NODE_DEFAULT_ATTRS);\n\n    _.each(['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom'], function (k) {\n      node[k] = Number(node[k]);\n    });\n\n    // Save dimensions for restore during post-processing\n    if (_.has(node, 'width')) {\n      node._prevWidth = node.width;\n    }\n    if (_.has(node, 'height')) {\n      node._prevHeight = node.height;\n    }\n  });\n\n  g.edges().forEach(function (e) {\n    var edge = g.edge(e);\n    if (!_.has(edge, 'label')) {\n      edge.label = '';\n    }\n    _.defaults(edge, EDGE_DEFAULT_ATTRS);\n  });\n}\n\nfunction postProcessGraph(g) {\n  _.each(g.nodes(), function (v) {\n    var node = g.node(v);\n\n    // Restore original dimensions\n    if (_.has(node, '_prevWidth')) {\n      node.width = node._prevWidth;\n    } else {\n      delete node.width;\n    }\n\n    if (_.has(node, '_prevHeight')) {\n      node.height = node._prevHeight;\n    } else {\n      delete node.height;\n    }\n\n    delete node._prevWidth;\n    delete node._prevHeight;\n  });\n}\n\nfunction createOrSelectGroup(root, name) {\n  var selection = root.select('g.' + name);\n  if (selection.empty()) {\n    selection = root.append('g').attr('class', name);\n  }\n  return selection;\n}\n","import * as util from './util.js';\n\nexport { arrows, setArrows };\n\nvar arrows = {\n  normal,\n  vee,\n  undirected,\n};\n\nfunction setArrows(value) {\n  arrows = value;\n}\n\nfunction normal(parent, id, edge, type) {\n  var marker = parent\n    .append('marker')\n    .attr('id', id)\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', 9)\n    .attr('refY', 5)\n    .attr('markerUnits', 'strokeWidth')\n    .attr('markerWidth', 8)\n    .attr('markerHeight', 6)\n    .attr('orient', 'auto');\n\n  var path = marker\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n    .style('stroke-width', 1)\n    .style('stroke-dasharray', '1,0');\n  util.applyStyle(path, edge[type + 'Style']);\n  if (edge[type + 'Class']) {\n    path.attr('class', edge[type + 'Class']);\n  }\n}\n\nfunction vee(parent, id, edge, type) {\n  var marker = parent\n    .append('marker')\n    .attr('id', id)\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', 9)\n    .attr('refY', 5)\n    .attr('markerUnits', 'strokeWidth')\n    .attr('markerWidth', 8)\n    .attr('markerHeight', 6)\n    .attr('orient', 'auto');\n\n  var path = marker\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 L 4 5 z')\n    .style('stroke-width', 1)\n    .style('stroke-dasharray', '1,0');\n  util.applyStyle(path, edge[type + 'Style']);\n  if (edge[type + 'Class']) {\n    path.attr('class', edge[type + 'Class']);\n  }\n}\n\nfunction undirected(parent, id, edge, type) {\n  var marker = parent\n    .append('marker')\n    .attr('id', id)\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', 9)\n    .attr('refY', 5)\n    .attr('markerUnits', 'strokeWidth')\n    .attr('markerWidth', 8)\n    .attr('markerHeight', 6)\n    .attr('orient', 'auto');\n\n  var path = marker\n    .append('path')\n    .attr('d', 'M 0 5 L 10 5')\n    .style('stroke-width', 1)\n    .style('stroke-dasharray', '1,0');\n  util.applyStyle(path, edge[type + 'Style']);\n  if (edge[type + 'Class']) {\n    path.attr('class', edge[type + 'Class']);\n  }\n}\n","import * as d3 from 'd3';\nimport { addLabel } from './label/add-label.js';\nimport * as util from './util.js';\n\nexport { createClusters, setCreateClusters };\n\nvar createClusters = function (selection, g) {\n  var clusters = g.nodes().filter(function (v) {\n    return util.isSubgraph(g, v);\n  });\n  var svgClusters = selection.selectAll('g.cluster').data(clusters, function (v) {\n    return v;\n  });\n\n  util.applyTransition(svgClusters.exit(), g).style('opacity', 0).remove();\n\n  var enterSelection = svgClusters\n    .enter()\n    .append('g')\n    .attr('class', 'cluster')\n    .attr('id', function (v) {\n      var node = g.node(v);\n      return node.id;\n    })\n    .style('opacity', 0)\n    .each(function (v) {\n      var node = g.node(v);\n      var thisGroup = d3.select(this);\n      d3.select(this).append('rect');\n      var labelGroup = thisGroup.append('g').attr('class', 'label');\n      addLabel(labelGroup, node, node.clusterLabelPos);\n    });\n\n  svgClusters = svgClusters.merge(enterSelection);\n\n  svgClusters = util.applyTransition(svgClusters, g).style('opacity', 1);\n\n  svgClusters.selectAll('rect').each(function (c) {\n    var node = g.node(c);\n    var domCluster = d3.select(this);\n    util.applyStyle(domCluster, node.style);\n  });\n\n  return svgClusters;\n};\n\nfunction setCreateClusters(value) {\n  createClusters = value;\n}\n","import { addHtmlLabel } from './add-html-label.js';\nimport { addSVGLabel } from './add-svg-label.js';\nimport { addTextLabel } from './add-text-label.js';\n\nexport { addLabel };\n\nfunction addLabel(root, node, location) {\n  var label = node.label;\n  var labelSvg = root.append('g');\n\n  // Allow the label to be a string, a function that returns a DOM element, or\n  // a DOM element itself.\n  if (node.labelType === 'svg') {\n    addSVGLabel(labelSvg, node);\n  } else if (typeof label !== 'string' || node.labelType === 'html') {\n    addHtmlLabel(labelSvg, node);\n  } else {\n    addTextLabel(labelSvg, node);\n  }\n\n  var labelBBox = labelSvg.node().getBBox();\n  var y;\n  switch (location) {\n    case 'top':\n      y = -node.height / 2;\n      break;\n    case 'bottom':\n      y = node.height / 2 - labelBBox.height;\n      break;\n    default:\n      y = -labelBBox.height / 2;\n  }\n  labelSvg.attr('transform', 'translate(' + -labelBBox.width / 2 + ',' + y + ')');\n\n  return labelSvg;\n}\n","import * as util from '../util.js';\n\nexport { addSVGLabel };\n\nfunction addSVGLabel(root, node) {\n  var domNode = root;\n\n  domNode.node().appendChild(node.label);\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n","import * as util from '../util.js';\n\nexport { addTextLabel };\n\n/*\n * Attaches a text label to the specified root. Handles escape sequences.\n */\nfunction addTextLabel(root, node) {\n  var domNode = root.append('text');\n\n  var lines = processEscapeSequences(node.label).split('\\n');\n  for (var i = 0; i < lines.length; i++) {\n    domNode\n      .append('tspan')\n      .attr('xml:space', 'preserve')\n      .attr('dy', '1em')\n      .attr('x', '1')\n      .text(lines[i]);\n  }\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n\nfunction processEscapeSequences(text) {\n  var newText = '';\n  var escaped = false;\n  var ch;\n  for (var i = 0; i < text.length; ++i) {\n    ch = text[i];\n    if (escaped) {\n      switch (ch) {\n        case 'n':\n          newText += '\\n';\n          break;\n        default:\n          newText += ch;\n      }\n      escaped = false;\n    } else if (ch === '\\\\') {\n      escaped = true;\n    } else {\n      newText += ch;\n    }\n  }\n  return newText;\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport { addLabel } from './label/add-label.js';\nimport * as util from './util.js';\n\nexport { createEdgeLabels, setCreateEdgeLabels };\n\nlet createEdgeLabels = function (selection, g) {\n  var svgEdgeLabels = selection\n    .selectAll('g.edgeLabel')\n    .data(g.edges(), function (e) {\n      return util.edgeToId(e);\n    })\n    .classed('update', true);\n\n  svgEdgeLabels.exit().remove();\n  svgEdgeLabels.enter().append('g').classed('edgeLabel', true).style('opacity', 0);\n\n  svgEdgeLabels = selection.selectAll('g.edgeLabel');\n\n  svgEdgeLabels.each(function (e) {\n    var root = d3.select(this);\n    root.select('.label').remove();\n    var edge = g.edge(e);\n    var label = addLabel(root, g.edge(e), 0).classed('label', true);\n    var bbox = label.node().getBBox();\n\n    if (edge.labelId) {\n      label.attr('id', edge.labelId);\n    }\n    if (!_.has(edge, 'width')) {\n      edge.width = bbox.width;\n    }\n    if (!_.has(edge, 'height')) {\n      edge.height = bbox.height;\n    }\n  });\n\n  var exitSelection;\n\n  if (svgEdgeLabels.exit) {\n    exitSelection = svgEdgeLabels.exit();\n  } else {\n    exitSelection = svgEdgeLabels.selectAll(null); // empty selection\n  }\n\n  util.applyTransition(exitSelection, g).style('opacity', 0).remove();\n\n  return svgEdgeLabels;\n};\n\nfunction setCreateEdgeLabels(value) {\n  createEdgeLabels = value;\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport { intersectNode } from './intersect/intersect-node.js';\nimport * as util from './util.js';\n\nexport { createEdgePaths, setCreateEdgePaths };\n\nvar createEdgePaths = function (selection, g, arrows) {\n  var previousPaths = selection\n    .selectAll('g.edgePath')\n    .data(g.edges(), function (e) {\n      return util.edgeToId(e);\n    })\n    .classed('update', true);\n\n  var newPaths = enter(previousPaths, g);\n  exit(previousPaths, g);\n\n  var svgPaths = previousPaths.merge !== undefined ? previousPaths.merge(newPaths) : previousPaths;\n  util.applyTransition(svgPaths, g).style('opacity', 1);\n\n  // Save DOM element in the path group, and set ID and class\n  svgPaths.each(function (e) {\n    var domEdge = d3.select(this);\n    var edge = g.edge(e);\n    edge.elem = this;\n\n    if (edge.id) {\n      domEdge.attr('id', edge.id);\n    }\n\n    util.applyClass(\n      domEdge,\n      edge['class'],\n      (domEdge.classed('update') ? 'update ' : '') + 'edgePath'\n    );\n  });\n\n  svgPaths.selectAll('path.path').each(function (e) {\n    var edge = g.edge(e);\n    edge.arrowheadId = _.uniqueId('arrowhead');\n\n    var domEdge = d3\n      .select(this)\n      .attr('marker-end', function () {\n        return 'url(' + makeFragmentRef(location.href, edge.arrowheadId) + ')';\n      })\n      .style('fill', 'none');\n\n    util.applyTransition(domEdge, g).attr('d', function (e) {\n      return calcPoints(g, e);\n    });\n\n    util.applyStyle(domEdge, edge.style);\n  });\n\n  svgPaths.selectAll('defs *').remove();\n  svgPaths.selectAll('defs').each(function (e) {\n    var edge = g.edge(e);\n    var arrowhead = arrows[edge.arrowhead];\n    arrowhead(d3.select(this), edge.arrowheadId, edge, 'arrowhead');\n  });\n\n  return svgPaths;\n};\n\nfunction setCreateEdgePaths(value) {\n  createEdgePaths = value;\n}\n\nfunction makeFragmentRef(url, fragmentId) {\n  var baseUrl = url.split('#')[0];\n  return baseUrl + '#' + fragmentId;\n}\n\nfunction calcPoints(g, e) {\n  var edge = g.edge(e);\n  var tail = g.node(e.v);\n  var head = g.node(e.w);\n  var points = edge.points.slice(1, edge.points.length - 1);\n  points.unshift(intersectNode(tail, points[0]));\n  points.push(intersectNode(head, points[points.length - 1]));\n\n  return createLine(edge, points);\n}\n\nfunction createLine(edge, points) {\n  // @ts-expect-error\n  var line = (d3.line || d3.svg.line)()\n    .x(function (d) {\n      return d.x;\n    })\n    .y(function (d) {\n      return d.y;\n    });\n\n  (line.curve || line.interpolate)(edge.curve);\n\n  return line(points);\n}\n\nfunction getCoords(elem) {\n  var bbox = elem.getBBox();\n  var matrix = elem.ownerSVGElement\n    .getScreenCTM()\n    .inverse()\n    .multiply(elem.getScreenCTM())\n    .translate(bbox.width / 2, bbox.height / 2);\n  return { x: matrix.e, y: matrix.f };\n}\n\nfunction enter(svgPaths, g) {\n  var svgPathsEnter = svgPaths.enter().append('g').attr('class', 'edgePath').style('opacity', 0);\n  svgPathsEnter\n    .append('path')\n    .attr('class', 'path')\n    .attr('d', function (e) {\n      var edge = g.edge(e);\n      var sourceElem = g.node(e.v).elem;\n      var points = _.range(edge.points.length).map(function () {\n        return getCoords(sourceElem);\n      });\n      return createLine(edge, points);\n    });\n  svgPathsEnter.append('defs');\n  return svgPathsEnter;\n}\n\nfunction exit(svgPaths, g) {\n  var svgPathExit = svgPaths.exit();\n  util.applyTransition(svgPathExit, g).style('opacity', 0).remove();\n}\n","export { intersectNode };\n\nfunction intersectNode(node, point) {\n  return node.intersect(point);\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport { addLabel } from './label/add-label.js';\nimport * as util from './util.js';\n\nexport { createNodes, setCreateNodes };\n\nvar createNodes = function (selection, g, shapes) {\n  var simpleNodes = g.nodes().filter(function (v) {\n    return !util.isSubgraph(g, v);\n  });\n  var svgNodes = selection\n    .selectAll('g.node')\n    .data(simpleNodes, function (v) {\n      return v;\n    })\n    .classed('update', true);\n\n  svgNodes.exit().remove();\n\n  svgNodes.enter().append('g').attr('class', 'node').style('opacity', 0);\n\n  svgNodes = selection.selectAll('g.node');\n\n  svgNodes.each(function (v) {\n    var node = g.node(v);\n    var thisGroup = d3.select(this);\n    util.applyClass(\n      thisGroup,\n      node['class'],\n      (thisGroup.classed('update') ? 'update ' : '') + 'node'\n    );\n\n    thisGroup.select('g.label').remove();\n    var labelGroup = thisGroup.append('g').attr('class', 'label');\n    var labelDom = addLabel(labelGroup, node);\n    var shape = shapes[node.shape];\n    var bbox = _.pick(labelDom.node().getBBox(), 'width', 'height');\n\n    node.elem = this;\n\n    if (node.id) {\n      thisGroup.attr('id', node.id);\n    }\n    if (node.labelId) {\n      labelGroup.attr('id', node.labelId);\n    }\n\n    if (_.has(node, 'width')) {\n      bbox.width = node.width;\n    }\n    if (_.has(node, 'height')) {\n      bbox.height = node.height;\n    }\n\n    bbox.width += node.paddingLeft + node.paddingRight;\n    bbox.height += node.paddingTop + node.paddingBottom;\n    labelGroup.attr(\n      'transform',\n      'translate(' +\n        (node.paddingLeft - node.paddingRight) / 2 +\n        ',' +\n        (node.paddingTop - node.paddingBottom) / 2 +\n        ')'\n    );\n\n    var root = d3.select(this);\n    root.select('.label-container').remove();\n    var shapeSvg = shape(root, bbox, node).classed('label-container', true);\n    util.applyStyle(shapeSvg, node.style);\n\n    var shapeBBox = shapeSvg.node().getBBox();\n    node.width = shapeBBox.width;\n    node.height = shapeBBox.height;\n  });\n\n  var exitSelection;\n\n  if (svgNodes.exit) {\n    exitSelection = svgNodes.exit();\n  } else {\n    exitSelection = svgNodes.selectAll(null); // empty selection\n  }\n\n  util.applyTransition(exitSelection, g).style('opacity', 0).remove();\n\n  return svgNodes;\n};\n\nfunction setCreateNodes(value) {\n  createNodes = value;\n}\n","import * as d3 from 'd3';\nimport * as util from './util.js';\n\nexport { positionClusters };\n\nfunction positionClusters(selection, g) {\n  var created = selection.filter(function () {\n    return !d3.select(this).classed('update');\n  });\n\n  function translate(v) {\n    var node = g.node(v);\n    return 'translate(' + node.x + ',' + node.y + ')';\n  }\n\n  created.attr('transform', translate);\n\n  util.applyTransition(selection, g).style('opacity', 1).attr('transform', translate);\n\n  util\n    .applyTransition(created.selectAll('rect'), g)\n    .attr('width', function (v) {\n      return g.node(v).width;\n    })\n    .attr('height', function (v) {\n      return g.node(v).height;\n    })\n    .attr('x', function (v) {\n      var node = g.node(v);\n      return -node.width / 2;\n    })\n    .attr('y', function (v) {\n      var node = g.node(v);\n      return -node.height / 2;\n    });\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { positionEdgeLabels };\n\nfunction positionEdgeLabels(selection, g) {\n  var created = selection.filter(function () {\n    return !d3.select(this).classed('update');\n  });\n\n  function translate(e) {\n    var edge = g.edge(e);\n    return _.has(edge, 'x') ? 'translate(' + edge.x + ',' + edge.y + ')' : '';\n  }\n\n  created.attr('transform', translate);\n\n  util.applyTransition(selection, g).style('opacity', 1).attr('transform', translate);\n}\n","import * as d3 from 'd3';\nimport * as util from './util.js';\n\nexport { positionNodes };\n\nfunction positionNodes(selection, g) {\n  var created = selection.filter(function () {\n    return !d3.select(this).classed('update');\n  });\n\n  function translate(v) {\n    var node = g.node(v);\n    return 'translate(' + node.x + ',' + node.y + ')';\n  }\n\n  created.attr('transform', translate);\n\n  util.applyTransition(selection, g).style('opacity', 1).attr('transform', translate);\n}\n","import { intersectCircle } from './intersect/intersect-circle.js';\nimport { intersectEllipse } from './intersect/intersect-ellipse.js';\nimport { intersectPolygon } from './intersect/intersect-polygon.js';\nimport { intersectRect } from './intersect/intersect-rect.js';\n\nexport { shapes, setShapes };\n\nvar shapes = {\n  rect,\n  ellipse,\n  circle,\n  diamond,\n};\n\nfunction setShapes(value) {\n  shapes = value;\n}\n\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent\n    .insert('rect', ':first-child')\n    .attr('rx', node.rx)\n    .attr('ry', node.ry)\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('width', bbox.width)\n    .attr('height', bbox.height);\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2;\n  var ry = bbox.height / 2;\n  var shapeSvg = parent\n    .insert('ellipse', ':first-child')\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('rx', rx)\n    .attr('ry', ry);\n\n  node.intersect = function (point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2;\n  var shapeSvg = parent\n    .insert('circle', ':first-child')\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('r', r);\n\n  node.intersect = function (point) {\n    return intersectCircle(node, r, point);\n  };\n\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = (bbox.width * Math.SQRT2) / 2;\n  var h = (bbox.height * Math.SQRT2) / 2;\n  var points = [\n    { x: 0, y: -h },\n    { x: -w, y: 0 },\n    { x: 0, y: h },\n    { x: w, y: 0 },\n  ];\n  var shapeSvg = parent.insert('polygon', ':first-child').attr(\n    'points',\n    points\n      .map(function (p) {\n        return p.x + ',' + p.y;\n      })\n      .join(' ')\n  );\n\n  node.intersect = function (p) {\n    return intersectPolygon(node, points, p);\n  };\n\n  return shapeSvg;\n}\n","import { intersectEllipse } from './intersect-ellipse.js';\n\nexport { intersectCircle };\n\nfunction intersectCircle(node, rx, point) {\n  return intersectEllipse(node, rx, rx, point);\n}\n","export { intersectEllipse };\n\nfunction intersectEllipse(node, rx, ry, point) {\n  // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html\n\n  var cx = node.x;\n  var cy = node.y;\n\n  var px = cx - point.x;\n  var py = cy - point.y;\n\n  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);\n\n  var dx = Math.abs((rx * ry * px) / det);\n  if (point.x < cx) {\n    dx = -dx;\n  }\n  var dy = Math.abs((rx * ry * py) / det);\n  if (point.y < cy) {\n    dy = -dy;\n  }\n\n  return { x: cx + dx, y: cy + dy };\n}\n","import { intersectLine } from './intersect-line.js';\n\nexport { intersectPolygon };\n\n/*\n * Returns the point ({x, y}) at which the point argument intersects with the\n * node argument assuming that it has the shape specified by polygon.\n */\nfunction intersectPolygon(node, polyPoints, point) {\n  var x1 = node.x;\n  var y1 = node.y;\n\n  var intersections = [];\n\n  var minX = Number.POSITIVE_INFINITY;\n  var minY = Number.POSITIVE_INFINITY;\n  polyPoints.forEach(function (entry) {\n    minX = Math.min(minX, entry.x);\n    minY = Math.min(minY, entry.y);\n  });\n\n  var left = x1 - node.width / 2 - minX;\n  var top = y1 - node.height / 2 - minY;\n\n  for (var i = 0; i < polyPoints.length; i++) {\n    var p1 = polyPoints[i];\n    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];\n    var intersect = intersectLine(\n      node,\n      point,\n      { x: left + p1.x, y: top + p1.y },\n      { x: left + p2.x, y: top + p2.y }\n    );\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n\n  if (!intersections.length) {\n    console.log('NO INTERSECTION FOUND, RETURN NODE CENTER', node);\n    return node;\n  }\n\n  if (intersections.length > 1) {\n    // More intersections, find the one nearest to edge end point\n    intersections.sort(function (p, q) {\n      var pdx = p.x - point.x;\n      var pdy = p.y - point.y;\n      var distp = Math.sqrt(pdx * pdx + pdy * pdy);\n\n      var qdx = q.x - point.x;\n      var qdy = q.y - point.y;\n      var distq = Math.sqrt(qdx * qdx + qdy * qdy);\n\n      return distp < distq ? -1 : distp === distq ? 0 : 1;\n    });\n  }\n  return intersections[0];\n}\n","export { intersectLine };\n\n/*\n * Returns the point at which two lines, p and q, intersect or returns\n * undefined if they do not intersect.\n */\nfunction intersectLine(p1, p2, q1, q2) {\n  // Algorithm from J. Avro, (ed.) Graphics Gems, No 2, Morgan Kaufmann, 1994,\n  // p7 and p473.\n\n  var a1, a2, b1, b2, c1, c2;\n  var r1, r2, r3, r4;\n  var denom, offset, num;\n  var x, y;\n\n  // Compute a1, b1, c1, where line joining points 1 and 2 is F(x,y) = a1 x +\n  // b1 y + c1 = 0.\n  a1 = p2.y - p1.y;\n  b1 = p1.x - p2.x;\n  c1 = p2.x * p1.y - p1.x * p2.y;\n\n  // Compute r3 and r4.\n  r3 = a1 * q1.x + b1 * q1.y + c1;\n  r4 = a1 * q2.x + b1 * q2.y + c1;\n\n  // Check signs of r3 and r4. If both point 3 and point 4 lie on\n  // same side of line 1, the line segments do not intersect.\n  if (r3 !== 0 && r4 !== 0 && sameSign(r3, r4)) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Compute a2, b2, c2 where line joining points 3 and 4 is G(x,y) = a2 x + b2 y + c2 = 0\n  a2 = q2.y - q1.y;\n  b2 = q1.x - q2.x;\n  c2 = q2.x * q1.y - q1.x * q2.y;\n\n  // Compute r1 and r2\n  r1 = a2 * p1.x + b2 * p1.y + c2;\n  r2 = a2 * p2.x + b2 * p2.y + c2;\n\n  // Check signs of r1 and r2. If both point 1 and point 2 lie\n  // on same side of second line segment, the line segments do\n  // not intersect.\n  if (r1 !== 0 && r2 !== 0 && sameSign(r1, r2)) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Line segments intersect: compute intersection point.\n  denom = a1 * b2 - a2 * b1;\n  if (denom === 0) {\n    return /*COLLINEAR*/;\n  }\n\n  offset = Math.abs(denom / 2);\n\n  // The denom/2 is to get rounding instead of truncating. It\n  // is added or subtracted to the numerator, depending upon the\n  // sign of the numerator.\n  num = b1 * c2 - b2 * c1;\n  x = num < 0 ? (num - offset) / denom : (num + offset) / denom;\n\n  num = a2 * c1 - a1 * c2;\n  y = num < 0 ? (num - offset) / denom : (num + offset) / denom;\n\n  return { x: x, y: y };\n}\n\nfunction sameSign(r1, r2) {\n  return r1 * r2 > 0;\n}\n","export { intersectRect };\n\nfunction intersectRect(node, point) {\n  var x = node.x;\n  var y = node.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = node.width / 2;\n  var h = node.height / 2;\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = dy === 0 ? 0 : (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = dx === 0 ? 0 : (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n","import * as node from './intersect-node.js';\nimport * as circle from './intersect-circle.js';\nimport * as ellipse from './intersect-ellipse.js';\nimport * as polygon from './intersect-polygon.js';\nimport * as rect from './intersect-rect.js';\n\nexport { node, circle, ellipse, polygon, rect };\n","import * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { select, curveLinear, selectAll } from 'd3';\n\nimport flowDb from './flowDb';\nimport { getConfig } from '../../config';\nimport utils from '../../utils';\n\nimport { render } from '../../dagre-wrapper/index.js';\nimport { addHtmlLabel } from 'dagre-d3-es/src/dagre-js/label/add-html-label.js';\nimport { log } from '../../logger';\nimport common, { evaluate } from '../common/common';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\n\nconst conf = {};\nexport const setConf = function (cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    conf[key] = cnf[key];\n  }\n};\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param vert Object containing the vertices.\n * @param g The graph that is to be drawn.\n * @param svgId\n * @param root\n * @param doc\n * @param diagObj\n */\nexport const addVertices = function (vert, g, svgId, root, doc, diagObj) {\n  const svg = root.select(`[id=\"${svgId}\"]`);\n  const keys = Object.keys(vert);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  keys.forEach(function (id) {\n    const vertex = vert[id];\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     * @type {string}\n     */\n    let classStr = 'default';\n    if (vertex.classes.length > 0) {\n      classStr = vertex.classes.join(' ');\n    }\n    classStr = classStr + ' flowchart-label';\n    const styles = getStylesFromArray(vertex.styles);\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    let vertexText = vertex.text !== undefined ? vertex.text : vertex.id;\n\n    // We create a SVG label, either by delegating to addHtmlLabel or manually\n    let vertexNode;\n    log.info('vertex', vertex, vertex.labelType);\n    if (vertex.labelType === 'markdown') {\n      log.info('vertex', vertex, vertex.labelType);\n    } else {\n      if (evaluate(getConfig().flowchart.htmlLabels)) {\n        // TODO: addHtmlLabel accepts a labelStyle. Do we possibly have that?\n        const node = {\n          label: vertexText.replace(\n            /fa[blrs]?:fa-[\\w-]+/g,\n            (s) => `<i class='${s.replace(':', ' ')}'></i>`\n          ),\n        };\n        vertexNode = addHtmlLabel(svg, node).node();\n        vertexNode.parentNode.removeChild(vertexNode);\n      } else {\n        const svgLabel = doc.createElementNS('http://www.w3.org/2000/svg', 'text');\n        svgLabel.setAttribute('style', styles.labelStyle.replace('color:', 'fill:'));\n\n        const rows = vertexText.split(common.lineBreakRegex);\n\n        for (const row of rows) {\n          const tspan = doc.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n          tspan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');\n          tspan.setAttribute('dy', '1em');\n          tspan.setAttribute('x', '1');\n          tspan.textContent = row;\n          svgLabel.appendChild(tspan);\n        }\n        vertexNode = svgLabel;\n      }\n    }\n\n    let radious = 0;\n    let _shape = '';\n    // Set the shape based parameters\n    switch (vertex.type) {\n      case 'round':\n        radious = 5;\n        _shape = 'rect';\n        break;\n      case 'square':\n        _shape = 'rect';\n        break;\n      case 'diamond':\n        _shape = 'question';\n        break;\n      case 'hexagon':\n        _shape = 'hexagon';\n        break;\n      case 'odd':\n        _shape = 'rect_left_inv_arrow';\n        break;\n      case 'lean_right':\n        _shape = 'lean_right';\n        break;\n      case 'lean_left':\n        _shape = 'lean_left';\n        break;\n      case 'trapezoid':\n        _shape = 'trapezoid';\n        break;\n      case 'inv_trapezoid':\n        _shape = 'inv_trapezoid';\n        break;\n      case 'odd_right':\n        _shape = 'rect_left_inv_arrow';\n        break;\n      case 'circle':\n        _shape = 'circle';\n        break;\n      case 'ellipse':\n        _shape = 'ellipse';\n        break;\n      case 'stadium':\n        _shape = 'stadium';\n        break;\n      case 'subroutine':\n        _shape = 'subroutine';\n        break;\n      case 'cylinder':\n        _shape = 'cylinder';\n        break;\n      case 'group':\n        _shape = 'rect';\n        break;\n      case 'doublecircle':\n        _shape = 'doublecircle';\n        break;\n      default:\n        _shape = 'rect';\n    }\n    // Add the node\n    g.setNode(vertex.id, {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: vertexText,\n      labelType: vertex.labelType,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      link: vertex.link,\n      linkTarget: vertex.linkTarget,\n      tooltip: diagObj.db.getTooltip(vertex.id) || '',\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      haveCallback: vertex.haveCallback,\n      width: vertex.type === 'group' ? 500 : undefined,\n      dir: vertex.dir,\n      type: vertex.type,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding,\n    });\n\n    log.info('setNode', {\n      labelStyle: styles.labelStyle,\n      labelType: vertex.labelType,\n      shape: _shape,\n      labelText: vertexText,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      dir: vertex.dir,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding,\n    });\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param {object} edges The edges to add to the graph\n * @param {object} g The graph object\n * @param diagObj\n */\nexport const addEdges = function (edges, g, diagObj) {\n  log.info('abc78 edges = ', edges);\n  let cnt = 0;\n  let linkIdCnt = {};\n\n  let defaultStyle;\n  let defaultLabelStyle;\n\n  if (edges.defaultStyle !== undefined) {\n    const defaultStyles = getStylesFromArray(edges.defaultStyle);\n    defaultStyle = defaultStyles.style;\n    defaultLabelStyle = defaultStyles.labelStyle;\n  }\n\n  edges.forEach(function (edge) {\n    cnt++;\n\n    // Identify Link\n    var linkIdBase = 'L-' + edge.start + '-' + edge.end;\n    // count the links from+to the same node to give unique id\n    if (linkIdCnt[linkIdBase] === undefined) {\n      linkIdCnt[linkIdBase] = 0;\n      log.info('abc78 new entry', linkIdBase, linkIdCnt[linkIdBase]);\n    } else {\n      linkIdCnt[linkIdBase]++;\n      log.info('abc78 new entry', linkIdBase, linkIdCnt[linkIdBase]);\n    }\n    let linkId = linkIdBase + '-' + linkIdCnt[linkIdBase];\n    log.info('abc78 new link id to be used is', linkIdBase, linkId, linkIdCnt[linkIdBase]);\n    var linkNameStart = 'LS-' + edge.start;\n    var linkNameEnd = 'LE-' + edge.end;\n\n    const edgeData = { style: '', labelStyle: '' };\n    edgeData.minlen = edge.length || 1;\n    //edgeData.id = 'id' + cnt;\n\n    // Set link type for rendering\n    if (edge.type === 'arrow_open') {\n      edgeData.arrowhead = 'none';\n    } else {\n      edgeData.arrowhead = 'normal';\n    }\n\n    // Check of arrow types, placed here in order not to break old rendering\n    edgeData.arrowTypeStart = 'arrow_open';\n    edgeData.arrowTypeEnd = 'arrow_open';\n\n    /* eslint-disable no-fallthrough */\n    switch (edge.type) {\n      case 'double_arrow_cross':\n        edgeData.arrowTypeStart = 'arrow_cross';\n      case 'arrow_cross':\n        edgeData.arrowTypeEnd = 'arrow_cross';\n        break;\n      case 'double_arrow_point':\n        edgeData.arrowTypeStart = 'arrow_point';\n      case 'arrow_point':\n        edgeData.arrowTypeEnd = 'arrow_point';\n        break;\n      case 'double_arrow_circle':\n        edgeData.arrowTypeStart = 'arrow_circle';\n      case 'arrow_circle':\n        edgeData.arrowTypeEnd = 'arrow_circle';\n        break;\n    }\n\n    let style = '';\n    let labelStyle = '';\n\n    switch (edge.stroke) {\n      case 'normal':\n        style = 'fill:none;';\n        if (defaultStyle !== undefined) {\n          style = defaultStyle;\n        }\n        if (defaultLabelStyle !== undefined) {\n          labelStyle = defaultLabelStyle;\n        }\n        edgeData.thickness = 'normal';\n        edgeData.pattern = 'solid';\n        break;\n      case 'dotted':\n        edgeData.thickness = 'normal';\n        edgeData.pattern = 'dotted';\n        edgeData.style = 'fill:none;stroke-width:2px;stroke-dasharray:3;';\n        break;\n      case 'thick':\n        edgeData.thickness = 'thick';\n        edgeData.pattern = 'solid';\n        edgeData.style = 'stroke-width: 3.5px;fill:none;';\n        break;\n      case 'invisible':\n        edgeData.thickness = 'invisible';\n        edgeData.pattern = 'solid';\n        edgeData.style = 'stroke-width: 0;fill:none;';\n        break;\n    }\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      style = styles.style;\n      labelStyle = styles.labelStyle;\n    }\n\n    edgeData.style = edgeData.style += style;\n    edgeData.labelStyle = edgeData.labelStyle += labelStyle;\n\n    if (edge.interpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (edges.defaultInterpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(edges.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n    }\n\n    edgeData.labelType = edge.labelType;\n    edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n    if (edge.style === undefined) {\n      edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none;';\n    }\n\n    edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n\n    edgeData.id = linkId;\n    edgeData.classes = 'flowchart-link ' + linkNameStart + ' ' + linkNameEnd;\n\n    // Add the edge to the graph\n    g.setEdge(edge.start, edge.end, edgeData, cnt);\n  });\n};\n\n/**\n * Returns the all the styles from classDef statements in the graph definition.\n *\n * @param text\n * @param diagObj\n * @returns {object} ClassDef styles\n */\nexport const getClasses = function (text, diagObj) {\n  log.info('Extracting classes');\n  diagObj.db.clear();\n  try {\n    // Parse the graph definition\n    diagObj.parse(text);\n    return diagObj.db.getClasses();\n  } catch (e) {\n    return;\n  }\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param text\n * @param id\n */\n\nexport const draw = function (text, id, _version, diagObj) {\n  log.info('Drawing flowchart');\n  diagObj.db.clear();\n  flowDb.setGen('gen-2');\n  // Parse the graph definition\n  diagObj.parser.parse(text);\n\n  // Fetch the default direction, use TD if none was found\n  let dir = diagObj.db.getDirection();\n  if (dir === undefined) {\n    dir = 'TD';\n  }\n\n  const { securityLevel, flowchart: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n\n  // Handle root and document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n\n  // Create the input mermaid.graph\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: dir,\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 0,\n      marginy: 0,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  let subG;\n  const subGraphs = diagObj.db.getSubGraphs();\n  log.info('Subgraphs - ', subGraphs);\n  for (let i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n    log.info('Subgraph - ', subG);\n    diagObj.db.addVertex(\n      subG.id,\n      { text: subG.title, type: subG.labelType },\n      'group',\n      undefined,\n      subG.classes,\n      subG.dir\n    );\n  }\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const vert = diagObj.db.getVertices();\n\n  const edges = diagObj.db.getEdges();\n\n  log.info('Edges', edges);\n  let i = 0;\n  for (i = subGraphs.length - 1; i >= 0; i--) {\n    // for (let i = 0; i < subGraphs.length; i++) {\n    subG = subGraphs[i];\n\n    selectAll('cluster').append('text');\n\n    for (let j = 0; j < subG.nodes.length; j++) {\n      log.info('Setting up subgraphs', subG.nodes[j], subG.id);\n      g.setParent(subG.nodes[j], subG.id);\n    }\n  }\n  addVertices(vert, g, id, root, doc, diagObj);\n  addEdges(edges, g, diagObj);\n\n  // Add custom shapes\n  // flowChartShapes.addToRenderV2(addShape);\n\n  // Set up an SVG group so that we can translate the final graph.\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  const element = root.select('#' + id + ' g');\n  render(element, g, ['point', 'circle', 'cross'], 'flowchart', id);\n\n  utils.insertTitle(svg, 'flowchartTitleText', conf.titleTopMargin, diagObj.db.getDiagramTitle());\n\n  setupGraphViewbox(g, svg, conf.diagramPadding, conf.useMaxWidth);\n\n  // Index nodes\n  diagObj.db.indexNodes('subGraph' + i);\n\n  // Add label rects for non html labels\n  if (!conf.htmlLabels) {\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n\n  // If node has a link, wrap it in an anchor SVG object.\n  const keys = Object.keys(vert);\n  keys.forEach(function (key) {\n    const vertex = vert[key];\n\n    if (vertex.link) {\n      const node = select('#' + id + ' [id=\"' + key + '\"]');\n      if (node) {\n        const link = doc.createElementNS('http://www.w3.org/2000/svg', 'a');\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'class', vertex.classes.join(' '));\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'href', vertex.link);\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'rel', 'noopener');\n        if (securityLevel === 'sandbox') {\n          link.setAttributeNS('http://www.w3.org/2000/svg', 'target', '_top');\n        } else if (vertex.linkTarget) {\n          link.setAttributeNS('http://www.w3.org/2000/svg', 'target', vertex.linkTarget);\n        }\n\n        const linkNode = node.insert(function () {\n          return link;\n        }, ':first-child');\n\n        const shape = node.select('.label-container');\n        if (shape) {\n          linkNode.append(function () {\n            return shape.node();\n          });\n        }\n\n        const label = node.select('.label');\n        if (label) {\n          linkNode.append(function () {\n            return label.node();\n          });\n        }\n      }\n    }\n  });\n};\n\nexport default {\n  setConf,\n  addVertices,\n  addEdges,\n  getClasses,\n  draw,\n};\n","/** Returns the styles given options */\nexport interface FlowChartStyleOptions {\n  arrowheadColor: string;\n  border2: string;\n  clusterBkg: string;\n  clusterBorder: string;\n  edgeLabelBackground: string;\n  fontFamily: string;\n  lineColor: string;\n  mainBkg: string;\n  nodeBorder: string;\n  nodeTextColor: string;\n  tertiaryColor: string;\n  textColor: string;\n  titleColor: string;\n}\n\nconst getStyles = (options: FlowChartStyleOptions) =>\n  `.label {\n    font-family: ${options.fontFamily};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n  .cluster-label text {\n    fill: ${options.titleColor};\n  }\n  .cluster-label span,p {\n    color: ${options.titleColor};\n  }\n\n  .label text,span,p {\n    fill: ${options.nodeTextColor || options.textColor};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ${options.mainBkg};\n    stroke: ${options.nodeBorder};\n    stroke-width: 1px;\n  }\n  .flowchart-label text {\n    text-anchor: middle;\n  }\n  // .flowchart-label .text-outer-tspan {\n  //   text-anchor: middle;\n  // }\n  // .flowchart-label .text-inner-tspan {\n  //   text-anchor: start;\n  // }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ${options.arrowheadColor};\n  }\n\n  .edgePath .path {\n    stroke: ${options.lineColor};\n    stroke-width: 2.0px;\n  }\n\n  .flowchart-link {\n    stroke: ${options.lineColor};\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ${options.edgeLabelBackground};\n    rect {\n      opacity: 0.5;\n      background-color: ${options.edgeLabelBackground};\n      fill: ${options.edgeLabelBackground};\n    }\n    text-align: center;\n  }\n\n  .cluster rect {\n    fill: ${options.clusterBkg};\n    stroke: ${options.clusterBorder};\n    stroke-width: 1px;\n  }\n\n  .cluster text {\n    fill: ${options.titleColor};\n  }\n\n  .cluster span,p {\n    color: ${options.titleColor};\n  }\n  /* .cluster div {\n    color: ${options.titleColor};\n  } */\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: ${options.fontFamily};\n    font-size: 12px;\n    background: ${options.tertiaryColor};\n    border: 1px solid ${options.border2};\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .flowchartTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n`;\n\nexport default getStyles;\n","import { line, curveBasis } from 'd3';\nimport utils from '../../utils';\nimport { log } from '../../logger';\nimport { parseGenericTypes } from '../common/common';\n\nlet edgeCount = 0;\nexport const drawEdge = function (elem, path, relation, conf, diagObj) {\n  const getRelationType = function (type) {\n    switch (type) {\n      case diagObj.db.relationType.AGGREGATION:\n        return 'aggregation';\n      case diagObj.db.relationType.EXTENSION:\n        return 'extension';\n      case diagObj.db.relationType.COMPOSITION:\n        return 'composition';\n      case diagObj.db.relationType.DEPENDENCY:\n        return 'dependency';\n      case diagObj.db.relationType.LOLLIPOP:\n        return 'lollipop';\n    }\n  };\n\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n\n  // The data for our line\n  const lineData = path.points;\n\n  // This is the accessor function we talked about above\n  const lineFunction = line()\n    .x(function (d) {\n      return d.x;\n    })\n    .y(function (d) {\n      return d.y;\n    })\n    .curve(curveBasis);\n\n  const svgPath = elem\n    .append('path')\n    .attr('d', lineFunction(lineData))\n    .attr('id', 'edge' + edgeCount)\n    .attr('class', 'relation');\n  let url = '';\n  if (conf.arrowMarkerAbsolute) {\n    url =\n      window.location.protocol +\n      '//' +\n      window.location.host +\n      window.location.pathname +\n      window.location.search;\n    url = url.replace(/\\(/g, '\\\\(');\n    url = url.replace(/\\)/g, '\\\\)');\n  }\n\n  if (relation.relation.lineType == 1) {\n    svgPath.attr('class', 'relation dashed-line');\n  }\n  if (relation.relation.lineType == 10) {\n    svgPath.attr('class', 'relation dotted-line');\n  }\n  if (relation.relation.type1 !== 'none') {\n    svgPath.attr(\n      'marker-start',\n      'url(' + url + '#' + getRelationType(relation.relation.type1) + 'Start' + ')'\n    );\n  }\n  if (relation.relation.type2 !== 'none') {\n    svgPath.attr(\n      'marker-end',\n      'url(' + url + '#' + getRelationType(relation.relation.type2) + 'End' + ')'\n    );\n  }\n\n  let x, y;\n  const l = path.points.length;\n  // Calculate Label position\n  let labelPosition = utils.calcLabelPosition(path.points);\n  x = labelPosition.x;\n  y = labelPosition.y;\n\n  let p1_card_x, p1_card_y;\n  let p2_card_x, p2_card_y;\n\n  if (l % 2 !== 0 && l > 1) {\n    let cardinality_1_point = utils.calcCardinalityPosition(\n      relation.relation.type1 !== 'none',\n      path.points,\n      path.points[0]\n    );\n    let cardinality_2_point = utils.calcCardinalityPosition(\n      relation.relation.type2 !== 'none',\n      path.points,\n      path.points[l - 1]\n    );\n\n    log.debug('cardinality_1_point ' + JSON.stringify(cardinality_1_point));\n    log.debug('cardinality_2_point ' + JSON.stringify(cardinality_2_point));\n\n    p1_card_x = cardinality_1_point.x;\n    p1_card_y = cardinality_1_point.y;\n    p2_card_x = cardinality_2_point.x;\n    p2_card_y = cardinality_2_point.y;\n  }\n\n  if (relation.title !== undefined) {\n    const g = elem.append('g').attr('class', 'classLabel');\n    const label = g\n      .append('text')\n      .attr('class', 'label')\n      .attr('x', x)\n      .attr('y', y)\n      .attr('fill', 'red')\n      .attr('text-anchor', 'middle')\n      .text(relation.title);\n\n    window.label = label;\n    const bounds = label.node().getBBox();\n\n    g.insert('rect', ':first-child')\n      .attr('class', 'box')\n      .attr('x', bounds.x - conf.padding / 2)\n      .attr('y', bounds.y - conf.padding / 2)\n      .attr('width', bounds.width + conf.padding)\n      .attr('height', bounds.height + conf.padding);\n  }\n\n  log.info('Rendering relation ' + JSON.stringify(relation));\n  if (relation.relationTitle1 !== undefined && relation.relationTitle1 !== 'none') {\n    const g = elem.append('g').attr('class', 'cardinality');\n    g.append('text')\n      .attr('class', 'type1')\n      .attr('x', p1_card_x)\n      .attr('y', p1_card_y)\n      .attr('fill', 'black')\n      .attr('font-size', '6')\n      .text(relation.relationTitle1);\n  }\n  if (relation.relationTitle2 !== undefined && relation.relationTitle2 !== 'none') {\n    const g = elem.append('g').attr('class', 'cardinality');\n    g.append('text')\n      .attr('class', 'type2')\n      .attr('x', p2_card_x)\n      .attr('y', p2_card_y)\n      .attr('fill', 'black')\n      .attr('font-size', '6')\n      .text(relation.relationTitle2);\n  }\n\n  edgeCount++;\n};\n\n/**\n * Renders a class diagram\n *\n * @param {SVGSVGElement} elem The element to draw it into\n * @param classDef\n * @param conf\n * @param diagObj\n * @todo Add more information in the JSDOC here\n */\nexport const drawClass = function (elem, classDef, conf, diagObj) {\n  log.debug('Rendering class ', classDef, conf);\n\n  const id = classDef.id;\n  const classInfo = {\n    id: id,\n    label: classDef.id,\n    width: 0,\n    height: 0,\n  };\n\n  // add class group\n  const g = elem.append('g').attr('id', diagObj.db.lookUpDomId(id)).attr('class', 'classGroup');\n\n  // add title\n  let title;\n  if (classDef.link) {\n    title = g\n      .append('svg:a')\n      .attr('xlink:href', classDef.link)\n      .attr('target', classDef.linkTarget)\n      .append('text')\n      .attr('y', conf.textHeight + conf.padding)\n      .attr('x', 0);\n  } else {\n    title = g\n      .append('text')\n      .attr('y', conf.textHeight + conf.padding)\n      .attr('x', 0);\n  }\n\n  // add annotations\n  let isFirst = true;\n  classDef.annotations.forEach(function (member) {\n    const titleText2 = title.append('tspan').text('«' + member + '»');\n    if (!isFirst) {\n      titleText2.attr('dy', conf.textHeight);\n    }\n    isFirst = false;\n  });\n\n  let classTitleString = classDef.id;\n\n  if (classDef.type !== undefined && classDef.type !== '') {\n    classTitleString += '<' + classDef.type + '>';\n  }\n\n  const classTitle = title.append('tspan').text(classTitleString).attr('class', 'title');\n\n  // If class has annotations the title needs to have an offset of the text height\n  if (!isFirst) {\n    classTitle.attr('dy', conf.textHeight);\n  }\n\n  const titleHeight = title.node().getBBox().height;\n\n  const membersLine = g\n    .append('line') // text label for the x axis\n    .attr('x1', 0)\n    .attr('y1', conf.padding + titleHeight + conf.dividerMargin / 2)\n    .attr('y2', conf.padding + titleHeight + conf.dividerMargin / 2);\n\n  const members = g\n    .append('text') // text label for the x axis\n    .attr('x', conf.padding)\n    .attr('y', titleHeight + conf.dividerMargin + conf.textHeight)\n    .attr('fill', 'white')\n    .attr('class', 'classText');\n\n  isFirst = true;\n  classDef.members.forEach(function (member) {\n    addTspan(members, member, isFirst, conf);\n    isFirst = false;\n  });\n\n  const membersBox = members.node().getBBox();\n\n  const methodsLine = g\n    .append('line') // text label for the x axis\n    .attr('x1', 0)\n    .attr('y1', conf.padding + titleHeight + conf.dividerMargin + membersBox.height)\n    .attr('y2', conf.padding + titleHeight + conf.dividerMargin + membersBox.height);\n\n  const methods = g\n    .append('text') // text label for the x axis\n    .attr('x', conf.padding)\n    .attr('y', titleHeight + 2 * conf.dividerMargin + membersBox.height + conf.textHeight)\n    .attr('fill', 'white')\n    .attr('class', 'classText');\n\n  isFirst = true;\n\n  classDef.methods.forEach(function (method) {\n    addTspan(methods, method, isFirst, conf);\n    isFirst = false;\n  });\n\n  const classBox = g.node().getBBox();\n  var cssClassStr = ' ';\n\n  if (classDef.cssClasses.length > 0) {\n    cssClassStr = cssClassStr + classDef.cssClasses.join(' ');\n  }\n\n  const rect = g\n    .insert('rect', ':first-child')\n    .attr('x', 0)\n    .attr('y', 0)\n    .attr('width', classBox.width + 2 * conf.padding)\n    .attr('height', classBox.height + conf.padding + 0.5 * conf.dividerMargin)\n    .attr('class', cssClassStr);\n\n  const rectWidth = rect.node().getBBox().width;\n\n  // Center title\n  // We subtract the width of each text element from the class box width and divide it by 2\n  title.node().childNodes.forEach(function (x) {\n    x.setAttribute('x', (rectWidth - x.getBBox().width) / 2);\n  });\n\n  if (classDef.tooltip) {\n    title.insert('title').text(classDef.tooltip);\n  }\n\n  membersLine.attr('x2', rectWidth);\n  methodsLine.attr('x2', rectWidth);\n\n  classInfo.width = rectWidth;\n  classInfo.height = classBox.height + conf.padding + 0.5 * conf.dividerMargin;\n\n  return classInfo;\n};\n\n/**\n * Renders a note diagram\n *\n * @param {SVGSVGElement} elem The element to draw it into\n * @param {{id: string; text: string; class: string;}} note\n * @param conf\n * @param diagObj\n * @todo Add more information in the JSDOC here\n */\nexport const drawNote = function (elem, note, conf, diagObj) {\n  log.debug('Rendering note ', note, conf);\n\n  const id = note.id;\n  const noteInfo = {\n    id: id,\n    text: note.text,\n    width: 0,\n    height: 0,\n  };\n\n  // add class group\n  const g = elem.append('g').attr('id', id).attr('class', 'classGroup');\n\n  // add text\n  let text = g\n    .append('text')\n    .attr('y', conf.textHeight + conf.padding)\n    .attr('x', 0);\n\n  const lines = JSON.parse(`\"${note.text}\"`).split('\\n');\n\n  lines.forEach(function (line) {\n    log.debug(`Adding line: ${line}`);\n    text.append('tspan').text(line).attr('class', 'title').attr('dy', conf.textHeight);\n  });\n\n  const noteBox = g.node().getBBox();\n\n  const rect = g\n    .insert('rect', ':first-child')\n    .attr('x', 0)\n    .attr('y', 0)\n    .attr('width', noteBox.width + 2 * conf.padding)\n    .attr(\n      'height',\n      noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin\n    );\n\n  const rectWidth = rect.node().getBBox().width;\n\n  // Center title\n  // We subtract the width of each text element from the class box width and divide it by 2\n  text.node().childNodes.forEach(function (x) {\n    x.setAttribute('x', (rectWidth - x.getBBox().width) / 2);\n  });\n\n  noteInfo.width = rectWidth;\n  noteInfo.height =\n    noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin;\n\n  return noteInfo;\n};\n\nexport const parseMember = function (text) {\n  const fieldRegEx = /^([#+~-])?(\\w+)(~\\w+~|\\[])?\\s+(\\w+) *([$*])?$/;\n  const methodRegEx = /^([#+|~-])?(\\w+) *\\( *(.*)\\) *([$*])? *(\\w*[[\\]|~]*\\s*\\w*~?)$/;\n\n  let fieldMatch = text.match(fieldRegEx);\n  let methodMatch = text.match(methodRegEx);\n\n  if (fieldMatch && !methodMatch) {\n    return buildFieldDisplay(fieldMatch);\n  } else if (methodMatch) {\n    return buildMethodDisplay(methodMatch);\n  } else {\n    return buildLegacyDisplay(text);\n  }\n};\n\nconst buildFieldDisplay = function (parsedText) {\n  let cssStyle = '';\n  let displayText = '';\n\n  try {\n    let visibility = parsedText[1] ? parsedText[1].trim() : '';\n    let fieldType = parsedText[2] ? parsedText[2].trim() : '';\n    let genericType = parsedText[3] ? parseGenericTypes(parsedText[3].trim()) : '';\n    let fieldName = parsedText[4] ? parsedText[4].trim() : '';\n    let classifier = parsedText[5] ? parsedText[5].trim() : '';\n\n    displayText = visibility + fieldType + genericType + ' ' + fieldName;\n    cssStyle = parseClassifier(classifier);\n  } catch (err) {\n    displayText = parsedText;\n  }\n\n  return {\n    displayText: displayText,\n    cssStyle: cssStyle,\n  };\n};\n\nconst buildMethodDisplay = function (parsedText) {\n  let cssStyle = '';\n  let displayText = '';\n\n  try {\n    let visibility = parsedText[1] ? parsedText[1].trim() : '';\n    let methodName = parsedText[2] ? parsedText[2].trim() : '';\n    let parameters = parsedText[3] ? parseGenericTypes(parsedText[3].trim()) : '';\n    let classifier = parsedText[4] ? parsedText[4].trim() : '';\n    let returnType = parsedText[5] ? ' : ' + parseGenericTypes(parsedText[5]).trim() : '';\n\n    displayText = visibility + methodName + '(' + parameters + ')' + returnType;\n    cssStyle = parseClassifier(classifier);\n  } catch (err) {\n    displayText = parsedText;\n  }\n\n  return {\n    displayText: displayText,\n    cssStyle: cssStyle,\n  };\n};\n\nconst buildLegacyDisplay = function (text) {\n  // if for some reason we don't have any match, use old format to parse text\n  let displayText = '';\n  let cssStyle = '';\n  let returnType = '';\n  let methodStart = text.indexOf('(');\n  let methodEnd = text.indexOf(')');\n\n  if (methodStart > 1 && methodEnd > methodStart && methodEnd <= text.length) {\n    let visibility = '';\n    let methodName = '';\n\n    let firstChar = text.substring(0, 1);\n    if (firstChar.match(/\\w/)) {\n      methodName = text.substring(0, methodStart).trim();\n    } else {\n      if (firstChar.match(/[#+~-]/)) {\n        visibility = firstChar;\n      }\n\n      methodName = text.substring(1, methodStart).trim();\n    }\n\n    const parameters = text.substring(methodStart + 1, methodEnd);\n    const classifier = text.substring(methodEnd + 1, 1);\n    cssStyle = parseClassifier(text.substring(methodEnd + 1, methodEnd + 2));\n\n    displayText = visibility + methodName + '(' + parseGenericTypes(parameters.trim()) + ')';\n\n    if (methodEnd < text.length) {\n      returnType = text.substring(methodEnd + 2).trim();\n      if (returnType !== '') {\n        returnType = ' : ' + parseGenericTypes(returnType);\n        displayText += returnType;\n      }\n    }\n  } else {\n    // finally - if all else fails, just send the text back as written (other than parsing for generic types)\n    displayText = parseGenericTypes(text);\n  }\n\n  return {\n    displayText,\n    cssStyle,\n  };\n};\n/**\n * Adds a <tspan> for a member in a diagram\n *\n * @param {SVGElement} textEl The element to append to\n * @param {string} txt The member\n * @param {boolean} isFirst\n * @param {{ padding: string; textHeight: string }} conf The configuration for the member\n */\nconst addTspan = function (textEl, txt, isFirst, conf) {\n  let member = parseMember(txt);\n\n  const tSpan = textEl.append('tspan').attr('x', conf.padding).text(member.displayText);\n\n  if (member.cssStyle !== '') {\n    tSpan.attr('style', member.cssStyle);\n  }\n\n  if (!isFirst) {\n    tSpan.attr('dy', conf.textHeight);\n  }\n};\n\n/**\n * Gives the styles for a classifier\n *\n * @param {'+' | '-' | '#' | '~' | '*' | '$'} classifier The classifier string\n * @returns {string} Styling for the classifier\n */\nconst parseClassifier = function (classifier) {\n  switch (classifier) {\n    case '*':\n      return 'font-style:italic;';\n    case '$':\n      return 'text-decoration:underline;';\n    default:\n      return '';\n  }\n};\n\nexport default {\n  drawClass,\n  drawEdge,\n  drawNote,\n  parseMember,\n};\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n"],"names":["$933ff90a9a1060d3$var$conf","$933ff90a9a1060d3$var$flowRenderer","cnf","keys","Object","key","$933ff90a9a1060d3$export$6118d022d940d562","$5Gmgp","p","db","f","renderer","$dOnoM","styles","a","init","flowchart","arrowMarkerAbsolute","clear","setGen","parcelRequire","$2YFJl","$32e6113701c26fc1$export$b3890eb0ae9dca99","fn","svg","g","nodes","forEach","v","node","$8XLqy","default","children","length","label","$bZ3BC","paddingLeft","paddingX","paddingRight","paddingTop","paddingY","paddingBottom","padding","$32e6113701c26fc1$var$NODE_DEFAULT_ATTRS","$fpekr","k","Number","_prevWidth","width","_prevHeight","height","edges","e","edge","$32e6113701c26fc1$var$EDGE_DEFAULT_ATTRS","$32e6113701c26fc1$var$preProcessGraph","outputGroup","$32e6113701c26fc1$var$createOrSelectGroup","clustersGroup","edgePathsGroup","edgeLabels","$h22rD","createEdgeLabels","$kXQ1r","createNodes","$hvBt2","shapes","$hV1gR","layout","$c3aLw","positionNodes","$6UAuB","positionEdgeLabels","$gKfIZ","createEdgePaths","$6M3ec","arrows","clusters","$cAF5L","createClusters","$eA9Lm","positionClusters","$32e6113701c26fc1$var$postProcessGraph","value","arguments","setCreateNodes","setCreateClusters","setCreateEdgeLabels","setCreateEdgePaths","setShapes","setArrows","rx","ry","shape","arrowhead","curve","curveLinear","root","name","selection","select","empty","append","attr","$fUGrY","$4ee9baca1d59eea8$export$80adc0c60c17ef1e","parent","id","type","path","style","applyStyle","$4ee9baca1d59eea8$export$f0b5cf96139bfc8d","$92a8b8db4d0dabbc$export$8a2d678eaa6fbb41","filter","isSubgraph","svgClusters","selectAll","data","applyTransition","exit","remove","enterSelection","enter","each","thisGroup","this","labelGroup","$dfUtR","addLabel","clusterLabelPos","merge","c","domCluster","$92a8b8db4d0dabbc$export$568e6a531772b2ea","$ilMBJ","$9a687cf27f99facb$export$7382a268046a9fb1","location","labelSvg","labelType","$860lz","addSVGLabel","addHtmlLabel","$c9RZI","addTextLabel","y","labelBBox","getBBox","$5e4f272e8a36f285$export$677906c6a7c51a92","domNode","appendChild","labelStyle","$8da0357b58dc10b0$export$2b4e70b9d86be4f0","lines","text","ch","newText","escaped","i","$8da0357b58dc10b0$var$processEscapeSequences","split","$c6648509ea9d2eb1$export$dccd43656db7679c","exitSelection","svgEdgeLabels","edgeToId","classed","bbox","labelId","$c6648509ea9d2eb1$export$43964f850ab0841e","$c30d23cca7c74630$export$ce8d936dbc1efd48","previousPaths","newPaths","svgPaths","svgPathsEnter","sourceElem","elem","$c30d23cca7c74630$var$createLine","$jJJbn","points","map","x","matrix","ownerSVGElement","getScreenCTM","inverse","multiply","translate","$c30d23cca7c74630$var$enter","svgPathExit","$c30d23cca7c74630$var$exit","undefined","domEdge","applyClass","arrowheadId","$5GUsF","url","href","fragmentId","tail","head","w","slice","unshift","$6O58d","intersectNode","push","$c30d23cca7c74630$var$calcPoints","$c30d23cca7c74630$export$321d141fa82de395","line","d","interpolate","$4f4b649746328a23$export$d177fd5701b4bb5f","point","intersect","$f431abdb25d8dad2$export$953dd193a01bd6ec","simpleNodes","svgNodes","labelDom","$3mNDi","shapeSvg","shapeBBox","$f431abdb25d8dad2$export$5330e0e67069e4cc","$a9dc00317b963a59$export$387a50daec5fd0ae","created","$508447b0f70cf2ef$export$2b81b6d4d1e8a1d9","$8c5e1da7bcee977e$export$e2fb82607eb3f34f","$bnaJN","$cbf26526fe218e28$export$4ff7fc6f1af248b5","insert","$jTBQv","intersectRect","$33exb","intersectEllipse","r","Math","max","intersectCircle","SQRT2","h","join","$020TX","intersectPolygon","$cbf26526fe218e28$export$ed9b221d9c595d20","$847a2bf5861eb4fb$export$ca2166fef29dd9f","$238ced2006aac1ea$export$1fcec3deade822ca","cx","cy","px","py","det","sqrt","dx","abs","dy","$aopqb","$0060e307eebb7497$export$9c9dae97463328d8","polyPoints","x1","y1","intersections","minX","POSITIVE_INFINITY","minY","entry","min","left","top","p1","p2","intersectLine","sort","q","pdx","pdy","distp","qdx","qdy","distq","console","log","$790fdd66584da2f0$export$920a7bb29aa4f108","q1","q2","a1","a2","b1","b2","c1","c2","r1","r2","r3","r4","denom","offset","num","$790fdd66584da2f0$var$sameSign","$e7c082c6a3afba84$export$4a227323f5de0b79","sx","sy","$a0e2185c98e398ea$var$conf","$a0e2185c98e398ea$var$addVertices","vert","svgId","doc","diagObj","vertex","classStr","classes","$3IUvT","n","vertexNode","vertexText","$jmbVX","l","info","htmlLabels","replace","s","parentNode","removeChild","svgLabel","createElementNS","setAttribute","rows","lineBreakRegex","row","tspan","setAttributeNS","textContent","radious","_shape","setNode","labelText","class","link","linkTarget","tooltip","getTooltip","domId","lookUpDomId","haveCallback","dir","props","$a0e2185c98e398ea$var$addEdges","defaultStyle","defaultLabelStyle","cnt","linkIdCnt","defaultStyles","linkIdBase","start","end","linkId","linkNameStart","linkNameEnd","edgeData","minlen","arrowTypeStart","arrowTypeEnd","stroke","thickness","pattern","o","defaultInterpolate","arrowheadStyle","labelpos","setEdge","$a0e2185c98e398ea$export$2d1720544b23b823","parse","getClasses","_version","parser","getDirection","securityLevel","conf","nodeSpacing","rankSpacing","sandboxElement","contentDocument","body","document","$4LkSm","Graph","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","subG","subGraphs","getSubGraphs","addVertex","title","getVertices","getEdges","j","setParent","element","$evFAv","u","insertTitle","titleTopMargin","getDiagramTitle","diagramPadding","useMaxWidth","indexNodes","labels","querySelectorAll","dim","rect","insertBefore","firstChild","linkNode","$a0e2185c98e398ea$export$407448d2b89b1813","options","fontFamily","nodeTextColor","textColor","titleColor","mainBkg","nodeBorder","arrowheadColor","lineColor","edgeLabelBackground","clusterBkg","clusterBorder","tertiaryColor","border2","$adefb12e855c4667$var$edgeCount","$adefb12e855c4667$export$ffb5f4729a158638","fieldMatch","match","methodMatch","$adefb12e855c4667$var$buildFieldDisplay","$adefb12e855c4667$var$buildMethodDisplay","$adefb12e855c4667$var$buildLegacyDisplay","parsedText","cssStyle","displayText","visibility","trim","fieldType","genericType","z","fieldName","classifier","$adefb12e855c4667$var$parseClassifier","err","methodName","parameters","returnType","methodStart","indexOf","methodEnd","firstChar","substring","$adefb12e855c4667$var$addTspan","textEl","txt","isFirst","member","tSpan","textHeight","$adefb12e855c4667$export$2408f22a0fab9ae5","classDef","debug","classInfo","annotations","titleText2","classTitleString","classTitle","titleHeight","membersLine","dividerMargin","members","membersBox","methodsLine","methods","method","classBox","cssClassStr","cssClasses","rectWidth","childNodes","relation","getRelationType","relationType","AGGREGATION","EXTENSION","COMPOSITION","DEPENDENCY","LOLLIPOP","isNaN","lineData","lineFunction","curveBasis","svgPath","window","protocol","host","pathname","search","lineType","type1","type2","p1_card_x","p1_card_y","p2_card_x","p2_card_y","labelPosition","calcLabelPosition","cardinality_1_point","calcCardinalityPosition","cardinality_2_point","JSON","stringify","bounds","relationTitle1","relationTitle2","note","noteInfo","noteBox","$86d5c19d81d423c4$export$2e2bcd8739ae039","getPrototypeOf","$hArsG","$281ac82f5f5844b1$var$funcProto","Function","prototype","$281ac82f5f5844b1$var$objectProto","$281ac82f5f5844b1$var$funcToString","toString","$281ac82f5f5844b1$var$hasOwnProperty","hasOwnProperty","$281ac82f5f5844b1$var$objectCtorString","call","$281ac82f5f5844b1$export$2e2bcd8739ae039","$f2iog","proto","$bzIQZ","Ctor","constructor"],"version":3,"file":"flowDiagram-46a15f6f.94dc1d34.js.map"}